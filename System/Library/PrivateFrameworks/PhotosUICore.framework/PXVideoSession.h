/*
                       * This header is generated by classdump-dyld 1.5
                       * on Wednesday, October 27, 2021 at 3:16:26 PM Mountain Standard Time
                       * Operating System: Version 13.5.1 (Build 17F80)
                       * Image Source: /System/Library/PrivateFrameworks/PhotosUICore.framework/PhotosUICore
                       * classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos. Updated by Kevin Bradley.
                       */

#import <PhotosUICore/PhotosUICore-Structs.h>
#import <PhotosUICore/PXObservable.h>
#import <libobjc.A.dylib/ISChangeObserver.h>
#import <libobjc.A.dylib/AVPlayerItemOutputPullDelegate.h>
#import <libobjc.A.dylib/PXChangeObserver.h>
#import <libobjc.A.dylib/ISWrappedAVPlayerDelegate.h>

@protocol OS_dispatch_queue, PXVideoSessionDelegate;
@class NSTimer, ISWrappedAVPlayer, NSObject, NSMutableArray, ISWrappedAVAudioSession, NSCountedSet, NSMutableDictionary, NSMutableSet, PXDisplayLink, NSString, AVPlayerItemVideoOutput, AVPlayerItem, NSDate, PXNumberAnimator, PXVideoContentProvider, NSError;

@interface PXVideoSession : PXObservable <ISChangeObserver, AVPlayerItemOutputPullDelegate, PXChangeObserver, ISWrappedAVPlayerDelegate> {

	id _playerTimeObservationToken;
	NSTimer* _playerTimeAdvancementTimer;
	long long _tokenCounter;
	ISWrappedAVPlayer* _videoPlayer;
	void* _updateQueueIdentifier;
	NSObject*<OS_dispatch_queue> _audioSessionQueue;
	NSObject*<OS_dispatch_queue> _videoWorkQueue;
	NSObject*<OS_dispatch_queue> _stateQueue;
	NSObject*<OS_dispatch_queue> _updateQueue;
	NSMutableArray* _mainQueue_videoViewQueue;
	ISWrappedAVAudioSession* _audioSessionQueue_audioSession;
	NSCountedSet* _stateQueue_enteredControlContexts;
	NSMutableDictionary* _stateQueue_statesByControlContext;
	NSMutableSet* _stateQueue_pixelBufferOutputTokens;
	NSMutableSet* _stateQueue_pixelBufferPausedOutputTokens;
	PXDisplayLink* _stateQueue_displayLink;
	id _stateQueue_playbackTimeRangeEndBoundaryObserver;
	long long _stateQueue_playState;
	NSString* _stateQueue_AudioSessionCategory;
	unsigned long long _stateQueue_AudioSessionCategoryOptions;
	BOOL _stateQueue_isUpdatingAudioSession;
	BOOL _stateQueue_buffering;
	long long _stateQueue_desiredPlayState;
	AVPlayerItemVideoOutput* _stateQueue_videoOutput;
	SCD_Struct_PX26 _stateQueue_videoDuration;
	AVPlayerItem* _stateQueue_currentPlayerItem;
	BOOL _stateQueue_isPlayerTimeAdvancing;
	long long _stateQueue_audioStatus;
	AVPlayerItem* _stateQueue_playerItem;
	BOOL _stateQueue_isPlayable;
	BOOL _stateQueue_isStalled;
	BOOL _stateQueue_isLoopingEnabled;
	SCD_Struct_PX35 _stateQueue_playbackTimeRange;
	float _stateQueue_volume;
	BOOL _stateQueue_shouldFadeVolumeChange;
	BOOL _stateQueue_seekToBeginningAtEnd;
	BOOL _stateQueue_isAtEnd;
	BOOL _stateQueue_isAtBeginning;
	CGAffineTransform _stateQueue_videoRotationTransform;
	CVBufferRef _stateQueue_currentPixelBuffer;
	BOOL _stateQueue_readyForSeeking;
	struct {
		unsigned long long needsUpdate;
		unsigned long long updated;
		BOOL isPerformingUpdate;
	}  _updateQueue_updateFlags;
	BOOL _updateQueue_didFinishInitializingAudioSession;
	NSDate* _updateQueue_playRequestDate;
	SCD_Struct_PX26 _updateQueue_lastPlayerTime;
	PXNumberAnimator* _mainQueue_volumeAnimator;
	BOOL _allowsExternalPlayback;
	BOOL _isUpdatingAudioSession;
	id<PXVideoSessionDelegate> _delegate;
	PXVideoContentProvider* _contentProvider;
	NSError* _error;
	SCD_Struct_PX26 _currentTime;

}

@property (nonatomic,retain) AVPlayerItem * playerItem; 
@property (assign,getter=isBuffering,nonatomic) BOOL buffering; 
@property (assign,setter=setAtBeginning:,nonatomic) BOOL isAtBeginning; 
@property (assign,setter=setAtEnd:,nonatomic) BOOL isAtEnd; 
@property (assign,setter=setStalled:,nonatomic) BOOL isStalled; 
@property (assign,nonatomic) SCD_Struct_PX26 currentTime;                                              //@synthesize currentTime=_currentTime - In the implementation block
@property (assign,nonatomic) long long audioStatus; 
@property (assign,setter=setUpdatingAudioSession:,nonatomic) BOOL isUpdatingAudioSession;              //@synthesize isUpdatingAudioSession=_isUpdatingAudioSession - In the implementation block
@property (assign,nonatomic) SCD_Struct_PX26 videoDuration; 
@property (assign,nonatomic) CVBufferRef currentPixelBuffer; 
@property (assign,nonatomic) CGAffineTransform videoRotationTransform; 
@property (nonatomic,retain) PXDisplayLink * displayLink; 
@property (assign,nonatomic,__weak) id<PXVideoSessionDelegate> delegate;                               //@synthesize delegate=_delegate - In the implementation block
@property (nonatomic,readonly) PXVideoContentProvider * contentProvider;                               //@synthesize contentProvider=_contentProvider - In the implementation block
@property (nonatomic,readonly) long long playState; 
@property (nonatomic,readonly) float volume; 
@property (nonatomic,copy,readonly) NSString * audioSessionCategory; 
@property (nonatomic,readonly) unsigned long long audioSessionCategoryOptions; 
@property (nonatomic,readonly) NSError * error;                                                        //@synthesize error=_error - In the implementation block
@property (nonatomic,readonly) NSString * debugDetailedDescription; 
@property (nonatomic,readonly) BOOL isPlayable; 
@property (nonatomic,readonly) long long desiredPlayState; 
@property (nonatomic,readonly) BOOL preventsSleepDuringVideoPlayback; 
@property (nonatomic,readonly) BOOL allowsExternalPlayback;                                            //@synthesize allowsExternalPlayback=_allowsExternalPlayback - In the implementation block
@property (getter=isLoopingEnabled,nonatomic,readonly) BOOL loopingEnabled; 
@property (nonatomic,readonly) SCD_Struct_PX35 playbackTimeRange; 
@property (nonatomic,readonly) BOOL seekToBeginningAtEnd; 
@property (nonatomic,readonly) BOOL isReadyForSeeking; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(id)init;
-(void)dealloc;
-(id<PXVideoSessionDelegate>)delegate;
-(void)setDelegate:(id<PXVideoSessionDelegate>)arg1 ;
-(NSError *)error;
-(BOOL)isAtEnd;
-(BOOL)isStalled;
-(PXDisplayLink *)displayLink;
-(void)setDisplayLink:(PXDisplayLink *)arg1 ;
-(SCD_Struct_PX26)currentTime;
-(float)volume;
-(PXVideoContentProvider *)contentProvider;
-(void)cancelLoading;
-(void)setAllowsExternalPlayback:(BOOL)arg1 ;
-(void)seekToTime:(SCD_Struct_PX26)arg1 toleranceBefore:(SCD_Struct_PX26)arg2 toleranceAfter:(SCD_Struct_PX26)arg3 completionHandler:(/*^block*/id)arg4 ;
-(BOOL)allowsExternalPlayback;
-(void)outputMediaDataWillChange:(id)arg1 ;
-(BOOL)isPlayable;
-(void)seekToTime:(SCD_Struct_PX26)arg1 completionHandler:(/*^block*/id)arg2 ;
-(AVPlayerItem *)playerItem;
-(void)setPlayerItem:(AVPlayerItem *)arg1 ;
-(void)performChanges:(/*^block*/id)arg1 ;
-(void)setLoopingEnabled:(BOOL)arg1 ;
-(SCD_Struct_PX26)videoDuration;
-(void)setVideoDuration:(SCD_Struct_PX26)arg1 ;
-(void)setCurrentTime:(SCD_Struct_PX26)arg1 ;
-(void)setPlayable:(BOOL)arg1 ;
-(BOOL)isLoopingEnabled;
-(id)videoOutput;
-(void)setVideoOutput:(id)arg1 ;
-(void)setPreventsSleepDuringVideoPlayback:(BOOL)arg1 ;
-(id)videoPlayer;
-(void)avPlayer:(id)arg1 itemDidPlayToEnd:(id)arg2 ;
-(void)avPlayerDidDeallocate;
-(void)observable:(id)arg1 didChange:(unsigned long long)arg2 context:(void*)arg3 ;
-(long long)playState;
-(void)setPlayState:(long long)arg1 ;
-(id)mutableChangeObject;
-(void)didPerformChanges;
-(long long)desiredPlayState;
-(void)setDesiredPlayState:(long long)arg1 ;
-(CGImageRef)generateSnapshotImage;
-(void)_handleDisplayLink:(id)arg1 ;
-(CGAffineTransform)videoRotationTransform;
-(CVBufferRef)currentPixelBuffer;
-(void)_performChanges:(/*^block*/id)arg1 ;
-(id)initWithContentProvider:(id)arg1 ;
-(id)_stateQueue_newStateFromCurrent;
-(void)enterContext:(long long)arg1 ;
-(void)leaveContext:(long long)arg1 ;
-(void)performChanges:(/*^block*/id)arg1 withPlaybackContext:(long long)arg2 ;
-(void)performFinalCleanup;
-(void)prewarmVideoView;
-(void)_mainQueue_actuallyPrewarmVideoView;
-(id)dequeueVideoView;
-(void)recycleVideoView:(id)arg1 ;
-(void)requestPixelBufferOutputWithRequestIdentifier:(id)arg1 ;
-(void)cancelPixelBufferOutputWithRequestIdentifier:(id)arg1 ;
-(void)setAudioSessionCategory:(id)arg1 options:(unsigned long long)arg2 ;
-(void)_audioSessionQueue_updateAudioSessionWithCategory:(id)arg1 options:(unsigned long long)arg2 ;
-(unsigned long long)audioSessionCategoryOptions;
-(NSString *)audioSessionCategory;
-(void)loadIfNeededWithPriority:(long long)arg1 ;
-(void)_updateFromCurrentControlState;
-(void)_audioSessionQueue_initializeAudioSession;
-(void)_didFinishInitializingAudioSession;
-(id)playbackTimeRangeEndBoundaryObserver;
-(void)setPlaybackTimeRangeEndBoundaryObserver:(id)arg1 ;
-(id)_newVideoView;
-(void)_updateVideoOutput;
-(void)_addOutput:(id)arg1 toPlayerItem:(id)arg2 ;
-(void)_updateCurrentPixelBuffer;
-(void)_videoWorkQueue_updateCurrentPixelBufferWithVideoOutput:(id)arg1 outputTime:(double)arg2 ;
-(void)_updateDisplayLinkState;
-(void)setCurrentPixelBuffer:(CVBufferRef)arg1 ;
-(void)_updateDuration;
-(BOOL)_isAVPlayerPlayStateOutOfSync;
-(id)currentPlayerItem;
-(void)setCurrentPlayerItem:(id)arg1 ;
-(void)setUpdatingAudioSession:(BOOL)arg1 ;
-(void)setVolume:(float)arg1 withFade:(BOOL)arg2 ;
-(BOOL)preventsSleepDuringVideoPlayback;
-(SCD_Struct_PX35)playbackTimeRange;
-(void)setPlaybackTimeRange:(SCD_Struct_PX35)arg1 ;
-(BOOL)seekToBeginningAtEnd;
-(void)setSeekToBeginningAtEnd:(BOOL)arg1 ;
-(BOOL)isPlayerTimeAdvancing;
-(void)setPlayerTimeAdvancing:(BOOL)arg1 ;
-(long long)audioStatus;
-(void)setAudioStatus:(long long)arg1 ;
-(void)setStalled:(BOOL)arg1 ;
-(BOOL)isBuffering;
-(void)setBuffering:(BOOL)arg1 ;
-(BOOL)isReadyForSeeking;
-(void)setIsReadyForSeeking:(BOOL)arg1 ;
-(BOOL)isAtBeginning;
-(void)setAtBeginning:(BOOL)arg1 ;
-(void)setAtEnd:(BOOL)arg1 ;
-(unsigned long long)pixelBufferOutputTokenCount;
-(void)_handlePreferredTransformDidLoad;
-(void)_avPlayerTimeDidChange:(SCD_Struct_PX26)arg1 ;
-(void)_handlePlayerTimeAdvancementTimer:(id)arg1 ;
-(void)_updatePlayability;
-(void)_handlePlayabilityDidLoadForAsset:(id)arg1 ;
-(void)_setPlayabilityFromAsset:(id)arg1 ;
-(void)_updateAudioStatus;
-(void)_updateRotationTransform;
-(void)setVideoRotationTransform:(CGAffineTransform)arg1 ;
-(void)_updateAtBeginningOrEnd;
-(void)_updateAtBeginningOrEndWithPlayerItemDuration:(SCD_Struct_PX26)arg1 success:(BOOL)arg2 error:(id)arg3 ;
-(void)_updateBuffering;
-(void)_updateStalled;
-(void)_updatePlayerItem;
-(void)_updatePlayerItemInPlayer;
-(void)_updateVolumeAnimator;
-(void)_updatePlayerVolume;
-(void)_updateReadyForSeeking;
-(void)_updatePlayState;
-(void)_updateAVPlayerPlayState;
-(void)_removeAllVideoOutputs;
-(void)_seekToPlaybackTimeRangeStartIfNeeded;
-(void)_handleDidReachPlaybackTimeRangeEnd;
-(void)_logPlaybackState;
-(id)_playbackStateDescription;
-(void)_loadAssetTracksIfNeeded;
-(void)_handleAssetTracksDidLoadForAsset:(id)arg1 ;
-(void)_handleAudioSessionOutputVolumeDidChangeFromVolume:(float)arg1 toVolume:(float)arg2 ;
-(NSString *)debugDetailedDescription;
-(BOOL)_isOnUpdateQueue;
-(void)_assertOnUpdateQueue;
-(void)_performBlockOnUpdateQueue:(/*^block*/id)arg1 ;
-(BOOL)isUpdatingAudioSession;
@end

