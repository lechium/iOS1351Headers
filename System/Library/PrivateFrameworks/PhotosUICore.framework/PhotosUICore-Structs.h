/*
                       * This header is generated by classdump-dyld 1.5
                       * on Wednesday, October 27, 2021 at 3:16:27 PM Mountain Standard Time
                       * Operating System: Version 13.5.1 (Build 17F80)
                       * Image Source: /System/Library/PrivateFrameworks/PhotosUICore.framework/PhotosUICore
                       * classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos. Updated by Kevin Bradley.
                       */

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct _NSZone* NSZoneRef;

typedef struct CGPoint {
	double x;
	double y;
} CGPoint;

typedef struct CGContext* CGContextRef;

typedef struct {
	double field1;
	double field2;
	float field3;
} SCD_Struct_PX4;

typedef struct {
	SCD_Struct_PX4 field1;
} SCD_Struct_PX5;

typedef struct {
	float field1;
	float field2;
	float field3;
	float field4;
} SCD_Struct_PX6;

typedef struct {
	/*function pointer*/void* field1;
	= field2;
	SCD_Struct_PX6 field3;
	float field4[4];
} SCD_Struct_PX7;

typedef struct {
	float field1;
	SCD_Struct_PX7 field2;
	float field3;
	unsigned short field4;
	unsigned short field5;
	unsigned char field6;
} SCD_Struct_PX8;

typedef struct {
	int field1;
	int field2;
	float field3;
	long long field4;
	unsigned short field5;
	unsigned char field6;
} SCD_Struct_PX9;

typedef struct {
	CGRect field1;
	float field2;
	BOOL field3;
} SCD_Struct_PX10;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct PXValueAnimationSpec {
	long long type;
	double duration;
	long long curve;
	double epsilon;
	double stiffness;
	double dampingRatio;
	double initialVelocity;
} PXValueAnimationSpec;

typedef struct PXAssetBadgeInfo {
	unsigned long long badges;
	double duration;
	long long count;
} PXAssetBadgeInfo;

typedef struct {
	BOOL readinessDidChange;
} SCD_Struct_PX14;

typedef struct PXTileIdentifier {
	unsigned long long length;
	unsigned long long index[10];
} PXTileIdentifier;

typedef struct UIEdgeInsets {
	double top;
	double left;
	double bottom;
	double right;
} UIEdgeInsets;

typedef struct {
	float topLeft;
	float topRight;
	float bottomLeft;
	float bottomRight;
} SCD_Struct_PX17;

typedef struct {
	/*function pointer*/void* ;
	SCD_Struct_PX17 ;
	float byIndex[4];
} SCD_Struct_PX18;

typedef struct {
	/*function pointer*/void* field1;
	= field2;
	SCD_Struct_PX17 field3;
	float field4[4];
} SCD_Struct_PX19;

typedef struct {
	long long field1;
	BOOL field2;
	BOOL field3;
	BOOL field4;
	unsigned long long field5;
	BOOL field6;
	BOOL field7;
	CGRect field8;
} SCD_Struct_PX20;

typedef struct CGPath* CGPathRef;

typedef struct {
	float field1;
	SCD_Struct_PX18 field2;
	float field3;
	unsigned short field4;
	unsigned short field5;
	unsigned char field6;
} SCD_Struct_PX22;

typedef struct CGImage* CGImageRef;

typedef struct __CVBuffer* CVBufferRef;

typedef struct PXSimpleIndexPath {
	unsigned long long dataSourceIdentifier;
	long long section;
	long long item;
	long long subitem;
} PXSimpleIndexPath;

typedef struct {
	long long value;
	int timescale;
	unsigned flags;
	long long epoch;
} SCD_Struct_PX26;

typedef struct NSRange {
	unsigned long long location;
	unsigned long long length;
} NSRange;

typedef struct {
	long long field1;
	long long field2;
	long long field3;
	long long field4;
} SCD_Struct_PX28;

typedef struct {
	CGRect field1;
	BOOL field2;
	SCD_Struct_PX28 field3;
} SCD_Struct_PX29;

typedef struct CGColor* CGColorRef;

typedef struct {
	unsigned long long field1;
	unsigned long long field2;
	unsigned long long field3;
	unsigned long long field4;
	unsigned long long field5;
	unsigned long long field6;
	unsigned long long field7;
	unsigned long long field8;
} SCD_Struct_PX31;

typedef struct {
	double x;
	double y;
	float z;
} SCD_Struct_PX32;

typedef struct {
	SCD_Struct_PX32 center;
	 size;
} SCD_Struct_PX33;

typedef struct os_unfair_lock_s {
	unsigned _os_unfair_lock_opaque;
} os_unfair_lock_s;

typedef struct {
	SCD_Struct_PX26 start;
	SCD_Struct_PX26 duration;
} SCD_Struct_PX35;

typedef struct {
	unsigned spriteIndex;
	double paddedDistance;
	double unpaddedDistance;
	SCD_Struct_PX33 geometry;
} SCD_Struct_PX36;

typedef struct {
	unsigned field1;
	double field2;
	double field3;
	SCD_Struct_PX33 field4;
} SCD_Struct_PX37;

typedef struct {
	BOOL learnMoreTapped;
	BOOL dismissTapped;
} SCD_Struct_PX38;

typedef struct {
	unsigned long long field1;
	unsigned short field2;
	unsigned short field3;
} SCD_Struct_PX39;

typedef struct __CVMetalTextureCache* CVMetalTextureCacheRef;

typedef struct CGColorSpace* CGColorSpaceRef;

typedef struct {
	int field1;
	unsigned field2;
	unsigned field3;
} SCD_Struct_PX42;

typedef struct PXFaceTileImageParams {
	CGSize targetSize;
	unsigned long long cropFactor;
	unsigned long long style;
	BOOL cropBounded;
} PXFaceTileImageParams;

typedef struct {
	unsigned long long field1;
	id field2;
	unsigned long long field3;
	unsigned long long field4[5];
} SCD_Struct_PX44;

typedef struct {
	long long field1;
	long long field2;
	BOOL field3;
} SCD_Struct_PX45;

typedef struct {
	int field1;
	unsigned field2;
} SCD_Struct_PX46;

typedef struct LayoutContext {
	UIEdgeInsets contentInsets;
	CGSize itemSize;
	CGSize interitemSpacing;
	CGSize size;
	unsigned long long numberOfColumns;
	unsigned long long numberOfRows;
	long long layoutAxis;
} LayoutContext;

typedef struct {
	long long scrollRegime;
	BOOL isAnimatingScroll;
	BOOL isScrubbing;
	BOOL isAnimatingContent;
	unsigned long long zoomBehavior;
	BOOL isViewBoundsChanging;
	BOOL isInitialLoad;
	CGRect targetRect;
} SCD_Struct_PX48;

typedef struct {
	double field1[6];
	double field2[6];
	long long field3[6];
	double field4[6];
	double field5[6];
} SCD_Struct_PX49;

typedef struct PXGEngineScrollState {
	CGSize referenceSize;
	UIEdgeInsets contentInsets;
	CGRect visibleRect;
	CGRect targetRect;
	CGRect constrainedVisibleRect;
	CGPoint lastScrollDirection;
} PXGEngineScrollState;

typedef struct {
	float field1;
	float field2;
	float field3;
} SCD_Struct_PX51;

typedef struct {
	SCD_Struct_PX5 field1;
	SCD_Struct_PX5 field2;
	SCD_Struct_PX5 field3;
	1 field4;
	SCD_Struct_PX5 field5;
	1 field6;
	SCD_Struct_PX5 field7;
	1 field8;
	SCD_Struct_PX5 field9;
	1 field10;
	SCD_Struct_PX5 field11;
	1 field12;
	SCD_Struct_PX5 field13;
	1 field14;
	SCD_Struct_PX5 field15;
	1 field16;
	SCD_Struct_PX5 field17;
	1 field18;
	SCD_Struct_PX5 field19;
	1 field20;
	SCD_Struct_PX5 field21;
	1 field22;
	SCD_Struct_PX5 field23;
	1 field24;
	SCD_Struct_PX5 field25;
	1 field26;
	SCD_Struct_PX5 field27;
	1 field28;
	SCD_Struct_PX5 field29;
	1 field30;
	SCD_Struct_PX32 field31;
	1 field32;
	SCD_Struct_PX32 field33;
	1 field34;
	unsigned short field35;
	unsigned char field36;
} SCD_Struct_PX52;

typedef struct {
	long long field1;
	double field2;
	double field3;
	float field4;
	SCD_Struct_PX17 field5;
	void field6;
	void field7;
	void field8;
} SCD_Struct_PX53;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *> *> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, PXGRequestDetails>, std::__1::hash<int>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, PXGRequestDetails>, std::__1::hash<int>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, PXGRequestDetails>, std::__1::equal_to<int>, true> > {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, PXGRequestDetails>, std::__1::equal_to<int>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *> *> > __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<int, PXGRequestDetails>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, PXGRequestDetails>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, PXGRequestDetails>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, PXGRequestDetails> > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, PXGRequestDetails>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, PXGRequestDetails>, std::__1::hash<int>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, PXGRequestDetails>, std::__1::equal_to<int>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<int, PXGRequestDetails>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, PXGRequestDetails>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, PXGRequestDetails>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, PXGRequestDetails> > >;

typedef struct unordered_map<int, PXGRequestDetails, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, PXGRequestDetails> > > {
	hash_table<std::__1::__hash_value_type<int, PXGRequestDetails>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, PXGRequestDetails>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, PXGRequestDetails>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, PXGRequestDetails> > > __table_;
} unordered_map<int, PXGRequestDetails, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, PXGRequestDetails> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *> *> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, unsigned int>, std::__1::hash<int>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, unsigned int>, std::__1::hash<int>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, unsigned int>, std::__1::equal_to<int>, true> > {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, unsigned int>, std::__1::equal_to<int>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *> *> > __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<int, unsigned int>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, unsigned int>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, unsigned int>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, unsigned int> > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, unsigned int>, std::__1::hash<int>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, unsigned int>, std::__1::equal_to<int>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<int, unsigned int>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, unsigned int>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, unsigned int>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, unsigned int> > >;

typedef struct unordered_map<int, unsigned int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, unsigned int> > > {
	hash_table<std::__1::__hash_value_type<int, unsigned int>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, unsigned int>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, unsigned int>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, unsigned int> > > __table_;
} unordered_map<int, unsigned int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, unsigned int> > >;

typedef struct {
	int field1;
	int field2;
	int field3;
	unsigned short field4;
	void field5;
	unsigned field6;
	void field7;
	unsigned field8;
	unsigned field9;
} SCD_Struct_PX74;

typedef struct {
	unsigned field1;
	/*function pointer*/void* field2;
	/*function pointer*/void* field3;
	/*function pointer*/void* field4;
} SCD_Struct_PX75;

typedef struct {
	int field1;
} SCD_Struct_PX76;

typedef struct {
	unsigned char field1;
	G field2;
	A field3;
	float field4;
	float field5;
	int field6;
	n field7;
	e field8;
	T field9;
	const  field10;
	a field11;
	n field12;
	short field13;
	float field14;
	o field15;
	const  field16;
	m field17;
	double field18;
} SCD_Struct_PX77;

typedef struct {
	CGSize field1;
	unsigned short field2;
	CGSize field3;
	CGPoint field4;
	SCD_Struct_PX7 field5;
	7 field6;
	double field7;
} SCD_Struct_PX78;

typedef struct {
	unsigned long long pixelFormat;
	unsigned short width;
	unsigned short height;
} SCD_Struct_PX79;

typedef struct {
	BOOL shouldShowAddMoreButton;
	BOOL didTapAddMoreButton;
	BOOL oneUpPresentation;
} SCD_Struct_PX80;

typedef struct __CFString* CFStringRef;

typedef struct PXAlphaLayer {
	long long columnIndex;
	long long columns;
	double itemWidth;
	PXAlphaTransitionInfo leftTransition;
	PXAlphaTransitionInfo rightTransition;
} PXAlphaLayer;

typedef struct PXAlphaTransitionInfo {
	double fadeRangeMin;
	double fadeRangeMax;
	double autoFadeLeftValue;
	double autoFadeRightValue;
	PXAlphaLayer leftLayer;
	PXAlphaLayer rightLayer;
} PXAlphaTransitionInfo;

typedef struct CGAffineTransform {
	double a;
	double b;
	double c;
	double d;
	double tx;
	double ty;
} CGAffineTransform;

typedef struct PXDisplayVelocity {
	double x;
	double y;
	double scale;
	double rotation;
} PXDisplayVelocity;

typedef struct {
	unsigned long long field1;
	unsigned long long field2;
	unsigned long long field3;
} SCD_Struct_PX86;

typedef struct {
	unsigned long long photosCount;
	unsigned long long videosCount;
	unsigned long long othersCount;
} SCD_Struct_PX87;

typedef struct PHAssetResourceTableDataSpecification {
	int width;
	int height;
	int bytesPerRow;
	int dataWidth;
	int dataHeight;
	int imageDataOffset;
} PHAssetResourceTableDataSpecification;

typedef struct PXTileInfo {
	long long index;
	CGSize imageSize;
	CGSize minimumSize;
	BOOL hasCaption;
	BOOL hasLikes;
	long long commentCount;
	BOOL isBatchStart;
} PXTileInfo;

typedef struct {
	BOOL isSelectingAssets;
	BOOL visibleAssetCollections;
	BOOL willTransitionFromZoomLevelToZoomLevel;
	BOOL didTransitionFromZoomLevelToZoomLevel;
	BOOL dominantAssetCollectionReferenceForZoomLevel;
	BOOL transitionTypeFromZoomLevelToZoomLevel;
} SCD_Struct_PX90;

typedef struct {
	float field1;
	float field2;
	float field3;
	float field4;
	float field5;
	float field6;
	float field7;
	float field8;
} SCD_Struct_PX91;

typedef struct {
	id field1;
	_ field2;
	NSRange field3;
	float field4;
	int field5;
	unsigned char field6;
} SCD_Struct_PX92;

typedef struct {
	SCD_Struct_PX9 field1;
	SCD_Struct_PX22 field2;
	SCD_Struct_PX33 field3;
} SCD_Struct_PX93;

