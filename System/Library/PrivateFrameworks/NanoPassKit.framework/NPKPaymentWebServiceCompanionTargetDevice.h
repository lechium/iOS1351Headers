/*
                       * This header is generated by classdump-dyld 1.5
                       * on Wednesday, October 27, 2021 at 3:23:30 PM Mountain Standard Time
                       * Operating System: Version 13.5.1 (Build 17F80)
                       * Image Source: /System/Library/PrivateFrameworks/NanoPassKit.framework/NanoPassKit
                       * classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos. Updated by Kevin Bradley.
                       */

#import <libobjc.A.dylib/IDSServiceDelegate.h>
#import <libobjc.A.dylib/PKPaymentWebServiceTargetDeviceProtocol.h>
#import <libobjc.A.dylib/PKPaymentWebServiceArchiver.h>

@protocol NPKPaymentWebServiceCompanionTargetDeviceDelegate, OS_dispatch_queue, NPKPasscodeChangeCoordinatorProtocol;
@class IDSService, NPKCompanionAgentConnection, NSMutableDictionary, NSObject, NRActiveDeviceAssertion, NPKTargetDeviceAssertionManager, NPKTapToRadarManager, NPKSubcredentialInvitationCoordinator, NSString;

@interface NPKPaymentWebServiceCompanionTargetDevice : NSObject <IDSServiceDelegate, PKPaymentWebServiceTargetDeviceProtocol, PKPaymentWebServiceArchiver> {

	id<NPKPaymentWebServiceCompanionTargetDeviceDelegate> _delegate;
	unsigned long long _context;
	IDSService* _provisioningService;
	NPKCompanionAgentConnection* _companionAgentConnection;
	NSMutableDictionary* _outstandingRequests;
	NSObject*<OS_dispatch_queue> _internalQueue;
	NSObject*<OS_dispatch_queue> _responseQueue;
	NRActiveDeviceAssertion* _provisioningActiveDeviceAssertion;
	NPKTargetDeviceAssertionManager* _remoteDeviceAssertionManager;
	NPKTapToRadarManager* _manager;
	id<NPKPasscodeChangeCoordinatorProtocol> _passcodeChangeCoordinator;
	id _passcodeUpgradeFlowController;
	NPKSubcredentialInvitationCoordinator* _subcredentialInvitationCoordinator;

}

@property (assign,nonatomic) unsigned long long context;                                                              //@synthesize context=_context - In the implementation block
@property (nonatomic,retain) IDSService * provisioningService;                                                        //@synthesize provisioningService=_provisioningService - In the implementation block
@property (nonatomic,retain) NPKCompanionAgentConnection * companionAgentConnection;                                  //@synthesize companionAgentConnection=_companionAgentConnection - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * outstandingRequests;                                               //@synthesize outstandingRequests=_outstandingRequests - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> internalQueue;                                              //@synthesize internalQueue=_internalQueue - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> responseQueue;                                              //@synthesize responseQueue=_responseQueue - In the implementation block
@property (nonatomic,retain) NRActiveDeviceAssertion * provisioningActiveDeviceAssertion;                             //@synthesize provisioningActiveDeviceAssertion=_provisioningActiveDeviceAssertion - In the implementation block
@property (nonatomic,retain) NPKTargetDeviceAssertionManager * remoteDeviceAssertionManager;                          //@synthesize remoteDeviceAssertionManager=_remoteDeviceAssertionManager - In the implementation block
@property (nonatomic,retain) NPKTapToRadarManager * manager;                                                          //@synthesize manager=_manager - In the implementation block
@property (nonatomic,retain) id<NPKPasscodeChangeCoordinatorProtocol> passcodeChangeCoordinator;                      //@synthesize passcodeChangeCoordinator=_passcodeChangeCoordinator - In the implementation block
@property (assign,nonatomic,__weak) id passcodeUpgradeFlowController;                                                 //@synthesize passcodeUpgradeFlowController=_passcodeUpgradeFlowController - In the implementation block
@property (nonatomic,retain) NPKSubcredentialInvitationCoordinator * subcredentialInvitationCoordinator;              //@synthesize subcredentialInvitationCoordinator=_subcredentialInvitationCoordinator - In the implementation block
@property (assign,nonatomic,__weak) id<NPKPaymentWebServiceCompanionTargetDeviceDelegate> delegate;                   //@synthesize delegate=_delegate - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)bridgedClientInfoHTTPHeader;
-(id)init;
-(id<NPKPaymentWebServiceCompanionTargetDeviceDelegate>)delegate;
-(void)setDelegate:(id<NPKPaymentWebServiceCompanionTargetDeviceDelegate>)arg1 ;
-(unsigned long long)context;
-(NPKTapToRadarManager *)manager;
-(void)setContext:(unsigned long long)arg1 ;
-(id)deviceName;
-(id)deviceClass;
-(void)setManager:(NPKTapToRadarManager *)arg1 ;
-(NSMutableDictionary *)outstandingRequests;
-(void)setOutstandingRequests:(NSMutableDictionary *)arg1 ;
-(NSObject*<OS_dispatch_queue>)internalQueue;
-(void)setInternalQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(id)deviceRegion;
-(id)osVersion;
-(void)service:(id)arg1 account:(id)arg2 incomingUnhandledProtobuf:(id)arg3 fromID:(id)arg4 context:(id)arg5 ;
-(void)service:(id)arg1 activeAccountsChanged:(id)arg2 ;
-(void)service:(id)arg1 devicesChanged:(id)arg2 ;
-(void)service:(id)arg1 account:(id)arg2 identifier:(id)arg3 didSendWithSuccess:(BOOL)arg4 error:(id)arg5 ;
-(id)deviceVersion;
-(void)cloudStoreStatusWithCompletion:(/*^block*/id)arg1 ;
-(void)checkTLKsMissingWithCompletion:(/*^block*/id)arg1 ;
-(void)resetApplePayManateeViewWithCompletion:(/*^block*/id)arg1 ;
-(void)noteProvisioningUserInterfaceDidAppear;
-(void)noteProvisioningUserInterfaceDidDisappear;
-(void)noteProvisioningDidBegin;
-(void)noteProvisioningDidEnd;
-(void)claimSecureElementForCurrentUserWithCompletion:(/*^block*/id)arg1 ;
-(void)renewAppleAccountWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)enforceUpgradedPasscodePolicyWithCompletion:(/*^block*/id)arg1 ;
-(void)startRequiringUpgradedPasscodeWithPasscodeMeetsPolicy:(BOOL)arg1 ;
-(void)endRequiringUpgradedPasscodeIfNecessary;
-(void)updatedAccountsForProvisioningWithCompletion:(/*^block*/id)arg1 ;
-(void)performDeviceCheckInWithCompletion:(/*^block*/id)arg1 ;
-(void)archiveContext:(id)arg1 ;
-(void)archiveBackgroundContext:(id)arg1 ;
-(id)secureElementIdentifiers;
-(void)paymentWebServiceDidUpdateConfiguration:(id)arg1 ;
-(void)paymentWebService:(id)arg1 queueConnectionToTrustedServiceManagerForPushTopic:(id)arg2 withCompletion:(/*^block*/id)arg3 ;
-(void)paymentWebService:(id)arg1 configurationDataWithCompletionHandler:(/*^block*/id)arg2 ;
-(void)paymentWebService:(id)arg1 registrationDataWithCompletionHandler:(/*^block*/id)arg2 ;
-(id)appleAccountInformation;
-(void)paymentWebService:(id)arg1 signData:(id)arg2 signatureEntanglementMode:(unsigned long long)arg3 withCompletionHandler:(/*^block*/id)arg4 ;
-(void)paymentWebService:(id)arg1 provisioningDataWithCompletionHandler:(/*^block*/id)arg2 ;
-(void)paymentWebService:(id)arg1 deleteApplicationWithAID:(id)arg2 ;
-(void)paymentWebService:(id)arg1 didRegisterWithRegionMap:(id)arg2 primaryRegionTopic:(id)arg3 ;
-(id)paymentWebService:(id)arg1 filterVerificationChannels:(id)arg2 ;
-(int)paymentSupportedInCurrentRegionForWebService:(id)arg1 ;
-(int)registrationSupportedInCurrentRegionForWebService:(id)arg1 ;
-(id)deviceDescriptionForPaymentWebService:(id)arg1 ;
-(id)bridgedClientInfo;
-(BOOL)supportsAutomaticPassPresentation;
-(void)paymentWebService:(id)arg1 setNewAuthRandomIfNecessaryReturningPairingState:(/*^block*/id)arg2 ;
-(void)paymentWebService:(id)arg1 setNewAuthRandom:(/*^block*/id)arg2 ;
-(BOOL)paymentWebService:(id)arg1 hasPassesOfType:(unsigned long long)arg2 ;
-(BOOL)paymentWebService:(id)arg1 canProvisionPaymentPassWithPrimaryAccountIdentifier:(id)arg2 ;
-(void)paymentWebService:(id)arg1 validateAddPreconditionsWithCompletion:(/*^block*/id)arg2 ;
-(void)paymentWebService:(id)arg1 addPaymentPass:(id)arg2 withCompletionHandler:(/*^block*/id)arg3 ;
-(void)downloadAllPaymentPassesForPaymentWebService:(id)arg1 ;
-(void)paymentWebService:(id)arg1 validateTransferPreconditionsWithCompletion:(/*^block*/id)arg2 ;
-(void)paymentWebService:(id)arg1 requestPassUpgrade:(id)arg2 pass:(id)arg3 completion:(/*^block*/id)arg4 ;
-(BOOL)claimSecureElementForCurrentUser;
-(unsigned long long)secureElementOwnershipStateForCurrentUser;
-(void)paymentWebService:(id)arg1 registrationDataWithAuthToken:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(id)trustedDeviceEnrollmentInfoForWebService:(id)arg1 ;
-(void)noteForegroundVerificationObserverActive:(BOOL)arg1 ;
-(void)startBackgroundVerificationObserverForPass:(id)arg1 verificationMethod:(id)arg2 ;
-(unsigned long long)maximumPaymentCards;
-(void)setMaximumPaymentCards:(unsigned long long)arg1 ;
-(id)deviceIDSIdentifier;
-(id)paymentWebService:(id)arg1 passesOfType:(unsigned long long)arg2 ;
-(void)paymentWebService:(id)arg1 handlePotentialExpressPass:(id)arg2 withCompletionHandler:(/*^block*/id)arg3 ;
-(void)paymentWebService:(id)arg1 canHandlePotentialExpressPass:(id)arg2 withCompletionHandler:(/*^block*/id)arg3 ;
-(void)removeExpressPassWithUniqueIdentifier:(id)arg1 completion:(/*^block*/id)arg2 ;
-(BOOL)felicaSecureElementIsAvailable;
-(BOOL)supportsExpressForAutomaticSelectionTechnologyType:(long long)arg1 ;
-(BOOL)supportsCredentialType:(long long)arg1 ;
-(BOOL)isGymKitEnabled;
-(void)paymentWebService:(id)arg1 removePass:(id)arg2 withCompletionHandler:(/*^block*/id)arg3 ;
-(BOOL)paymentWebServiceSupportsPeerPaymentRegistration:(id)arg1 ;
-(BOOL)paymentWebServiceSupportsAccounts:(id)arg1 ;
-(id)supportedFeatureIdentifiersWithPaymentWebService:(id)arg1 ;
-(id)supportedFeatureIdentifiersForAccountProvisioningWithPaymentWebService:(id)arg1 ;
-(void)paymentWebService:(id)arg1 deviceMetadataWithFields:(unsigned long long)arg2 completion:(/*^block*/id)arg3 ;
-(void)paymentWebService:(id)arg1 updateAccountWithIdentifier:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)requestPasscodeUpgradeForPasscodeUpgradeFlowController:(id)arg1 withVisibleViewController:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)exitPasscodeUpgradeForPasscodeUpgradeFlowController:(id)arg1 withShouldContinue:(BOOL)arg2 error:(id)arg3 ;
-(void)paymentWebService:(id)arg1 accountAttestationAnonymizationSaltWithCompletion:(/*^block*/id)arg2 ;
-(void)paymentWebService:(id)arg1 setAccountAttestationAnonymizationSalt:(id)arg2 withCompletion:(/*^block*/id)arg3 ;
-(void)paymentWebService:(id)arg1 updateMetadataOnPass:(id)arg2 withCredential:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)paymentWebService:(id)arg1 removeSharingInvitation:(id)arg2 withCompletion:(/*^block*/id)arg3 ;
-(void)paymentWebService:(id)arg1 canAcceptInvitation:(id)arg2 withCompletion:(/*^block*/id)arg3 ;
-(void)paymentWebService:(id)arg1 subcredentialInvitationsWithCompletion:(/*^block*/id)arg2 ;
-(void)paymentWebService:(id)arg1 requestSubcredentialInvitation:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)paymentWebService:(id)arg1 acceptSubcredentialInvitationWithIdentifier:(id)arg2 metadata:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)paymentWebService:(id)arg1 matchingInvitationOnDevice:(id)arg2 withTimeout:(unsigned long long)arg3 completion:(/*^block*/id)arg4 ;
-(id)paymentWebService:(id)arg1 supportedRegionFeatureOfType:(long long)arg2 ;
-(void)paymentWebService:(id)arg1 setDefaultPaymentPassUniqueIdentifier:(id)arg2 ;
-(void)availableProductsWithCompletion:(/*^block*/id)arg1 ;
-(void)performProductActionRequest:(id)arg1 completion:(/*^block*/id)arg2 ;
-(BOOL)willPassWithUniqueIdentifierAutomaticallyBecomeDefault:(id)arg1 ;
-(void)consistencyCheck;
-(void)conflictingExpressPassIdentifiersForPassInformation:(id)arg1 withReferenceExpressState:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)removeExpressPassesWithCardType:(long long)arg1 completion:(/*^block*/id)arg2 ;
-(void)registerCredentialsWithIdentifiers:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)revokeCredentialsWithIdentifiers:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)setBalanceReminder:(id)arg1 forBalance:(id)arg2 pass:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)setCommutePlanReminder:(id)arg1 forCommutePlan:(id)arg2 pass:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)peerPaymentUnregisterWithCompletion:(/*^block*/id)arg1 ;
-(void)commutePlanReminderForCommutePlan:(id)arg1 pass:(id)arg2 withCompletion:(/*^block*/id)arg3 ;
-(void)markAllAppletsForDeletionWithCompletion:(/*^block*/id)arg1 ;
-(void)setResponseQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(NSObject*<OS_dispatch_queue>)responseQueue;
-(NPKCompanionAgentConnection *)companionAgentConnection;
-(void)setNewAuthRandomIfNecessaryAtBeginningOfProvisioningFlow:(/*^block*/id)arg1 ;
-(void)setCompanionAgentConnection:(NPKCompanionAgentConnection *)arg1 ;
-(id)_sendProtobuf:(id)arg1 responseExpected:(BOOL)arg2 extraOptions:(id)arg3 ;
-(void)_trackOutstandingRequestWithMessageIdentifier:(id)arg1 completionHandler:(id)arg2 errorHandler:(/*^block*/id)arg3 ;
-(void)updatePeerPaymentAccountWithCompletion:(/*^block*/id)arg1 ;
-(void)provisionPeerPaymentPassWithCompletion:(/*^block*/id)arg1 ;
-(void)initializeCloudStoreIfNecessaryWithCompletion:(/*^block*/id)arg1 ;
-(void)initializeCloudStoreIfNecessaryWithHandler:(/*^block*/id)arg1 ;
-(void)peerPaymentRegisterWithURL:(id)arg1 forceReRegistration:(BOOL)arg2 completion:(/*^block*/id)arg3 ;
-(id)initWithContext:(unsigned long long)arg1 responseQueue:(id)arg2 ;
-(void)sendWebServiceContextToWatch:(id)arg1 ;
-(void)sendPaymentOptionsDefaultsToWatch;
-(void)queueTSMConnectionResponse:(id)arg1 ;
-(void)provisioningDataResponse:(id)arg1 ;
-(void)registrationDataResponse:(id)arg1 ;
-(void)configurationDataResponse:(id)arg1 ;
-(void)signDataResponse:(id)arg1 ;
-(void)secureElementGetAppletsResponse:(id)arg1 ;
-(void)secureElementRemoveAppletsResponse:(id)arg1 ;
-(void)setNewAuthRandomResponse:(id)arg1 ;
-(void)didRegisterResponse:(id)arg1 ;
-(void)dumpLogsResponse:(id)arg1 ;
-(void)pendingRemovalResponse:(id)arg1 ;
-(void)updatePaymentPass:(id)arg1 ;
-(void)updatePushToken:(id)arg1 ;
-(void)preconditionNotMet:(id)arg1 ;
-(void)handleValueAddedServiceTransactions:(id)arg1 ;
-(void)preferredAIDRequest:(id)arg1 ;
-(void)preferredAIDResponse:(id)arg1 ;
-(void)handleWebServiceContextDidChangeRequest:(id)arg1 ;
-(void)handleWebServiceContextNeededRequest:(id)arg1 ;
-(void)handlePaymentTransactions:(id)arg1 ;
-(void)handleRemovedTransaction:(id)arg1 ;
-(void)setExpressPassResponse:(id)arg1 ;
-(void)removeExpressPassesWithCardTypeResponse:(id)arg1 ;
-(void)removeExpressPassWithUniqueIdentifierResponse:(id)arg1 ;
-(void)conflictingExpressPassIdentifiersForPassInformationResponse:(id)arg1 ;
-(void)setBalanceReminderWithBalanceAndPassResponse:(id)arg1 ;
-(void)setCommutePlanReminderWithCommutePlanAndPassResponse:(id)arg1 ;
-(void)balanceReminderWithBalanceAndPassResponse:(id)arg1 ;
-(void)commutePlanReminderWithCommutePlanAndPassResponse:(id)arg1 ;
-(void)handleUpdatedAppletState:(id)arg1 ;
-(void)getPairingInfoResponse:(id)arg1 ;
-(void)handleShowPaymentSetupRequest:(id)arg1 ;
-(void)enableServiceModeResponse:(id)arg1 ;
-(void)handleTransactionDefaultsNeededRequest:(id)arg1 ;
-(void)handleCompanionMigrationResponse:(id)arg1 ;
-(void)peerPaymentRegisterResponse:(id)arg1 ;
-(void)peerPaymentUnregisterResponse:(id)arg1 ;
-(void)handleUpdatedPeerPaymentWebServiceContext:(id)arg1 ;
-(void)provisionPeerPaymentPassResponse:(id)arg1 ;
-(void)updatePeerPaymentAccountResponse:(id)arg1 ;
-(void)openURLWithRequest:(id)arg1 ;
-(void)handlePeerPaymentTermsAndConditionsAcceptanceRequest:(id)arg1 ;
-(void)deviceMetadataResponse:(id)arg1 ;
-(void)updateAccountWithIdentifierResponse:(id)arg1 ;
-(void)handleDeviceUnlockedForPendingProvisioningRequest:(id)arg1 ;
-(void)performDeviceCheckInResponse:(id)arg1 ;
-(void)availableProductsResponse:(id)arg1 ;
-(void)performProductActionResponse:(id)arg1 ;
-(void)checkTLKsMissingResponse:(id)arg1 ;
-(void)initializeCloudStoreIfNecessaryWithHandlerResponse:(id)arg1 ;
-(void)resetApplePayManateeViewResponse:(id)arg1 ;
-(void)downloadAllPaymentPasses:(id)arg1 ;
-(void)checkCompanionPeerPaymentRegistrationState:(id)arg1 ;
-(void)initializeCloudStoreIfNecessaryResponse:(id)arg1 ;
-(void)cloudStoreStatusResponse:(id)arg1 ;
-(void)markAllAppletsForDeletionResponse:(id)arg1 ;
-(void)handleBalanceChange:(id)arg1 ;
-(void)remotePassUpgradeResponse:(id)arg1 ;
-(void)checkPasscodePolicyComplianceResponse:(id)arg1 ;
-(void)handlePasscodeUpgradeFlowShouldExitRequest:(id)arg1 ;
-(void)applyPasscodeRestrictionsResponse:(id)arg1 ;
-(void)subcredentialInvitationsResponse:(id)arg1 ;
-(void)acceptSubcredentialInvitationResponse:(id)arg1 ;
-(void)matchingCredentialOnDeviceResponse:(id)arg1 ;
-(void)canAcceptInvitationResponse:(id)arg1 ;
-(void)handleAcceptSubcredentialProvisioningRequest:(id)arg1 ;
-(void)fetchOrInitializeAccountAttestationAnonymizationSaltRequest:(id)arg1 ;
-(void)accountAttestationAnonymizationSaltResponse:(id)arg1 ;
-(void)setAccountAttestationAnonymizationSaltResponse:(id)arg1 ;
-(void)requestSubcredentialInvitationResponse:(id)arg1 ;
-(void)updateSubcredentialMetadataResponse:(id)arg1 ;
-(void)registerCredentialsResponse:(id)arg1 ;
-(void)revokeCredentialsResponse:(id)arg1 ;
-(void)removeSharingInvitationResponse:(id)arg1 ;
-(void)handleCredentialsChange:(id)arg1 ;
-(void)setProvisioningService:(IDSService *)arg1 ;
-(void)_acquireAssertionOfType:(unsigned long long)arg1 ;
-(void)_invalidateAssertionOfType:(unsigned long long)arg1 ;
-(NRActiveDeviceAssertion *)provisioningActiveDeviceAssertion;
-(void)setProvisioningActiveDeviceAssertion:(NRActiveDeviceAssertion *)arg1 ;
-(id)_sendProtobuf:(id)arg1 responseExpected:(BOOL)arg2 ;
-(BOOL)_deviceIsDaytonaOrLater;
-(BOOL)_deviceIsFortuneOrLater;
-(void)_getPairingInfoAndSetAuthRandomIfNotPaired:(BOOL)arg1 completion:(/*^block*/id)arg2 ;
-(void)_setNewAuthRandomReturningPairingState:(/*^block*/id)arg1 ;
-(void)_setNewAuthRandomIfNecessaryReturningPairingState:(/*^block*/id)arg1 ;
-(id)_serialNumbersOfAllPairedDevices;
-(void)_paymentWebService:(id)arg1 registrationDataWithAuthToken:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)paymentWebService:(id)arg1 signData:(id)arg2 withCompletionHandler:(/*^block*/id)arg3 ;
-(id)_supportedRegionsForWebService:(id)arg1 ;
-(BOOL)_supportsFeaturesForWebService:(id)arg1 ;
-(void)removeAIDsFromSecureElement:(id)arg1 withCompletion:(/*^block*/id)arg2 ;
-(IDSService *)provisioningService;
-(id)_expressPassesInformationFromDataArray:(id)arg1 ;
-(id)_deviceSupportedFeatureIdentifiers;
-(id)_upgradeExpressAutomaticSelectionCriteriaRequestForPass:(id)arg1 ;
-(id)_expressPassInformationWithPass:(id)arg1 upgradeRequst:(id)arg2 ;
-(BOOL)deviceSupportMultipleExpressPasses;
-(void)_multipleExpressTransitPassPaymentWebService:(id)arg1 handlePotentialExpressPassInformation:(id)arg2 upgradeRequest:(id)arg3 pass:(id)arg4 withCompletionHandler:(/*^block*/id)arg5 ;
-(void)_singleExpressTransitPassPaymentWebService:(id)arg1 handlePotentialExpressPassInformation:(id)arg2 withCompletionHandler:(/*^block*/id)arg3 ;
-(id)_categoryIdentifierForPass:(id)arg1 ;
-(id)_expressModesFromExpressPassesInformation:(id)arg1 ;
-(void)remotePassUpgradeWithRequest:(id)arg1 pass:(id)arg2 requireAuthorization:(BOOL)arg3 notifyUserOnPairedDevice:(BOOL)arg4 updateBlock:(/*^block*/id)arg5 ;
-(void)setExpressWithPassInformation:(id)arg1 requestAuthorization:(BOOL)arg2 completion:(/*^block*/id)arg3 ;
-(id)_upgradeExpressAutomaticSelectionCriteriaRequestForPass:(id)arg1 deviceClass:(id)arg2 OSVersion:(id)arg3 SEID:(id)arg4 ;
-(void)setPasscodeUpgradeFlowController:(id)arg1 ;
-(id<NPKPasscodeChangeCoordinatorProtocol>)passcodeChangeCoordinator;
-(void)setPasscodeChangeCoordinator:(id<NPKPasscodeChangeCoordinatorProtocol>)arg1 ;
-(BOOL)_isSubcredentialProvisioningSupported;
-(BOOL)_deviceIsConnected;
-(NPKSubcredentialInvitationCoordinator *)subcredentialInvitationCoordinator;
-(id)_sendProtobuf:(id)arg1 responseIdentifier:(id)arg2 ;
-(NPKTargetDeviceAssertionManager *)remoteDeviceAssertionManager;
-(id)passcodeUpgradeFlowController;
-(void)paymentWebService:(id)arg1 didRegisterWithRegionMap:(id)arg2 ;
-(void)secureElementCardsWithCompletion:(/*^block*/id)arg1 ;
-(void)dumpLogsWithCompletion:(/*^block*/id)arg1 ;
-(void)handlePendingRemovalOfPassWithUniqueID:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)handlePreferredAID:(id)arg1 forPassWithUniqueID:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)retrieveTransactionsForPassWithUniqueID:(id)arg1 ;
-(void)handleDeletePaymentTransactionWithIdentifier:(id)arg1 passUniqueIdentifier:(id)arg2 ;
-(void)conflictingExpressPassIdentifiersForPassInformation:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)balanceReminderForBalance:(id)arg1 pass:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)cancelOutstandingSetDefaultExpressPassRequestsWithExpressMode:(id)arg1 ;
-(void)enableServiceModeForPassWithUniqueIdentifier:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)cancelOutstandingEnableServiceModeRequests;
-(void)cancelOutstandingRemotePassUpdateRequest:(id)arg1 pass:(id)arg2 ;
-(void)handleCompanionMigrationWithCompletion:(/*^block*/id)arg1 ;
-(void)handleCompanionPeerPaymentRegistration;
-(void)handleCompanioniCloudSignout;
-(BOOL)deviceSupportTransitReminderSetting;
-(id)_statusUpdaterWithResponseClass:(Class)arg1 type:(unsigned short)arg2 responseIdentifier:(id)arg3 ;
-(void)setRemoteDeviceAssertionManager:(NPKTargetDeviceAssertionManager *)arg1 ;
-(void)setSubcredentialInvitationCoordinator:(NPKSubcredentialInvitationCoordinator *)arg1 ;
@end

