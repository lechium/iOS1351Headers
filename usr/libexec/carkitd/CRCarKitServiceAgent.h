//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "CRBluetoothManagerDelegate-Protocol.h"
#import "CRCarKitService-Protocol.h"
#import "CRCarPlayPreferencesDelegate-Protocol.h"
#import "CRVehicleAccessoryManagerDelegate-Protocol.h"
#import "NSXPCListenerDelegate-Protocol.h"
#import "SBSRemoteAlertHandleObserver-Protocol.h"

@class CRBluetoothManager, CRCarKitMonitoringServiceAgent, CRCarPlayPreferences, CRInstrumentClusterURLManager, CRVehicle, CRVehicleAccessory, CRVehicleAccessoryManager, CRVehicleStore, CRWiFiCarManager, CRWirelessSessionAssertionManager, NSMutableArray, NSMutableDictionary, NSNumber, NSString;
@protocol OS_dispatch_queue;

@interface CRCarKitServiceAgent : NSObject <CRVehicleAccessoryManagerDelegate, CRCarPlayPreferencesDelegate, SBSRemoteAlertHandleObserver, CRBluetoothManagerDelegate, NSXPCListenerDelegate, CRCarKitService>
{
    CRCarKitMonitoringServiceAgent *_monitoringService;	// 8 = 0x8
    CRVehicleStore *_vehicleStore;	// 16 = 0x10
    NSObject<OS_dispatch_queue> *_serviceQueue;	// 24 = 0x18
    CRVehicleAccessoryManager *_accessoryManager;	// 32 = 0x20
    CRCarPlayPreferences *_preferencesManager;	// 40 = 0x28
    CRBluetoothManager *_bluetoothManager;	// 48 = 0x30
    CRInstrumentClusterURLManager *_clusterURLManager;	// 56 = 0x38
    CRWiFiCarManager *_wifiManager;	// 64 = 0x40
    CRWirelessSessionAssertionManager *_assertionManager;	// 72 = 0x48
    NSMutableArray *_outstandingApprovalAlerts;	// 80 = 0x50
    NSMutableArray *_outstandingPairingAlerts;	// 88 = 0x58
    NSMutableArray *_outstandingEnableWiFiAlerts;	// 96 = 0x60
    NSMutableArray *_outstandingEnhancedIntegrationAlerts;	// 104 = 0x68
    NSNumber *_cachedCarPlayAllowedChangeValue;	// 112 = 0x70
    NSMutableDictionary *_serviceCountDuringAlertForBluetoothAddress;	// 120 = 0x78
    CRVehicleAccessory *_BTPowerAccessory;	// 128 = 0x80
    CRVehicle *_BTPowerVehicle;	// 136 = 0x88
}

+ (unsigned long long)_declineTypeForOOBPairingVehicleAccessory:(id)arg1;	// IMP=0x000000010001b984
+ (unsigned long long)_pairingDeclineCountForIdentifier:(id)arg1;	// IMP=0x000000010001b84c
+ (id)_pairingIdentifierForVehicleAccessory:(id)arg1;	// IMP=0x000000010001b7f4
- (void).cxx_destruct;	// IMP=0x000000010001e330
@property(retain, nonatomic) CRVehicle *BTPowerVehicle; // @synthesize BTPowerVehicle=_BTPowerVehicle;
@property(retain, nonatomic) CRVehicleAccessory *BTPowerAccessory; // @synthesize BTPowerAccessory=_BTPowerAccessory;
@property(retain, nonatomic) NSMutableDictionary *serviceCountDuringAlertForBluetoothAddress; // @synthesize serviceCountDuringAlertForBluetoothAddress=_serviceCountDuringAlertForBluetoothAddress;
@property(nonatomic) NSNumber *cachedCarPlayAllowedChangeValue; // @synthesize cachedCarPlayAllowedChangeValue=_cachedCarPlayAllowedChangeValue;
@property(retain, nonatomic) NSMutableArray *outstandingEnhancedIntegrationAlerts; // @synthesize outstandingEnhancedIntegrationAlerts=_outstandingEnhancedIntegrationAlerts;
@property(retain, nonatomic) NSMutableArray *outstandingEnableWiFiAlerts; // @synthesize outstandingEnableWiFiAlerts=_outstandingEnableWiFiAlerts;
@property(retain, nonatomic) NSMutableArray *outstandingPairingAlerts; // @synthesize outstandingPairingAlerts=_outstandingPairingAlerts;
@property(retain, nonatomic) NSMutableArray *outstandingApprovalAlerts; // @synthesize outstandingApprovalAlerts=_outstandingApprovalAlerts;
@property(retain, nonatomic) CRWirelessSessionAssertionManager *assertionManager; // @synthesize assertionManager=_assertionManager;
@property(retain, nonatomic) CRWiFiCarManager *wifiManager; // @synthesize wifiManager=_wifiManager;
@property(retain, nonatomic) CRInstrumentClusterURLManager *clusterURLManager; // @synthesize clusterURLManager=_clusterURLManager;
@property(retain, nonatomic) CRBluetoothManager *bluetoothManager; // @synthesize bluetoothManager=_bluetoothManager;
@property(retain, nonatomic) CRCarPlayPreferences *preferencesManager; // @synthesize preferencesManager=_preferencesManager;
@property(retain, nonatomic) CRVehicleAccessoryManager *accessoryManager; // @synthesize accessoryManager=_accessoryManager;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *serviceQueue; // @synthesize serviceQueue=_serviceQueue;
@property(retain, nonatomic) CRVehicleStore *vehicleStore; // @synthesize vehicleStore=_vehicleStore;
@property(nonatomic) __weak CRCarKitMonitoringServiceAgent *monitoringService; // @synthesize monitoringService=_monitoringService;
- (void)bluetoothManager:(id)arg1 didChangePowerState:(_Bool)arg2;	// IMP=0x000000010001e078
- (void)_dismissEnhancedIntegrationAlerts;	// IMP=0x000000010001df5c
- (void)_dismissEnhancedIntegrationAlertForVehicleAccessory:(id)arg1;	// IMP=0x000000010001dddc
- (void)_presentEnhancedIntegrationAlertForVehicleAccessory:(id)arg1;	// IMP=0x000000010001d93c
- (void)_vehicleEnhancedIntegrationUpdated:(id)arg1 status:(unsigned long long)arg2;	// IMP=0x000000010001d740
- (void)vehicleIdentifierForCertificateSerial:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x000000010001d464
- (void)_dismissReconnectionEnableWiFiAlertExceptForVehicle:(id)arg1;	// IMP=0x000000010001d278
- (void)_dismissReconnectionEnableWiFiAlertForVehicle:(id)arg1;	// IMP=0x000000010001d08c
- (id)_presentedReconnectionEnableWiFiAlertForVehicle:(id)arg1;	// IMP=0x000000010001cef8
- (void)_presentReconnectionEnableWiFiAlertForVehicle:(id)arg1;	// IMP=0x000000010001ca54
- (void)_dismissPairingAlerts;	// IMP=0x000000010001c938
- (void)_dismissPairingAlertForVehicleAccessory:(id)arg1;	// IMP=0x000000010001c7b8
- (void)_beginWiredPairingWithVehicleAccessory:(id)arg1 vehicle:(id)arg2;	// IMP=0x000000010001c2a8
- (void)_presentWiredBluetoothPairingAlertForVehicleAccessory:(id)arg1 vehicle:(id)arg2;	// IMP=0x000000010001bac4
- (void)_dismissApprovalAlerts;	// IMP=0x000000010001b6d8
- (void)_dismissApprovalAlertForVehicleAccessory:(id)arg1;	// IMP=0x000000010001b558
- (void)_presentApprovalAlertForVehicleAccessory:(id)arg1;	// IMP=0x000000010001ac64
- (_Bool)sendDeviceIdentifierForVehicleAccesory:(id)arg1 pairingStatus:(unsigned long long)arg2;	// IMP=0x000000010001ab9c
- (_Bool)attemptConnectionWithVehicles:(id)arg1;	// IMP=0x000000010001a6d8
- (_Bool)requestWiFiCredentialsIfNecessaryForVehicleAccessories:(id)arg1;	// IMP=0x000000010001a4c4
- (id)saveVehicle:(id)arg1;	// IMP=0x0000000100019f84
- (id)pairedVehiclesConnectedOnBluetooth;	// IMP=0x0000000100019d3c
- (void)updateVehicle:(id)arg1 usingAccessory:(id)arg2;	// IMP=0x0000000100019af0
- (void)enumerateVehiclesForAccessories:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;	// IMP=0x0000000100019920
- (id)vehicleMatchingAccessory:(id)arg1 inVehicles:(id)arg2;	// IMP=0x000000010001974c
- (void)updateIncompletePairingsMatchingAccessories:(id)arg1;	// IMP=0x00000001000192b8
- (void)handleCarPlayAttachedAccessories:(id)arg1;	// IMP=0x0000000100018ea0
- (void)handleCarPlayAttached;	// IMP=0x0000000100018dac
- (id)_unknownPairingAccessoriesFromAccessories:(id)arg1;	// IMP=0x0000000100018c78
- (id)_certificateSerialNumbersWithKnownPairing;	// IMP=0x0000000100018a84
- (_Bool)_shouldPromptEnhancedIntegrationForVehicle:(id)arg1 accessory:(id)arg2;	// IMP=0x0000000100018720
- (_Bool)_isVehicleActionable:(id)arg1;	// IMP=0x00000001000186f8
- (_Bool)_isRestricted:(id *)arg1;	// IMP=0x000000010001865c
- (_Bool)postOutOfCarNotificationForVehicle:(id)arg1;	// IMP=0x0000000100018500
- (_Bool)postInCarNotificationForVehicle:(id)arg1;	// IMP=0x0000000100018368
- (void)handleVehicleStoreAvailabiltyDidChange:(id)arg1;	// IMP=0x00000001000182ac
- (void)_handleCarPlayAllowedDidChange;	// IMP=0x0000000100017fa4
- (void)handleCarPlayAllowedDidChange;	// IMP=0x0000000100017f3c
- (void)accessoryManager:(id)arg1 didDisconnectVehicleAccessory:(id)arg2;	// IMP=0x0000000100017ec8
- (void)accessoryManager:(id)arg1 didUpdateVehicleAccessory:(id)arg2;	// IMP=0x0000000100017d9c
- (void)accessoryManager:(id)arg1 didConnectVehicleAccessory:(id)arg2;	// IMP=0x0000000100017d44
- (id)accessoryRadarDescription:(id)arg1;	// IMP=0x0000000100017be4
- (void)fetchSessionInstrumentClusterURLsWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0000000100017b50
- (void)fetchInstrumentClusterURLsWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0000000100017abc
- (void)handleCarPlayDiagnosticsWithDeviceScreenshotURL:(id)arg1 carScreenshotURL:(id)arg2 attachmentURLs:(id)arg3 activeBundleIdentifier:(id)arg4 reply:(CDUnknownBlockType)arg5;	// IMP=0x00000001000172a4
- (void)isCarPlayAllowedWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0000000100017224
- (void)handleCarPlayRestrictionChangedWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0000000100017168
- (void)isEnhancedIntegrationEnabledWithCertificateSerial:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0000000100016de4
- (void)isPairedWithCertificateSerial:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0000000100016a60
- (void)allowsConnectionsForCertificateSerial:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00000001000166c8
- (void)allowsConnectionsForWiFiUUID:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0000000100016290
- (void)saveWiFiCredentialsForAccessoryConnectionIdentifier:(unsigned long long)arg1 credentials:(id)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x0000000100015924
- (void)isBluetoothInCarWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0000000100015578
- (void)handleDidDisconnectBluetoothAddress:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0000000100015384
- (void)handleDidConnectBluetoothAddress:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0000000100014cb8
- (void)hasVehiclesWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0000000100014ba4
- (void)fetchAllVehiclesWithReply:(CDUnknownBlockType)arg1;	// IMP=0x00000001000148e8
- (void)removeVehicle:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x000000010001466c
- (void)saveVehicle:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0000000100014440
- (_Bool)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;	// IMP=0x0000000100013f70
- (void)dealloc;	// IMP=0x0000000100013ef8
- (id)init;	// IMP=0x0000000100013aa4

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

