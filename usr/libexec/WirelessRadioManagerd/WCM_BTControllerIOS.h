//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import "WCM_BTController.h"

@class NSObject;
@protocol OS_dispatch_queue, OS_xpc_object;

@interface WCM_BTControllerIOS : WCM_BTController
{
    int mKeepWake;	// 8 = 0x8
    _Bool mWCI2State;	// 12 = 0xc
    int mAntennaConfig;	// 16 = 0x10
    int mDefaultAntenna;	// 20 = 0x14
    double mMWSUlCenterFreq;	// 24 = 0x18
    double mMWSDlCenterFreq;	// 32 = 0x20
    double mMWSUlBandwidth;	// 40 = 0x28
    double mMWSDlBandwidth;	// 48 = 0x30
    NSObject<OS_xpc_object> *mMWSFrameConfig;	// 56 = 0x38
    int mRoleCurrent;	// 64 = 0x40
    int mRoleRequested;	// 68 = 0x44
    _Bool mRSSIOffsetConfigured;	// 72 = 0x48
    _Bool mCurrentMWSEnable;	// 73 = 0x49
    unsigned char mCurrentAFHMap[10];	// 74 = 0x4a
    _Bool mAgcCoexModeEnable;	// 84 = 0x54
    unsigned char mDiversityAFHMapForC0B0[10];	// 85 = 0x55
    unsigned char mDiversityAFHMapForC0B1[10];	// 95 = 0x5f
    unsigned char mDiversityAFHMapForC1B0[10];	// 105 = 0x69
    unsigned char mDiversityAFHMapForC1B1[10];	// 115 = 0x73
    unsigned long long mNumSCODevice;	// 128 = 0x80
    unsigned long long mNumeSCODevice;	// 136 = 0x88
    unsigned long long mNumA2DPDevice;	// 144 = 0x90
    unsigned long long mNumHIDDevice;	// 152 = 0x98
    unsigned long long mNumLEDevice;	// 160 = 0xa0
    unsigned long long mNumLEADevice;	// 168 = 0xa8
    _Bool _mActivePhyValid;	// 176 = 0xb0
    unsigned long long _mClassicRssi;	// 184 = 0xb8
    unsigned long long _mLeRssi;	// 192 = 0xc0
    unsigned long long _mLeSuccessfulTxCount;	// 200 = 0xc8
    unsigned long long _mLeReTxCount;	// 208 = 0xd0
    unsigned long long _mLeSuccessfulRxCount;	// 216 = 0xd8
    unsigned long long _mLeRxErrorCount;	// 224 = 0xe0
    unsigned long long _mLeCoexDenialCount;	// 232 = 0xe8
    unsigned long long _mClassicSuccessfulTxCount;	// 240 = 0xf0
    unsigned long long _mClassicReTxCount;	// 248 = 0xf8
    unsigned long long _mClassicSuccessfulRxCount;	// 256 = 0x100
    unsigned long long _mClassicRxErrorCount;	// 264 = 0x108
    unsigned long long _mClassicCoexDenialCount;	// 272 = 0x110
    unsigned long long _mActivePhy;	// 280 = 0x118
    double _mNonMagnetUtilization;	// 288 = 0x120
    unsigned long long _mMetricsReportReason;	// 296 = 0x128
    unsigned long long _mFlushCount;	// 304 = 0x130
    unsigned long long _mBtPhyRate;	// 312 = 0x138
    double _mMovingAvgRSSI;	// 320 = 0x140
    unsigned long long _mPrevActivePhy;	// 328 = 0x148
    unsigned long long _mMovingAvgSuccessfulTxCount;	// 336 = 0x150
    unsigned long long _mMovingAvgSuccessfulRxCount;	// 344 = 0x158
    unsigned long long _mMovingAvgReTxCount;	// 352 = 0x160
    unsigned long long _mMovingAvgRxErrorCount;	// 360 = 0x168
    unsigned long long _mNumberofSamples;	// 368 = 0x170
    NSObject<OS_dispatch_queue> *_queue;	// 376 = 0x178
}

@property(retain, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(nonatomic) unsigned long long mNumberofSamples; // @synthesize mNumberofSamples=_mNumberofSamples;
@property(nonatomic) unsigned long long mMovingAvgRxErrorCount; // @synthesize mMovingAvgRxErrorCount=_mMovingAvgRxErrorCount;
@property(nonatomic) unsigned long long mMovingAvgReTxCount; // @synthesize mMovingAvgReTxCount=_mMovingAvgReTxCount;
@property(nonatomic) unsigned long long mMovingAvgSuccessfulRxCount; // @synthesize mMovingAvgSuccessfulRxCount=_mMovingAvgSuccessfulRxCount;
@property(nonatomic) unsigned long long mMovingAvgSuccessfulTxCount; // @synthesize mMovingAvgSuccessfulTxCount=_mMovingAvgSuccessfulTxCount;
@property(nonatomic) unsigned long long mPrevActivePhy; // @synthesize mPrevActivePhy=_mPrevActivePhy;
@property(nonatomic) double mMovingAvgRSSI; // @synthesize mMovingAvgRSSI=_mMovingAvgRSSI;
@property(nonatomic) unsigned long long mBtPhyRate; // @synthesize mBtPhyRate=_mBtPhyRate;
@property(nonatomic) unsigned long long mFlushCount; // @synthesize mFlushCount=_mFlushCount;
@property(nonatomic) unsigned long long mMetricsReportReason; // @synthesize mMetricsReportReason=_mMetricsReportReason;
@property(nonatomic) double mNonMagnetUtilization; // @synthesize mNonMagnetUtilization=_mNonMagnetUtilization;
@property(nonatomic) _Bool mActivePhyValid; // @synthesize mActivePhyValid=_mActivePhyValid;
@property(nonatomic) unsigned long long mActivePhy; // @synthesize mActivePhy=_mActivePhy;
@property(nonatomic) unsigned long long mClassicCoexDenialCount; // @synthesize mClassicCoexDenialCount=_mClassicCoexDenialCount;
@property(nonatomic) unsigned long long mClassicRxErrorCount; // @synthesize mClassicRxErrorCount=_mClassicRxErrorCount;
@property(nonatomic) unsigned long long mClassicSuccessfulRxCount; // @synthesize mClassicSuccessfulRxCount=_mClassicSuccessfulRxCount;
@property(nonatomic) unsigned long long mClassicReTxCount; // @synthesize mClassicReTxCount=_mClassicReTxCount;
@property(nonatomic) unsigned long long mClassicSuccessfulTxCount; // @synthesize mClassicSuccessfulTxCount=_mClassicSuccessfulTxCount;
@property(nonatomic) unsigned long long mLeCoexDenialCount; // @synthesize mLeCoexDenialCount=_mLeCoexDenialCount;
@property(nonatomic) unsigned long long mLeRxErrorCount; // @synthesize mLeRxErrorCount=_mLeRxErrorCount;
@property(nonatomic) unsigned long long mLeSuccessfulRxCount; // @synthesize mLeSuccessfulRxCount=_mLeSuccessfulRxCount;
@property(nonatomic) unsigned long long mLeReTxCount; // @synthesize mLeReTxCount=_mLeReTxCount;
@property(nonatomic) unsigned long long mLeSuccessfulTxCount; // @synthesize mLeSuccessfulTxCount=_mLeSuccessfulTxCount;
@property(nonatomic) unsigned long long mLeRssi; // @synthesize mLeRssi=_mLeRssi;
@property(nonatomic) unsigned long long mClassicRssi; // @synthesize mClassicRssi=_mClassicRssi;
- (_Bool)isBTMetricsValid;	// IMP=0x0000000100063e18
- (double)getBtRxPer;	// IMP=0x0000000100063d84
- (double)getBtTxPer;	// IMP=0x0000000100063cf0
- (unsigned long long)getBtActivePhy;	// IMP=0x0000000100063cb8
- (unsigned long long)getBtMaxPhyRate;	// IMP=0x0000000100063c80
- (unsigned long long)getMovingAvgBTRssi;	// IMP=0x0000000100063c44
- (id)createChannelParameters:(id)arg1;	// IMP=0x000000010006394c
- (id)createBTHCIExternalFrameConfigParams:(id)arg1;	// IMP=0x00000001000632a8
- (void)printAFHMap:(char *)arg1;	// IMP=0x0000000100063118
- (void)removeBTConnection:(id)arg1;	// IMP=0x0000000100062d78
- (void)addBTConnection:(id)arg1;	// IMP=0x00000001000629ac
- (void)printBTConnInfo;	// IMP=0x0000000100062778
- (void)handleAntennaSwitchNotification:(id)arg1;	// IMP=0x00000001000626a4
- (void)handleAntennaPreferenceBResponse:(id)arg1;	// IMP=0x000000010006258c
- (void)handleRawRSSI:(id)arg1;	// IMP=0x0000000100062364
- (void)handelAFHMap:(id)arg1;	// IMP=0x00000001000620b8
- (void)handleLocalDeviceState:(id)arg1;	// IMP=0x0000000100061f4c
- (void)handleBTPhyRpt:(id)arg1;	// IMP=0x0000000100061d5c
- (void)handleBTMetricsRpt:(id)arg1;	// IMP=0x0000000100060ca0
- (void)resetBtMetrics;	// IMP=0x000000010006094c
- (void)handleLTELinkQuality:(id)arg1;	// IMP=0x0000000100060104
- (void)handleLinkQaulity:(id)arg1;	// IMP=0x00000001000600b4
- (void)handleScanStop:(id)arg1;	// IMP=0x0000000100060064
- (void)handleScanStart:(id)arg1;	// IMP=0x0000000100060014
- (void)handleAudioConfig:(id)arg1;	// IMP=0x000000010005f9dc
- (void)handleConnectionConfig:(id)arg1;	// IMP=0x000000010005f7fc
- (unsigned long long)getNumberOfLEADevice;	// IMP=0x000000010005f7d0
- (unsigned long long)getNumberOfLEDevice;	// IMP=0x000000010005f7a4
- (unsigned long long)getNumberOfHIDDevice;	// IMP=0x000000010005f778
- (unsigned long long)getNumberOfA2DPDevice;	// IMP=0x000000010005f74c
- (unsigned long long)getNumberOfeSCODevice;	// IMP=0x000000010005f720
- (unsigned long long)getNumberOfSCODevice;	// IMP=0x000000010005f6f4
- (void)updateCarplayBTScanParams:(_Bool)arg1 reason:(int)arg2;	// IMP=0x000000010005f4e8
- (void)updateCoexRxGainMode:(id)arg1;	// IMP=0x000000010005f338
- (void)updateMWSScanFrequencyTable:(id)arg1;	// IMP=0x000000010005f004
- (void)updateAntennaRSSIOffset;	// IMP=0x000000010005edf0
- (void)updateDefaultBTAntenna:(int)arg1;	// IMP=0x000000010005ec28
- (void)updateAntennaSelectionPolicy:(int)arg1 param1:(int)arg2 param2:(int)arg3;	// IMP=0x000000010005e9cc
- (void)getCurrentAntennaSetting;	// IMP=0x000000010005e94c
- (void)updatePreferredRole:(int)arg1;	// IMP=0x000000010005e6dc
- (void)updateDiversityAFHMapForC0B0:(id)arg1 C0B1:(id)arg2 C1B0:(id)arg3 C1B1:(id)arg4;	// IMP=0x000000010005e2e8
- (void)updatePreferredAFHMap:(id)arg1;	// IMP=0x000000010005e10c
- (void)updateMWSFrameConfig:(id)arg1;	// IMP=0x000000010005df94
- (void)updateMWSChannelParameters:(id)arg1;	// IMP=0x000000010005dc30
- (void)updateAwakeMode:(_Bool)arg1;	// IMP=0x000000010005db04
- (void)updateMWSSignalingConfig;	// IMP=0x000000010005d7ac
- (void)updateWCI2Mode:(_Bool)arg1;	// IMP=0x000000010005d5d4
- (int)getBTRole;	// IMP=0x000000010005d370
- (int)getBTState;	// IMP=0x000000010005d2e8
- (void)handleMessage:(id)arg1;	// IMP=0x000000010005d068
- (void)handlePowerState:(_Bool)arg1;	// IMP=0x000000010005cc28
- (void)dealloc;	// IMP=0x000000010005cb4c
- (id)init;	// IMP=0x000000010005c46c

@end

