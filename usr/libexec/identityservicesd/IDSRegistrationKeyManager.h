//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "IDSClientDataRegistrationKeyManager-Protocol.h"
#import "IMSystemMonitorListener-Protocol.h"

@class IDSKeychainWrapper, IDSNGMKeyLoadingErrorContainer, IDSRateLimiter, IDSRegistrationKeyConfig, IDSRegistrationKeyManagerIdentityDataSource, IMSystemMonitor, IMTimer, NSRecursiveLock;
@protocol IDSRegistrationKeyManagerKeyPairProvider;

@interface IDSRegistrationKeyManager : NSObject <IDSClientDataRegistrationKeyManager, IMSystemMonitorListener>
{
    NSRecursiveLock *_lock;	// 8 = 0x8
    _Bool _forceRoll;	// 16 = 0x10
    _Bool _loaded;	// 17 = 0x11
    _Bool _identityLoaded;	// 18 = 0x12
    _Bool _detectedMigrationNeeded;	// 19 = 0x13
    _Bool _needsReRegister;	// 20 = 0x14
    _Bool _pendingIdentityRegeneration;	// 21 = 0x15
    _Bool _hasCheckedMigrationThisLaunch;	// 22 = 0x16
    _Bool _failedToGeneratedPublicDataForNGMIdentity;	// 23 = 0x17
    IDSNGMKeyLoadingErrorContainer *_recentKeyLoadingErrors;	// 24 = 0x18
    IDSRegistrationKeyConfig *_config;	// 32 = 0x20
    IMTimer *_purgePreviousIdentityTimer;	// 40 = 0x28
    IMTimer *_regenerateIdentityTimer;	// 48 = 0x30
    IMSystemMonitor *_systemMonitor;	// 56 = 0x38
    IDSKeychainWrapper *_keychainWrapper;	// 64 = 0x40
    IDSRegistrationKeyManagerIdentityDataSource *_identityDataSource;	// 72 = 0x48
    IDSRateLimiter *_loadingRateLimiter;	// 80 = 0x50
    id <IDSRegistrationKeyManagerKeyPairProvider> _keyPairProvider;	// 88 = 0x58
    _Bool _allowPairingIdentities;	// 96 = 0x60
    _Bool _allowRegenerateRegisteredIdentity;	// 97 = 0x61
}

+ (_Bool)setupKeys;	// IMP=0x000000010002c730
+ (id)sharedInstance;	// IMP=0x000000010002c568
- (void).cxx_destruct;	// IMP=0x0000000100043b24
@property(retain, nonatomic) id <IDSRegistrationKeyManagerKeyPairProvider> keyPairProvider; // @synthesize keyPairProvider=_keyPairProvider;
@property(nonatomic) _Bool forceRoll; // @synthesize forceRoll=_forceRoll;
@property(retain, nonatomic) IDSRegistrationKeyConfig *config; // @synthesize config=_config;
@property(nonatomic) _Bool allowRegenerateRegisteredIdentity; // @synthesize allowRegenerateRegisteredIdentity=_allowRegenerateRegisteredIdentity;
@property(nonatomic) _Bool allowPairingIdentities; // @synthesize allowPairingIdentities=_allowPairingIdentities;
@property(retain, nonatomic) IDSRegistrationKeyManagerIdentityDataSource *identityDataSource; // @synthesize identityDataSource=_identityDataSource;
@property(retain, nonatomic) IDSRateLimiter *loadingRateLimiter; // @synthesize loadingRateLimiter=_loadingRateLimiter;
@property(retain, nonatomic) IDSKeychainWrapper *keychainWrapper; // @synthesize keychainWrapper=_keychainWrapper;
@property(retain, nonatomic) IMSystemMonitor *systemMonitor; // @synthesize systemMonitor=_systemMonitor;
- (id)errorContainerToReport;	// IMP=0x0000000100043848
- (double)_identityRegenerationDelay;	// IMP=0x0000000100043614
- (double)_purgePreviousIdentityDelay;	// IMP=0x0000000100043434
- (double)_notifyRegenerateDelay;	// IMP=0x0000000100043418
- (void)_regenerateIdentityTimerFired;	// IMP=0x000000010004318c
- (void)_scheduleRegenerationOfRegisteredIdentityAfterDelay:(double)arg1;	// IMP=0x0000000100042ea4
- (void)_purgePreviousIdentityTimerFired;	// IMP=0x0000000100042cd0
- (void)_schedulePurgeOfPreviousIdentityAfterDelay:(double)arg1;	// IMP=0x00000001000429e8
- (double)_randomizedIdentityRegenerationInterval;	// IMP=0x0000000100042888
- (_Bool)_shouldRegenerateRegisteredIdentity;	// IMP=0x00000001000426d0
- (void)regenerateRegisteredIdentity;	// IMP=0x0000000100042410
- (_Bool)_migrateIdentity:(id)arg1 toProtectionClass:(long long)arg2;	// IMP=0x0000000100042174
- (_Bool)migrateToSecureStorageForClassC;	// IMP=0x0000000100042058
- (_Bool)migrateToSecureStorageForClassA;	// IMP=0x0000000100041f38
- (_Bool)_isSecurelyStoringIdentity:(id)arg1 withExpectedProtectionClass:(long long)arg2;	// IMP=0x0000000100041c6c
- (_Bool)isUsingSecureStorageForClassC;	// IMP=0x0000000100041b50
- (_Bool)isUsingSecureStorageForClassA;	// IMP=0x0000000100041a30
- (_Bool)requiresKeychainMigration;	// IMP=0x0000000100041a10
- (_Bool)isMigratedKeyPairSignature;	// IMP=0x000000010004197c
- (_Bool)needsPublicDataUpdated;	// IMP=0x0000000100040860
- (id)keyPairSignature;	// IMP=0x00000001000407e8
- (struct __SecKey *)identityPublicKey;	// IMP=0x0000000100040758
- (struct __SecKey *)identityPrivateKey;	// IMP=0x00000001000406c8
- (void)regeneratePairingIdentitiesIncludingClassD:(_Bool)arg1;	// IMP=0x000000010003fbd0
- (void)loadPairingIdentities:(_Bool)arg1;	// IMP=0x000000010003eb34
- (void)_purgePreviousIdentityFromMemoryAndKeychain;	// IMP=0x000000010003e2b8
- (void)purgeMessageProtectionIdentity;	// IMP=0x000000010003dacc
- (void)notePublicIdentityDidRegisterLegacyData:(id)arg1 ngmIdentityData:(id)arg2 ngmPrekeyData:(id)arg3;	// IMP=0x000000010003b61c
- (id)accountSigningKeyReference;	// IMP=0x000000010003b544
- (id)fullMessageProtectionIdentityForDataProtectionClass:(unsigned int)arg1;	// IMP=0x000000010003b480
- (id)previousFullMessageProtectionIdentity;	// IMP=0x000000010003b388
- (id)fullMessageProtectionIdentity;	// IMP=0x000000010003b290
- (void)_notifyUnregisteredIdentityRegenerated;	// IMP=0x000000010003ae04
- (_Bool)_migrateRegisteredIdentityFromClassDtoClassCIfNeeded;	// IMP=0x000000010003aa50
- (_Bool)_generateUnregisteredIdentityWithExistingLegacyIdentity:(id)arg1 existingNGMIdentity:(id)arg2;	// IMP=0x0000000100039c14
- (void)_ensureIdentity:(id *)arg1 savedIndentity:(id *)arg2 protectionClass:(long long)arg3 didSaveIdentity:(_Bool *)arg4;	// IMP=0x0000000100039b28
- (id)publicMessageProtectionData;	// IMP=0x0000000100039a5c
- (id)publicMessageProtectionDataToRegisterForClassD;	// IMP=0x0000000100039990
- (id)publicMessageProtectionDataToRegisterForClassC;	// IMP=0x00000001000398c4
- (id)publicMessageProtectionDataToRegisterForClassA;	// IMP=0x00000001000397f8
- (id)latestMessageProtectionFullIdentityForDataProtectionClass:(unsigned int)arg1;	// IMP=0x00000001000393e0
- (struct _SecMPFullIdentity *)copyPreviousMessageProtectionIdentity;	// IMP=0x00000001000391f0
- (struct _SecMPFullIdentity *)latestCopyMessageProtectionIdentityForDataProtectionClass:(unsigned int)arg1;	// IMP=0x0000000100039050
- (struct _SecMPFullIdentity *)copyMessageProtectionIdentity;	// IMP=0x0000000100038e50
- (id)_getPublicMessageProtectionDataForIdentity:(id)arg1;	// IMP=0x00000001000389a8
- (id)_generateIdentityWithExistingIdentity:(id)arg1 identifier:(long long)arg2 dataProtectionClass:(long long)arg3;	// IMP=0x00000001000385dc
- (id)publicMessageProtectionDeviceIdentityContainerToRegister:(id *)arg1;	// IMP=0x0000000100037e80
- (id)keyTransparencyVersionNumberToRegisterForServiceType:(id)arg1;	// IMP=0x0000000100037e08
- (id)publicMessageProtectionIdentityDataToRegisterWithError:(id *)arg1;	// IMP=0x00000001000368e8
- (id)previousFullDeviceIdentityContainer;	// IMP=0x00000001000366c8
- (id)fullDeviceIdentityContainerUsableForKeyType:(unsigned long long)arg1;	// IMP=0x0000000100036128
- (id)fullDeviceIdentityContainer;	// IMP=0x00000001000360e8
- (id)generateCSRForUserID:(id)arg1;	// IMP=0x0000000100035ac4
- (void)dealloc;	// IMP=0x0000000100035850
- (id)init;	// IMP=0x0000000100035638
- (id)initWithSystemMonitor:(id)arg1 keychainWrapper:(id)arg2 loadingRateLimiter:(id)arg3 identityDataSource:(id)arg4 allowPairingIdentities:(_Bool)arg5 allowRegenerateRegisteredIdentity:(_Bool)arg6 keyPairProvider:(id)arg7;	// IMP=0x0000000100034f70
- (void)_loadIfNeeded:(_Bool)arg1;	// IMP=0x000000010002fc20
- (_Bool)_loadClassDIdentityIfNeeded:(id *)arg1;	// IMP=0x000000010002f730
- (_Bool)_loadClassCIdentityIfNeeded:(id *)arg1;	// IMP=0x000000010002f240
- (_Bool)_loadClassAIdentityIfNeeded:(id *)arg1;	// IMP=0x000000010002ecf8
- (id)_loadAndDeserializeBuildOfIdentityGenerationForItemName:(id)arg1;	// IMP=0x000000010002e9a4
- (void)_serializeAndPersistBuildOfIdentityGeneration:(id)arg1 itemName:(id)arg2;	// IMP=0x000000010002e518
- (_Bool)_serializeAndPersistIdentityContainer:(id)arg1 identityIdentifier:(long long)arg2 deleteIfNull:(_Bool)arg3;	// IMP=0x000000010002db68
- (_Bool)_save;	// IMP=0x000000010002d1f0
- (void)_saveClassXIdentity:(id *)arg1 savedIdentity:(id *)arg2 protectionClass:(long long)arg3 savedUnsavedIdentity:(_Bool *)arg4;	// IMP=0x000000010002ca30
- (void)systemDidLeaveDataProtectionLock;	// IMP=0x000000010002c968
- (void)systemDidLeaveFirstDataProtectionLock;	// IMP=0x000000010002c874
- (_Bool)_isUnderFirstDataProtectionLock;	// IMP=0x000000010002c800

@end

