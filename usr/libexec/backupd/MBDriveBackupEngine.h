//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <MobileBackup/MBEngine.h>

#import "MBFileHandleFactory-Protocol.h"
#import "MBFileScannerDelegate-Protocol.h"

@class MBAggregateDictionary, MBBackupHelper, MBBackupOperationJournal, MBDrive, MBDriveScript, MBDriveSettingsContext, MBFileScanner, MBManifestDB, MBProgress, MBStatus, NSMutableDictionary, NSMutableSet, NSSet, NSString;

@interface MBDriveBackupEngine : MBEngine <MBFileScannerDelegate, MBFileHandleFactory>
{
    MBProgress *_progress;	// 56 = 0x38
    MBDriveScript *_driveScript;	// 64 = 0x40
    MBDrive *_drive;	// 72 = 0x48
    MBBackupHelper *_backupHelper;	// 80 = 0x50
    NSString *_uuid;	// 88 = 0x58
    MBStatus *_status;	// 96 = 0x60
    MBManifestDB *_backupManifestDB;	// 104 = 0x68
    MBManifestDB *_snapshotManifestDB;	// 112 = 0x70
    NSMutableSet *_domainsToScan;	// 120 = 0x78
    long long _maximumModificationTime;	// 128 = 0x80
    MBBackupOperationJournal *_operationJournal;	// 136 = 0x88
    NSMutableSet *_modifiedDomains;	// 144 = 0x90
    NSMutableDictionary *_uploadOperationsByPath;	// 152 = 0x98
    unsigned long long _retryCount;	// 160 = 0xa0
    _Bool _fullBackup;	// 168 = 0xa8
    _Atomic _Bool _canceled;	// 169 = 0xa9
    _Bool _movedOldBackup;	// 170 = 0xaa
    int _engineType;	// 172 = 0xac
    double _startTime;	// 176 = 0xb0
    unsigned long long _batchSize;	// 184 = 0xb8
    unsigned long long _concurrentUploadBatchCount;	// 192 = 0xc0
    MBAggregateDictionary *_aggregateDictionary;	// 200 = 0xc8
    unsigned long long _uploadSize;	// 208 = 0xd0
    unsigned long long _uploadFileCount;	// 216 = 0xd8
    NSString *_password;	// 224 = 0xe0
    NSString *_movedBackupName;	// 232 = 0xe8
    NSSet *_prefixDirectories;	// 240 = 0xf0
    MBFileScanner *_scanner;	// 248 = 0xf8
}

+ (id)backupEngineWithSettingsContext:(id)arg1 debugContext:(id)arg2;	// IMP=0x00000001001991c8
@property(retain) MBFileScanner *scanner; // @synthesize scanner=_scanner;
@property(retain, nonatomic) NSSet *prefixDirectories; // @synthesize prefixDirectories=_prefixDirectories;
@property(retain, nonatomic) NSString *movedBackupName; // @synthesize movedBackupName=_movedBackupName;
@property(nonatomic) _Bool movedOldBackup; // @synthesize movedOldBackup=_movedOldBackup;
@property(retain, nonatomic) NSString *password; // @synthesize password=_password;
@property(nonatomic) unsigned long long uploadFileCount; // @synthesize uploadFileCount=_uploadFileCount;
@property(nonatomic) unsigned long long uploadSize; // @synthesize uploadSize=_uploadSize;
@property(readonly, nonatomic) MBAggregateDictionary *aggregateDictionary; // @synthesize aggregateDictionary=_aggregateDictionary;
@property(readonly, nonatomic) MBManifestDB *snapshotManifestDB; // @synthesize snapshotManifestDB=_snapshotManifestDB;
@property(readonly, nonatomic) MBManifestDB *backupManifestDB; // @synthesize backupManifestDB=_backupManifestDB;
@property(nonatomic) unsigned long long concurrentUploadBatchCount; // @synthesize concurrentUploadBatchCount=_concurrentUploadBatchCount;
@property(nonatomic) unsigned long long batchSize; // @synthesize batchSize=_batchSize;
@property(nonatomic) double startTime; // @synthesize startTime=_startTime;
@property(nonatomic) int engineType; // @synthesize engineType=_engineType;
@property(readonly, nonatomic) long long maximumModificationTime; // @synthesize maximumModificationTime=_maximumModificationTime;
@property(readonly, nonatomic) unsigned long long retryCount; // @synthesize retryCount=_retryCount;
@property(readonly, nonatomic) MBProgress *progress; // @synthesize progress=_progress;
- (void)cancel;	// IMP=0x00000001001a8a6c
- (id)_addBackupPathsNotInManifestDB:(id)arg1 operationType:(int)arg2;	// IMP=0x00000001001a8680
- (_Bool)_isModifiedWithFileDescriptor:(int)arg1 reason:(id *)arg2;	// IMP=0x00000001001a857c
- (_Bool)isModifiedWithStat:(struct stat *)arg1 reason:(id *)arg2;	// IMP=0x00000001001a8518
- (_Bool)_uploadStatusToDriveWithSnapshotState:(int)arg1 error:(id *)arg2;	// IMP=0x00000001001a8278
- (id)fileHandleWithPath:(id)arg1 flags:(int)arg2 mode:(unsigned short)arg3 error:(id *)arg4;	// IMP=0x00000001001a7c58
- (id)_fileHandleWithPath:(id)arg1 flags:(int)arg2 mode:(unsigned short)arg3 error:(id *)arg4;	// IMP=0x00000001001a7b9c
- (id)_deviceSnapshotManifestDatabasePath;	// IMP=0x00000001001a7b70
- (id)_deviceSnapshotPropertiesPath;	// IMP=0x00000001001a7b44
- (id)_deviceSnapshotDir;	// IMP=0x00000001001a7a7c
- (id)properties;	// IMP=0x00000001001a7a64
- (int)engineMode;	// IMP=0x00000001001a7a5c
- (id)_retry;	// IMP=0x00000001001a7080
@property(readonly, nonatomic, getter=isFinalRetry) _Bool finalRetry;
- (_Bool)_shouldRetry;	// IMP=0x00000001001a701c
- (id)_verifyBackupReloadingManifest:(_Bool)arg1;	// IMP=0x00000001001a69ec
- (id)_removeOldBackup;	// IMP=0x00000001001a68a4
- (id)_removeDeviceSnapshot;	// IMP=0x00000001001a6768
- (id)_removeBatchWithPaths:(id)arg1;	// IMP=0x00000001001a6488
- (id)_removeInBatchesWithOperationType:(int)arg1;	// IMP=0x00000001001a6130
- (id)_removeWithOperationType:(int)arg1;	// IMP=0x00000001001a5bb0
- (id)_moveBatchWithPaths:(id)arg1;	// IMP=0x00000001001a58dc
- (id)_moveInBatchesWithOperationType:(int)arg1;	// IMP=0x00000001001a551c
- (id)_moveWithOperationType:(int)arg1;	// IMP=0x00000001001a4f14
- (void)_uploadBatch:(id)arg1 options:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00000001001a4724
- (id)_uploadInBatches;	// IMP=0x00000001001a3400
- (id)_upload;	// IMP=0x00000001001a2b18
- (id)_prepareSnapshot;	// IMP=0x00000001001a24bc
- (id)_prepareMoveBackup;	// IMP=0x00000001001a2268
- (id)_prepareResume;	// IMP=0x00000001001a21ac
- (id)_prepareFreeSpace;	// IMP=0x00000001001a1e54
- (id)_prepareProgress;	// IMP=0x00000001001a1684
- (id)_prepareForUpload;	// IMP=0x00000001001a1460
- (id)_prepareForPreflight;	// IMP=0x00000001001a127c
- (id)_scanFinished;	// IMP=0x00000001001a0ebc
- (id)_backUpiCloudDrive;	// IMP=0x00000001001a0aac
- (id)_findPathsRemovedFromBackup;	// IMP=0x00000001001a06cc
- (id)_addMetadataToFile:(id)arg1;	// IMP=0x00000001001a0084
- (void)_addFileToLeaveAlone:(id)arg1 flags:(unsigned long long)arg2;	// IMP=0x00000001001a006c
- (void)_addFileToMove:(id)arg1;	// IMP=0x000000010019ff9c
- (void)_addFileToUploadAndMove:(id)arg1 flags:(unsigned long long)arg2;	// IMP=0x000000010019fe14
- (_Bool)fileScanner:(id)arg1 shouldExcludeFile:(id)arg2;	// IMP=0x000000010019fca4
- (id)fileScanner:(id)arg1 didFindFile:(id)arg2;	// IMP=0x000000010019f394
- (_Bool)fileScanner:(id)arg1 isFileAddedOrModified:(id)arg2;	// IMP=0x000000010019f2a0
- (id)_scanAllDomains;	// IMP=0x000000010019f0e8
- (id)_setupEncryption;	// IMP=0x000000010019e8e8
- (id)_setupManifestDB;	// IMP=0x000000010019e558
- (id)_setupSnapshotDirectory;	// IMP=0x000000010019e450
- (id)_setupOperationJournal;	// IMP=0x000000010019e22c
- (void)_removeFilesystemSnapshot;	// IMP=0x000000010019dfe8
- (id)_snapshotFilesystem;	// IMP=0x000000010019db84
- (void)_recordCurrentTime;	// IMP=0x000000010019d90c
- (id)_scan;	// IMP=0x000000010019d614
- (id)_resumeAfterSuccess;	// IMP=0x000000010019d5c4
- (id)_resumeAfterFailureRemoving;	// IMP=0x000000010019d53c
- (id)_resumeAfterFailureMoving;	// IMP=0x000000010019d188
- (id)_resumeAfterFailureUploading;	// IMP=0x000000010019c208
- (id)_openBackupManifestForResume;	// IMP=0x000000010019bfe0
- (id)_resume;	// IMP=0x000000010019b4d8
- (id)_postconditions;	// IMP=0x000000010019b4ac
- (id)_preconditions;	// IMP=0x000000010019b120
- (void)fileModifiedWhileUploadingFile:(id)arg1 reason:(id)arg2;	// IMP=0x000000010019af40
- (id)_cleanupDeviceSnapshotDir;	// IMP=0x000000010019adb8
- (id)_cleanup;	// IMP=0x000000010019ad1c
- (id)endWithError:(id)arg1;	// IMP=0x000000010019ab58
- (id)_setup;	// IMP=0x000000010019a0fc
- (id)_backupAfterPreflight;	// IMP=0x0000000100199f4c
- (id)_preflight;	// IMP=0x0000000100199df4
- (id)backup;	// IMP=0x0000000100199d9c
- (id)cleanup;	// IMP=0x0000000100199c84
- (id)backupAfterPreflight;	// IMP=0x0000000100199a64
- (id)preflight;	// IMP=0x00000001001996c0
- (_Bool)shouldCommitIfPossible;	// IMP=0x00000001001995d8
@property(readonly, nonatomic) MBDriveSettingsContext *settingsContext;
- (void)dealloc;	// IMP=0x0000000100199474
- (id)initWithSettingsContext:(id)arg1 debugContext:(id)arg2;	// IMP=0x0000000100199208

@end

