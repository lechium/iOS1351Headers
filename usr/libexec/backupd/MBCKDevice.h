//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import "MBCKModel.h"

@class CKReference, MBCKKeyBagManager, MBCKSnapshot, NSArray, NSData, NSMutableSet, NSString;

@interface MBCKDevice : MBCKModel
{
    NSString *_deviceName;	// 8 = 0x8
    long long _requiresFullBackup;	// 16 = 0x10
    _Bool _backupEnabled;	// 24 = 0x18
    _Bool _hasCachedDeviceName;	// 25 = 0x19
    _Bool _hasFetchedSnapshots;	// 26 = 0x1a
    _Bool _hasFetchedKeybags;	// 27 = 0x1b
    _Bool _resumingSnapshot;	// 28 = 0x1c
    _Bool _hasBackupEnabledState;	// 29 = 0x1d
    NSArray *_snapshotRefs;	// 32 = 0x20
    NSArray *_snapshotCommitDates;	// 40 = 0x28
    NSArray *_snapshots;	// 48 = 0x30
    MBCKSnapshot *_pendingSnapshot;	// 56 = 0x38
    NSString *_pendingSnapshotID;	// 64 = 0x40
    unsigned long long _pendingSnapshotQuotaReserved;	// 72 = 0x48
    long long _pendingSnapshotBackupType;	// 80 = 0x50
    MBCKKeyBagManager *_keybagManager;	// 88 = 0x58
    NSString *_deviceUUID;	// 96 = 0x60
    NSString *_deviceClass;	// 104 = 0x68
    NSString *_deviceColor;	// 112 = 0x70
    NSString *_deviceEnclosureColor;	// 120 = 0x78
    NSString *_deviceCoverGlassColor;	// 128 = 0x80
    NSString *_deviceHousingColor;	// 136 = 0x88
    NSString *_deviceBackingColor;	// 144 = 0x90
    NSString *_hardwareModel;	// 152 = 0x98
    NSString *_marketingName;	// 160 = 0xa0
    NSString *_productType;	// 168 = 0xa8
    NSString *_serialNumber;	// 176 = 0xb0
    NSData *_hmacKey;	// 184 = 0xb8
    long long _backupReason;	// 192 = 0xc0
    NSMutableSet *_pinnedSnapshotRefs;	// 200 = 0xc8
    CKReference *_latestGMSnapshot;	// 208 = 0xd0
}

+ (_Bool)supportsSecureCoding;	// IMP=0x000000010009375c
+ (void)fetchSnapshotsWithRefs:(id)arg1 operationTracker:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000010008f830
- (void).cxx_destruct;	// IMP=0x000000010009463c
@property(retain, nonatomic) CKReference *latestGMSnapshot; // @synthesize latestGMSnapshot=_latestGMSnapshot;
@property(retain, nonatomic) NSMutableSet *pinnedSnapshotRefs; // @synthesize pinnedSnapshotRefs=_pinnedSnapshotRefs;
@property(nonatomic) long long backupReason; // @synthesize backupReason=_backupReason;
@property(readonly, nonatomic) _Bool hasBackupEnabledState; // @synthesize hasBackupEnabledState=_hasBackupEnabledState;
@property(nonatomic) _Bool resumingSnapshot; // @synthesize resumingSnapshot=_resumingSnapshot;
@property(readonly) _Bool hasFetchedKeybags; // @synthesize hasFetchedKeybags=_hasFetchedKeybags;
@property(readonly) _Bool hasFetchedSnapshots; // @synthesize hasFetchedSnapshots=_hasFetchedSnapshots;
@property(copy) NSData *hmacKey; // @synthesize hmacKey=_hmacKey;
@property(readonly) NSString *serialNumber; // @synthesize serialNumber=_serialNumber;
@property(readonly) NSString *productType; // @synthesize productType=_productType;
@property(readonly) NSString *marketingName; // @synthesize marketingName=_marketingName;
@property(readonly) NSString *hardwareModel; // @synthesize hardwareModel=_hardwareModel;
@property(readonly) NSString *deviceBackingColor; // @synthesize deviceBackingColor=_deviceBackingColor;
@property(readonly) NSString *deviceHousingColor; // @synthesize deviceHousingColor=_deviceHousingColor;
@property(readonly) NSString *deviceCoverGlassColor; // @synthesize deviceCoverGlassColor=_deviceCoverGlassColor;
@property(readonly) NSString *deviceEnclosureColor; // @synthesize deviceEnclosureColor=_deviceEnclosureColor;
@property(readonly) NSString *deviceColor; // @synthesize deviceColor=_deviceColor;
@property(readonly) NSString *deviceClass; // @synthesize deviceClass=_deviceClass;
@property(readonly) NSString *deviceUUID; // @synthesize deviceUUID=_deviceUUID;
@property(retain, nonatomic) MBCKKeyBagManager *keybagManager; // @synthesize keybagManager=_keybagManager;
@property(nonatomic) long long pendingSnapshotBackupType; // @synthesize pendingSnapshotBackupType=_pendingSnapshotBackupType;
@property(nonatomic) unsigned long long pendingSnapshotQuotaReserved; // @synthesize pendingSnapshotQuotaReserved=_pendingSnapshotQuotaReserved;
@property(readonly) NSString *pendingSnapshotID; // @synthesize pendingSnapshotID=_pendingSnapshotID;
@property(retain, nonatomic) MBCKSnapshot *pendingSnapshot; // @synthesize pendingSnapshot=_pendingSnapshot;
@property(readonly) NSArray *snapshots; // @synthesize snapshots=_snapshots;
@property(retain, nonatomic) NSArray *snapshotCommitDates; // @synthesize snapshotCommitDates=_snapshotCommitDates;
@property(retain, nonatomic) NSArray *snapshotRefs; // @synthesize snapshotRefs=_snapshotRefs;
- (id)initWithCoder:(id)arg1;	// IMP=0x0000000100093b84
- (void)encodeWithCoder:(id)arg1;	// IMP=0x0000000100093764
- (_Bool)shouldRetrySaveWithRetryAfterTimeout:(double)arg1 recordID:(id)arg2 error:(id)arg3;	// IMP=0x0000000100093748
- (unsigned long long)recordZone;	// IMP=0x0000000100093740
- (id)recordType;	// IMP=0x0000000100093734
- (id)_getRecordIDString;	// IMP=0x00000001000935e8
- (id)mergeRecordsWithOperationTracker:(id)arg1 serverRecord:(id)arg2 originalRecord:(id)arg3;	// IMP=0x0000000100093434
- (void)handleSaveComplete:(id)arg1 withError:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00000001000933b0
- (void)refreshWithRecord:(id)arg1;	// IMP=0x0000000100092c24
- (id)recordRepresentation;	// IMP=0x0000000100091ce4
- (void)addSavesWithOperationTracker:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0000000100091534
- (void)saveToCacheWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0000000100091490
- (void)prepareForSaveWithOperationTracker:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000001000913e4
- (void)unpinGMSnapshotAndSaveNewSnapshotIfNeeded:(id)arg1;	// IMP=0x0000000100091208
- (void)pinLatestGMSnapshotIfNeeded;	// IMP=0x00000001000910b4
- (_Bool)unpinSnapshot:(id)arg1 error:(id *)arg2;	// IMP=0x0000000100090f44
- (_Bool)pinSnapshot:(id)arg1 error:(id *)arg2;	// IMP=0x0000000100090dd4
- (_Bool)addUnreferencedKeybagsFromCacheWithOperationTracker:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000905c8
- (_Bool)setupKeybagWithOperationTracker:(id)arg1 passcode:(id)arg2 error:(id *)arg3;	// IMP=0x0000000100090524
- (_Bool)fetchSnapshotsWithOperationTracker:(id)arg1 error:(id *)arg2;	// IMP=0x0000000100090510
- (_Bool)fetchSnapshotsWithOperationTracker:(id)arg1 retry:(_Bool)arg2 error:(id *)arg3;	// IMP=0x0000000100090374
- (void)fetchSnapshotsWithOperationTracker:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0000000100090320
- (void)fetchSnapshotsWithOperationTracker:(id)arg1 retry:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x0000000100090058
- (void)_fetchSnapshotsWithOperationTracker:(id)arg1 retry:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000010008f8d0
- (_Bool)serverRequestedFullBackup;	// IMP=0x000000010008f81c
@property(readonly, nonatomic) _Bool requiresFullBackup;
@property(readonly, nonatomic) _Bool shouldDeleteDevice;
- (_Bool)backupsDisabledFromAnotherDevice;	// IMP=0x000000010008f3c4
- (id)dateOfLastBackup;	// IMP=0x000000010008f36c
- (void)clearPendingSnapshot;	// IMP=0x000000010008edac
- (_Bool)addSnapshot:(id)arg1 withError:(id *)arg2;	// IMP=0x000000010008ec1c
@property(readonly) _Bool canRestoreSystemFiles;
- (void)validateCacheWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x000000010008e740
- (_Bool)validateCache;	// IMP=0x000000010008e644
@property(readonly, nonatomic) NSString *currentKeybagUUIDString;
- (_Bool)deleteAllBackupsWithError:(id *)arg1;	// IMP=0x000000010008de00
@property(nonatomic) _Bool backupEnabled;
@property(retain, nonatomic) NSString *deviceName;
- (id)initWithUUID:(id)arg1 cache:(id)arg2;	// IMP=0x000000010008d8bc

@end

