//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "NFAWDLoggerDelegate-Protocol.h"
#import "NFCHardwareManagerInterface-Protocol.h"
#import "NFClientAppStateObserverDelegate-Protocol.h"
#import "NFDriverWrapperDelegate-Protocol.h"
#import "NFExpressModeManagerDelegate-Protocol.h"
#import "NFHardwareManagerInterface-Protocol.h"
#import "NFPowerObserverDelegate-Protocol.h"
#import "NFSecureElementWrapperDelegate-Protocol.h"
#import "NSXPCListenerDelegate-Protocol.h"
#import "_NFSessionQueue-Protocol.h"

@class NFBackgroundTagReadingManager, NFClientAppStateObserver, NFDriverWrapper, NFExpressModeManager, NFHardwareControllerInfo, NFHardwareSecureElementInfo, NFPowerObserver, NFPreferenceObserver, NFSecureElementWrapper, NSArray, NSMutableArray, NSMutableDictionary, NSMutableSet, NSString, _NFControllerManager, _NFSession;
@protocol OS_dispatch_queue, OS_os_transaction;

@interface _NFHardwareManager : NSObject <NFHardwareManagerInterface, NFDriverWrapperDelegate, NFSecureElementWrapperDelegate, _NFSessionQueue, NFPowerObserverDelegate, NFClientAppStateObserverDelegate, NSXPCListenerDelegate, NFAWDLoggerDelegate, NFCHardwareManagerInterface, NFExpressModeManagerDelegate>
{
    _Bool _isRunning;	// 8 = 0x8
    _Bool _didPreWarmHardware;	// 9 = 0x9
    _Bool _lockStateChanged;	// 10 = 0xa
    unsigned long long _hardwareState;	// 16 = 0x10
    _NFControllerManager *_controllerManager;	// 24 = 0x18
    NFExpressModeManager *_expressModeManager;	// 32 = 0x20
    NSMutableDictionary *_callbackHandlers;	// 40 = 0x28
    NSObject<OS_dispatch_queue> *_xpcConnectionQueue;	// 48 = 0x30
    NSMutableArray *_xpcConnections;	// 56 = 0x38
    NFPowerObserver *_powerObserver;	// 64 = 0x40
    NFPreferenceObserver *_prefObserver;	// 72 = 0x48
    NFHardwareSecureElementInfo *_secureElementInfo;	// 80 = 0x50
    NFHardwareSecureElementInfo *_icefallSecureElementInfo;	// 88 = 0x58
    unsigned long long _lastKnownRoutingMode;	// 96 = 0x60
    _Bool _pendingDriverFlagChange;	// 104 = 0x68
    NSMutableSet *_persistentFieldDetectClients;	// 112 = 0x70
    NSMutableArray *_fieldDetectSessions;	// 120 = 0x78
    NSObject<OS_os_transaction> *_fieldDetectTransaction;	// 128 = 0x80
    _NFSession *_currentSecureElementSession;	// 136 = 0x88
    NSMutableArray *_secureElementSessionQueue;	// 144 = 0x90
    _Bool _avoidSEResetsActive;	// 152 = 0x98
    CDStruct_005b3ce2 _routingTable;	// 156 = 0x9c
    unsigned long long _cardEmulationProtocol;	// 176 = 0xb0
    NSObject<OS_dispatch_queue> *_workQueue;	// 184 = 0xb8
    BOOL _sessionCounter;	// 192 = 0xc0
    NFClientAppStateObserver *_appStateObserver;	// 200 = 0xc8
    NSObject<OS_os_transaction> *_keepAliveTransaction;	// 208 = 0xd0
    _Bool _systemWillSleep;	// 216 = 0xd8
    _Bool _fieldDetectDisabledWhenSleep;	// 217 = 0xd9
    _Bool _processedACLog;	// 218 = 0xda
    _Bool _restrictedModeBroadcasted;	// 219 = 0xdb
    unsigned short _prioritySessionCount;	// 220 = 0xdc
    NSArray *_hostEmulationLog;	// 224 = 0xe0
    int _notifyToken;	// 232 = 0xe8
    int _deviceClass;	// 236 = 0xec
    unsigned long long _stateCaptureHandle;	// 240 = 0xf0
    int _timeLimitedReaderSessionCount;	// 248 = 0xf8
    _Bool _collectAWD;	// 252 = 0xfc
    _Bool _attackLogPresent;	// 253 = 0xfd
    _Bool _powerCycleAfterThisSession;	// 254 = 0xfe
    _Bool _isNonUIBuild;	// 255 = 0xff
    _Bool _isAPDevBoard;	// 256 = 0x100
    long long _suspendReaderSession;	// 264 = 0x108
    NFBackgroundTagReadingManager *_backgroundTagReadingManager;	// 272 = 0x110
    _Bool _forceHeadlessOnDuringShutdown;	// 280 = 0x118
    _Bool _fdPaused;	// 281 = 0x119
    _Bool _readerUserNotified;	// 282 = 0x11a
    _Bool _fieldDetectEnabled;	// 283 = 0x11b
    _Bool _userInitiatedShutdown;	// 284 = 0x11c
    NFDriverWrapper *_driverWrapper;	// 288 = 0x120
    NFSecureElementWrapper *_secureElementWrapper;	// 296 = 0x128
    NFSecureElementWrapper *_icefallSecureElementWrapper;	// 304 = 0x130
    NFHardwareControllerInfo *_controllerInfo;	// 312 = 0x138
}

+ (id)sharedHardwareManager;	// IMP=0x00000001000c6300
@property(readonly, nonatomic) _Bool userInitiatedShutdown; // @synthesize userInitiatedShutdown=_userInitiatedShutdown;
@property(readonly) _Bool fieldDetectEnabled; // @synthesize fieldDetectEnabled=_fieldDetectEnabled;
@property(readonly) NFHardwareControllerInfo *controllerInfo; // @synthesize controllerInfo=_controllerInfo;
@property(readonly) NFSecureElementWrapper *icefallSecureElementWrapper; // @synthesize icefallSecureElementWrapper=_icefallSecureElementWrapper;
@property(readonly) NFSecureElementWrapper *secureElementWrapper; // @synthesize secureElementWrapper=_secureElementWrapper;
@property(readonly) NFDriverWrapper *driverWrapper; // @synthesize driverWrapper=_driverWrapper;
- (_Bool)canReaderSessionStart;	// IMP=0x00000001000e62fc
- (void)resumeReaderSessionStart;	// IMP=0x00000001000e61a0
- (void)suspendReaderSessionStart;	// IMP=0x00000001000e6190
- (_Bool)configureExpressFelicaEntry:(int)arg1 andTxEndPatternV2:(_Bool)arg2;	// IMP=0x00000001000e5f8c
- (struct os_state_data_s *)dumpState;	// IMP=0x00000001000e58a0
- (void)notifyReaderModeActivityStart;	// IMP=0x00000001000e5764
- (void)notifyReaderModeActivityEnd;	// IMP=0x00000001000e562c
@property(readonly) unsigned long long hardwarePlatform;
- (unsigned long long)defaultRoutingMode;	// IMP=0x00000001000e552c
- (_Bool)restartDiscovery;	// IMP=0x00000001000e551c
- (id)_setSecureElementRoutingTable:(CDStruct_005b3ce2)arg1 cardEmulationProtocol:(unsigned long long)arg2;	// IMP=0x00000001000e4f34
- (id)setSecureElementRoutingMode:(unsigned long long)arg1 cardEmulationProtocol:(unsigned long long)arg2;	// IMP=0x00000001000e4aac
- (id)setSecureElementRoutingMode:(unsigned long long)arg1 cardEmulationProtocol:(unsigned long long)arg2 fieldDetect:(_Bool)arg3;	// IMP=0x00000001000e4934
- (id)setSecureElementRoutingMode:(unsigned long long)arg1;	// IMP=0x00000001000e47a8
- (id)setSecureElementRoutingMode:(unsigned long long)arg1 andFieldDetect:(unsigned long long)arg2;	// IMP=0x00000001000e4624
- (void)pauseFieldDetect:(_Bool)arg1;	// IMP=0x00000001000e461c
- (void)reconfigureDynamicTransitRF:(unsigned long long)arg1 withOverride:(_Bool)arg2;	// IMP=0x00000001000e4378
- (_Bool)deviceRequiresFDTChanges;	// IMP=0x00000001000e42fc
- (id)setHostEmulationEnabled:(_Bool)arg1;	// IMP=0x00000001000e4080
- (id)setFieldDetectEnabled:(_Bool)arg1;	// IMP=0x00000001000e3c50
- (void)preferencesDidChange;	// IMP=0x00000001000e393c
- (_Bool)_readDriverSettings:(int *)arg1 pollingDuration:(long long *)arg2 genericATxTimeout:(long long *)arg3 chipscopeConfig:(id *)arg4;	// IMP=0x00000001000e2a1c
- (void)clientAppIsSuspended:(id)arg1;	// IMP=0x00000001000e25c8
- (void)powerObserverSystemHasPoweredOn:(id)arg1;	// IMP=0x00000001000e21f4
- (void)powerObserverSystemWillSleep:(id)arg1;	// IMP=0x00000001000e19b0
- (void)markApplicationForDelete:(id)arg1;	// IMP=0x00000001000e1974
- (void)updateSeInfo:(id)arg1;	// IMP=0x00000001000e1688
- (_Bool)isIceFall:(id)arg1;	// IMP=0x00000001000e1678
- (void)secureElementReturnedRestrictedMode:(id)arg1;	// IMP=0x00000001000e15e0
- (void)handleSecureElementRemoved:(int)arg1 withReason:(unsigned int)arg2;	// IMP=0x00000001000e13d0
- (void)handleReaderBurnoutCleared;	// IMP=0x00000001000e1230
- (void)handleReaderBurnoutTimer;	// IMP=0x00000001000e1064
- (void)handleRemoteTagsDetected:(id)arg1;	// IMP=0x00000001000e0e88
- (void)handleHostCardReaderDetected:(id)arg1;	// IMP=0x00000001000e0ddc
- (void)handleFelicaStateEvent:(id)arg1 appletAID:(id)arg2;	// IMP=0x00000001000e0c68
- (void)handleTransactionEndEvent:(id)arg1;	// IMP=0x00000001000e0808
- (void)handleTransactionStartEvent:(id)arg1 atlData:(id)arg2;	// IMP=0x00000001000e03cc
- (void)handleTimerExpiredEvent:(id)arg1;	// IMP=0x00000001000e0260
- (void)handleSelectEvent:(id)arg1;	// IMP=0x00000001000e0094
- (void)queryForPresenceOfAttackLog:(int)arg1;	// IMP=0x00000001000dfda0
- (void)handleSecureElementEnteredRestrictedModeExit:(int)arg1;	// IMP=0x00000001000dfb5c
- (void)handleSecureElementEnteredRestrictedMode:(int)arg1;	// IMP=0x00000001000dfae8
- (void)handleSecureElementEndOfOperation;	// IMP=0x00000001000dfa40
- (void)handleFieldReset;	// IMP=0x00000001000df998
- (void)handleFieldNotification:(id)arg1;	// IMP=0x00000001000df4bc
- (void)handleFieldChanged:(_Bool)arg1;	// IMP=0x00000001000df088
- (id)workQueue;	// IMP=0x00000001000df080
- (id)appletForIdentifier:(id)arg1;	// IMP=0x00000001000df024
- (void)handleForceExpressModeEndEvent;	// IMP=0x00000001000ded84
- (void)handleRequestService:(id)arg1 inExpress:(_Bool)arg2;	// IMP=0x00000001000debc4
- (void)handleAppletInactivityTimeout:(id)arg1;	// IMP=0x00000001000de8d8
- (void)handleExpressModeTimeout;	// IMP=0x00000001000de618
- (void)handleExpressModeExited;	// IMP=0x00000001000de2c8
- (void)handleExpressModeStarted;	// IMP=0x00000001000ddbb0
- (void)handleStackUnload;	// IMP=0x00000001000ddb50
- (void)handleStackLoad;	// IMP=0x00000001000dd9a4
- (void)handleHardwareReset:(id)arg1;	// IMP=0x00000001000dd998
- (void)handleRestartDiscovery;	// IMP=0x00000001000dd688
- (void)_postCLTMNotification;	// IMP=0x00000001000dd1e8
- (oneway void)actOnUserInitiatedSystemShutDown:(unsigned int)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000dce88
- (oneway void)updateBackgroundTagReading:(unsigned int)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000dcb28
- (oneway void)preWarm:(CDUnknownBlockType)arg1;	// IMP=0x00000001000dc6c0
- (oneway void)queueSecureElementAndHostEmulationSession:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000dbfac
- (oneway void)queueHostEmulationSession:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000db8c0
- (oneway void)queueNdefTagSession:(id)arg1 data:(id)arg2 callback:(CDUnknownBlockType)arg3;	// IMP=0x00000001000db310
- (oneway void)queueTrustSession:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000dac30
- (oneway void)queuePeerPaymentSession:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000da4f4
- (oneway void)areSessionsAllowed:(CDUnknownBlockType)arg1;	// IMP=0x00000001000da310
- (oneway void)queueSeshatSession:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000d9da0
- (oneway void)queueReaderSessionInternal:(id)arg1 showUI:(_Bool)arg2 callback:(CDUnknownBlockType)arg3;	// IMP=0x00000001000d942c
- (oneway void)configureReaderModeRFForTransitPartner:(_Bool)arg1 transitPartner:(unsigned int)arg2 callback:(CDUnknownBlockType)arg3;	// IMP=0x00000001000d8de4
- (oneway void)areFeaturesSupported:(unsigned long long)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000d8b94
- (oneway void)queueReaderSession:(id)arg1 sessionConfig:(id)arg2 callback:(CDUnknownBlockType)arg3;	// IMP=0x00000001000d7b3c
- (oneway void)queueLoyaltyAndPaymentSession:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000d7224
- (oneway void)queueSecureElementManagerSession:(id)arg1 priority:(_Bool)arg2 callback:(CDUnknownBlockType)arg3;	// IMP=0x00000001000d6c18
- (oneway void)queueContactlessUICCSession:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000d657c
- (oneway void)queueContactlessSession:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000d5bfc
- (oneway void)queueContactlessPaymentSession:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000d52e4
- (oneway void)queueECommercePaymentSession:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000d4ba8
- (oneway void)queueFieldDetectSession:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000d4428
- (oneway void)setChipscope:(_Bool)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000d4084
- (oneway void)dumpLPMDebugLog:(CDUnknownBlockType)arg1;	// IMP=0x00000001000d3dd8
- (oneway void)cancelSinglePollExpressModeAssertion:(CDUnknownBlockType)arg1;	// IMP=0x00000001000d3c84
- (oneway void)openSinglePollExpressModeAssertion:(double)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000d3b30
- (oneway void)getPowerCounters:(CDUnknownBlockType)arg1;	// IMP=0x00000001000d3648
- (id)updateAllPowerCounters;	// IMP=0x00000001000d3410
- (oneway void)disableHeadlessMiniNV:(CDUnknownBlockType)arg1;	// IMP=0x00000001000d2e9c
- (oneway void)headlessFactoryMode:(CDUnknownBlockType)arg1;	// IMP=0x00000001000d2948
- (oneway void)configureHeadlessFactoryMode:(_Bool)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000d2218
- (id)powerCycleSE:(id)arg1;	// IMP=0x00000001000d1f88
- (oneway void)areNFFeaturesSupported:(unsigned long long)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000d1c58
- (_Bool)supportsCathay;	// IMP=0x00000001000d1bcc
- (oneway void)hasCard:(CDUnknownBlockType)arg1;	// IMP=0x00000001000d1a74
- (oneway void)setAuthorization:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000d1764
- (oneway void)blessedUser:(CDUnknownBlockType)arg1;	// IMP=0x00000001000d1754
- (oneway void)setBlessedUser:(id)arg1 keybagUUID:(id)arg2 withAuthorization:(id)arg3 callback:(CDUnknownBlockType)arg4;	// IMP=0x00000001000d16f0
- (oneway void)checkUserBlessing:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000d166c
- (oneway void)getHostCardEmulationLog:(CDUnknownBlockType)arg1;	// IMP=0x00000001000d11d8
- (oneway void)toggleGPIO:(unsigned short)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000d0e5c
- (oneway void)enableHeadlessTestMode:(unsigned short)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000d0ae0
- (oneway void)triggerDelayedWake:(unsigned char)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000d0680
- (oneway void)secureElements:(CDUnknownBlockType)arg1;	// IMP=0x00000001000d05e0
- (oneway void)unregisterForCallbacks:(id)arg1;	// IMP=0x00000001000d03dc
- (oneway void)registerForCallbacks:(id)arg1;	// IMP=0x00000001000d01e4
- (oneway void)setFieldDetectEnabled:(_Bool)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000cfc98
- (oneway void)pushSignedRF:(id)arg1 callback:(CDUnknownBlockType)arg2;	// IMP=0x00000001000cf80c
- (oneway void)getUniqueFDRKeyXPC:(CDUnknownBlockType)arg1;	// IMP=0x00000001000cf760
- (oneway void)getDieID:(CDUnknownBlockType)arg1;	// IMP=0x00000001000cf5dc
- (oneway void)rfSettings:(CDUnknownBlockType)arg1;	// IMP=0x00000001000cf20c
- (oneway void)expressModesInfo:(CDUnknownBlockType)arg1;	// IMP=0x00000001000cf128
- (oneway void)controllerInfo:(CDUnknownBlockType)arg1;	// IMP=0x00000001000cf0d4
- (_Bool)backgroundTagDetectAllow;	// IMP=0x00000001000cf070
- (void)processRestrictedModeState:(int)arg1;	// IMP=0x00000001000cea94
- (unsigned int)hardwareTypeForAWD;	// IMP=0x00000001000cea04
- (_Bool)isReaderModeSupported;	// IMP=0x00000001000ce76c
- (void)lockStateChanged;	// IMP=0x00000001000ce564
- (_Bool)sessionsAllowedForTimeConsumingOperations:(_Bool)arg1;	// IMP=0x00000001000cdd48
- (_Bool)regularSessionsAllowed:(id)arg1;	// IMP=0x00000001000cdbfc
- (id)secureElementDidExitRestrictedMode:(id)arg1;	// IMP=0x00000001000cd78c
- (void)prioritizeSession:(id)arg1;	// IMP=0x00000001000cd410
- (void)dequeueSession:(id)arg1;	// IMP=0x00000001000cd3a0
- (void)_dequeueSession:(id)arg1 startNextSession:(_Bool)arg2;	// IMP=0x00000001000ccc34
- (void)_dequeueHelperGreenCar;	// IMP=0x00000001000ccc30
- (void)_dequeueHelperExpress:(_Bool)arg1 updateCache:(_Bool)arg2;	// IMP=0x00000001000ccbbc
- (void)_dequeueHelperPowerCycle:(_Bool)arg1 startNextSession:(_Bool)arg2;	// IMP=0x00000001000cc8e8
- (void)_dequeueHelperSESession:(id)arg1;	// IMP=0x00000001000cc8a8
- (void)_dequeueHelperLogHCESession:(id)arg1;	// IMP=0x00000001000cc840
- (void)_dequeueHelperReaderSession:(id)arg1;	// IMP=0x00000001000cc77c
- (void)_dequeueHelperAvoidSEResets;	// IMP=0x00000001000cc6f8
- (_Bool)avoidSEReset:(_Bool)arg1;	// IMP=0x00000001000cc3d4
- (void)enableDefaultRouting;	// IMP=0x00000001000cc248
- (void)maybeStartNextSession;	// IMP=0x00000001000cb4cc
- (id)getNextDequeuableSession;	// IMP=0x00000001000cb100
- (void)_startSessionHelperAvoidSEResets;	// IMP=0x00000001000cb0c0
- (void)_startSessionHelperFieldNotifications;	// IMP=0x00000001000cb00c
@property(readonly, nonatomic) _Bool hasSession;
- (oneway void)isHWSupported:(CDUnknownBlockType)arg1;	// IMP=0x00000001000caf78
- (_Bool)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;	// IMP=0x00000001000ca7b0
- (void)didCloseXPCConnection:(id)arg1;	// IMP=0x00000001000ca164
- (_Bool)_isRoutingActive;	// IMP=0x00000001000ca134
- (void)_unloadService;	// IMP=0x00000001000ca0ac
- (void)_loadService;	// IMP=0x00000001000c9ebc
- (_Bool)refreshIcefallSecureElementInfo;	// IMP=0x00000001000c9cf8
- (_Bool)refreshSecureElementInfo;	// IMP=0x00000001000c9b24
- (void)_loadIcefallSecureElement;	// IMP=0x00000001000c9968
- (void)_loadEmbeddedSecureElement;	// IMP=0x00000001000c8b30
@property(readonly) _Bool shouldUseFieldDetect;
- (void)_notifyCurrentSessionOfPendingPrioritySession;	// IMP=0x00000001000c8a44
- (void)_updatePrioritySessionCount;	// IMP=0x00000001000c8860
- (void)_queueSecureElementSession:(id)arg1 forConnection:(id)arg2 isFirstInQueue:(_Bool *)arg3;	// IMP=0x00000001000c850c
- (void)_postActiveSessionsNotification:(int)arg1;	// IMP=0x00000001000c8260
- (_Bool)_isInOSMode;	// IMP=0x00000001000c8238
- (_Bool)_isInJCOPMode;	// IMP=0x00000001000c8210
- (_Bool)_isInOSUAppletMigrationState;	// IMP=0x00000001000c8068
- (_Bool)_isInAppletMigrationState;	// IMP=0x00000001000c8040
- (_Bool)_loadHWInfo;	// IMP=0x00000001000c72c0
- (unsigned long long)_loadHW;	// IMP=0x00000001000c6ca0
- (void)getPresenceOfAttackLog;	// IMP=0x00000001000c6c2c
- (void)stop;	// IMP=0x00000001000c6a6c
- (void)start;	// IMP=0x00000001000c6754
- (void)dealloc;	// IMP=0x00000001000c664c
- (id)init;	// IMP=0x00000001000c6364

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

