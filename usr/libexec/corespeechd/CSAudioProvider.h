//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "CSAudioAlertProviding-Protocol.h"
#import "CSAudioMeterProviding-Protocol.h"
#import "CSAudioMetricProviding-Protocol.h"
#import "CSAudioPreprocessorDelegate-Protocol.h"
#import "CSAudioRecorderDelegate-Protocol.h"
#import "CSAudioServerCrashMonitorDelegate-Protocol.h"
#import "CSAudioSessionProviding-Protocol.h"
#import "CSAudioStreamProviding-Protocol.h"
#import "CSTriggerInfoProviding-Protocol.h"

@class CSAudioCircularBuffer, CSAudioPreprocessor, CSAudioRecordContext, CSAudioRecorder, CSOSTransaction, NSHashTable, NSMutableArray, NSMutableDictionary, NSString, NSUUID;
@protocol CSAudioAlertProvidingDelegate, CSAudioProviderDelegate, CSAudioSessionProvidingDelegate, OS_dispatch_group, OS_dispatch_queue;

@interface CSAudioProvider : NSObject <CSAudioRecorderDelegate, CSAudioServerCrashMonitorDelegate, CSAudioPreprocessorDelegate, CSAudioStreamProviding, CSAudioSessionProviding, CSAudioMetricProviding, CSAudioAlertProviding, CSAudioMeterProviding, CSTriggerInfoProviding>
{
    _Bool _audioSystemRecovering;	// 8 = 0x8
    _Bool _waitingForAlertFinish;	// 9 = 0x9
    NSString *_UUID;	// 16 = 0x10
    NSObject<OS_dispatch_queue> *_recordQueue;	// 24 = 0x18
    CSAudioRecorder *_audioRecorder;	// 32 = 0x20
    unsigned long long _streamState;	// 40 = 0x28
    NSHashTable *_startPendingStreams;	// 48 = 0x30
    NSHashTable *_startPendingOnStoppingStreams;	// 56 = 0x38
    NSHashTable *_alertPlaybackFinishWaitingStreams;	// 64 = 0x40
    NSHashTable *_streams;	// 72 = 0x48
    NSHashTable *_stopPendingStreams;	// 80 = 0x50
    NSMutableArray *_pendingStartCompletions;	// 88 = 0x58
    NSMutableArray *_alertPlaybackFinishWaitingCompletions;	// 96 = 0x60
    NSMutableArray *_pendingStopCompletions;	// 104 = 0x68
    NSMutableDictionary *_startPendingOnStoppingStreamToCompletionDict;	// 112 = 0x70
    id <CSAudioProviderDelegate> _providerDelegate;	// 120 = 0x78
    id <CSAudioSessionProvidingDelegate> _sessionDelegate;	// 128 = 0x80
    NSMutableArray *_streamHolders;	// 136 = 0x88
    NSHashTable *_historicalBufferRequestStreams;	// 144 = 0x90
    CSAudioCircularBuffer *_circularBuffer;	// 152 = 0x98
    id <CSAudioAlertProvidingDelegate> _alertDelegate;	// 160 = 0xa0
    CSAudioRecordContext *_lastAudioRecorderContext;	// 168 = 0xa8
    CSAudioPreprocessor *_audioPreprocessor;	// 176 = 0xb0
    CSOSTransaction *_recordingTransaction;	// 184 = 0xb8
    NSObject<OS_dispatch_group> *_recordingWillStartGroup;	// 192 = 0xc0
    unsigned long long _audioStreamHandleId;	// 200 = 0xc8
    NSUUID *_alertPlaybackFinishTimeoutToken;	// 208 = 0xd0
    NSUUID *_startRecordingWatchDogToken;	// 216 = 0xd8
    NSUUID *_stopRecordingWatchDogToken;	// 224 = 0xe0
    unsigned long long _circularBufferStartHostTime;	// 232 = 0xe8
    unsigned long long _circularBufferStartSampleCount;	// 240 = 0xf0
}

- (void).cxx_destruct;	// IMP=0x000000010003a734
@property(nonatomic) unsigned long long circularBufferStartSampleCount; // @synthesize circularBufferStartSampleCount=_circularBufferStartSampleCount;
@property(nonatomic) unsigned long long circularBufferStartHostTime; // @synthesize circularBufferStartHostTime=_circularBufferStartHostTime;
@property(retain, nonatomic) NSUUID *stopRecordingWatchDogToken; // @synthesize stopRecordingWatchDogToken=_stopRecordingWatchDogToken;
@property(retain, nonatomic) NSUUID *startRecordingWatchDogToken; // @synthesize startRecordingWatchDogToken=_startRecordingWatchDogToken;
@property(retain, nonatomic) NSUUID *alertPlaybackFinishTimeoutToken; // @synthesize alertPlaybackFinishTimeoutToken=_alertPlaybackFinishTimeoutToken;
@property(nonatomic) unsigned long long audioStreamHandleId; // @synthesize audioStreamHandleId=_audioStreamHandleId;
@property(nonatomic) _Bool waitingForAlertFinish; // @synthesize waitingForAlertFinish=_waitingForAlertFinish;
@property(retain, nonatomic) NSObject<OS_dispatch_group> *recordingWillStartGroup; // @synthesize recordingWillStartGroup=_recordingWillStartGroup;
@property(retain, nonatomic) CSOSTransaction *recordingTransaction; // @synthesize recordingTransaction=_recordingTransaction;
@property(retain, nonatomic) CSAudioPreprocessor *audioPreprocessor; // @synthesize audioPreprocessor=_audioPreprocessor;
@property(nonatomic) _Bool audioSystemRecovering; // @synthesize audioSystemRecovering=_audioSystemRecovering;
@property(retain, nonatomic) CSAudioRecordContext *lastAudioRecorderContext; // @synthesize lastAudioRecorderContext=_lastAudioRecorderContext;
@property(nonatomic) __weak id <CSAudioAlertProvidingDelegate> alertDelegate; // @synthesize alertDelegate=_alertDelegate;
@property(retain, nonatomic) CSAudioCircularBuffer *circularBuffer; // @synthesize circularBuffer=_circularBuffer;
@property(retain, nonatomic) NSHashTable *historicalBufferRequestStreams; // @synthesize historicalBufferRequestStreams=_historicalBufferRequestStreams;
@property(retain, nonatomic) NSMutableArray *streamHolders; // @synthesize streamHolders=_streamHolders;
@property(nonatomic) __weak id <CSAudioSessionProvidingDelegate> sessionDelegate; // @synthesize sessionDelegate=_sessionDelegate;
@property(nonatomic) __weak id <CSAudioProviderDelegate> providerDelegate; // @synthesize providerDelegate=_providerDelegate;
@property(retain, nonatomic) NSMutableDictionary *startPendingOnStoppingStreamToCompletionDict; // @synthesize startPendingOnStoppingStreamToCompletionDict=_startPendingOnStoppingStreamToCompletionDict;
@property(retain, nonatomic) NSMutableArray *pendingStopCompletions; // @synthesize pendingStopCompletions=_pendingStopCompletions;
@property(retain, nonatomic) NSMutableArray *alertPlaybackFinishWaitingCompletions; // @synthesize alertPlaybackFinishWaitingCompletions=_alertPlaybackFinishWaitingCompletions;
@property(retain, nonatomic) NSMutableArray *pendingStartCompletions; // @synthesize pendingStartCompletions=_pendingStartCompletions;
@property(retain, nonatomic) NSHashTable *stopPendingStreams; // @synthesize stopPendingStreams=_stopPendingStreams;
@property(retain, nonatomic) NSHashTable *streams; // @synthesize streams=_streams;
@property(retain, nonatomic) NSHashTable *alertPlaybackFinishWaitingStreams; // @synthesize alertPlaybackFinishWaitingStreams=_alertPlaybackFinishWaitingStreams;
@property(retain, nonatomic) NSHashTable *startPendingOnStoppingStreams; // @synthesize startPendingOnStoppingStreams=_startPendingOnStoppingStreams;
@property(retain, nonatomic) NSHashTable *startPendingStreams; // @synthesize startPendingStreams=_startPendingStreams;
@property(nonatomic) unsigned long long streamState; // @synthesize streamState=_streamState;
@property(retain, nonatomic) CSAudioRecorder *audioRecorder; // @synthesize audioRecorder=_audioRecorder;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *recordQueue; // @synthesize recordQueue=_recordQueue;
@property(readonly, nonatomic) NSString *UUID; // @synthesize UUID=_UUID;
- (_Bool)_shouldHandleStartPendingOnStopping:(unsigned long long)arg1 withStopReason:(long long)arg2;	// IMP=0x000000010003a284
- (void)_clearDidStopRecordingDelegateWatchDog;	// IMP=0x000000010003a1ac
- (void)_scheduleDidStopRecordingDelegateWatchDog:(id)arg1;	// IMP=0x000000010003a050
- (void)_scheduleDidStopRecordingDelegateWatchDog;	// IMP=0x0000000100039e50
- (void)_clearDidStartRecordingDelegateWatchDog;	// IMP=0x0000000100039d78
- (void)_schduleDidStartRecordingDelegateWatchDogWithToken:(id)arg1;	// IMP=0x0000000100039c1c
- (void)_scheduleDidStartRecordingDelegateWatchDog;	// IMP=0x00000001000399ec
- (void)_holdRecordingExceptionIfNeeded:(_Bool)arg1;	// IMP=0x00000001000398c4
- (void)_releaseRecordingTransactionIfNeeded;	// IMP=0x00000001000396b0
- (void)_holdRecordingTransactionIfNeeded;	// IMP=0x0000000100039640
- (id)_streamStateName:(unsigned long long)arg1;	// IMP=0x0000000100039394
- (void)_handleAudioSystemFailure;	// IMP=0x000000010003920c
- (void)CSAudioServerCrashMonitorDidReceiveServerRestart:(id)arg1;	// IMP=0x00000001000390cc
- (void)CSAudioServerCrashMonitorDidReceiveServerCrash:(id)arg1;	// IMP=0x0000000100038fec
- (void)audioRecorderDisconnected:(id)arg1;	// IMP=0x0000000100038f18
- (void)audioRecorder:(id)arg1 didSetAudioSessionActive:(_Bool)arg2;	// IMP=0x0000000100038e6c
- (void)audioRecorder:(id)arg1 willSetAudioSessionActive:(_Bool)arg2;	// IMP=0x0000000100038dc0
- (void)audioRecorderEndRecordInterruption:(id)arg1;	// IMP=0x0000000100038d1c
- (void)audioRecorderBeginRecordInterruption:(id)arg1 withContext:(id)arg2;	// IMP=0x0000000100038c70
- (void)audioRecorderBeginRecordInterruption:(id)arg1;	// IMP=0x0000000100038bcc
- (void)audioRecorderBuiltInAudioStreamInvalidated:(id)arg1 error:(id)arg2;	// IMP=0x000000010003899c
- (void)notifyProviderContextChanged;	// IMP=0x0000000100038898
- (void)audioRecorderDidFinishAlertPlayback:(id)arg1 ofType:(long long)arg2 error:(id)arg3;	// IMP=0x0000000100038788
- (void)_didReceiveFinishStartAlertPlaybackAt:(unsigned long long)arg1;	// IMP=0x0000000100037dcc
- (void)_scheduleAlertFinishTimeout:(double)arg1;	// IMP=0x0000000100037b10
- (void)audioRecorderRecordHardwareConfigurationDidChange:(id)arg1 toConfiguration:(long long)arg2;	// IMP=0x00000001000377e4
- (_Bool)isNarrowBand;	// IMP=0x00000001000376e8
- (_Bool)isRecording;	// IMP=0x00000001000375ec
- (void)audioRecorderBufferAvailable:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 buffer:(id)arg3;	// IMP=0x00000001000372b0
- (void)audioRecorderBufferAvailable:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 buffer:(id)arg3 remoteVAD:(id)arg4 atTime:(unsigned long long)arg5;	// IMP=0x00000001000370a0
- (void)_forwardAudioChunk:(id)arg1 remoteVAD:(id)arg2 atTime:(unsigned long long)arg3 toStream:(id)arg4;	// IMP=0x0000000100036c04
- (void)_processAudioBuffer:(id)arg1 remoteVAD:(id)arg2 atTime:(unsigned long long)arg3;	// IMP=0x00000001000367b4
- (void)_fetchHistoricalAudioAndForwardToStream:(id)arg1 remoteVAD:(id)arg2;	// IMP=0x000000010003633c
- (void)_processAudioBufferForWatch:(id)arg1 remoteVAD:(id)arg2 atTime:(unsigned long long)arg3;	// IMP=0x0000000100035c64
- (void)audioRecorderWillBeDestroyed:(id)arg1;	// IMP=0x0000000100035a80
- (void)audioRecorderStreamHandleIdInvalidated:(unsigned long long)arg1;	// IMP=0x0000000100035854
- (void)audioRecorderDidStopRecord:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 reason:(long long)arg3;	// IMP=0x00000001000357cc
- (void)audioRecorderDidStartRecord:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 successfully:(_Bool)arg3 error:(id)arg4;	// IMP=0x00000001000356b4
- (void)audioPreprocessor:(id)arg1 hasAvailableBuffer:(id)arg2 atTime:(unsigned long long)arg3;	// IMP=0x0000000100035604
- (_Bool)_shouldStopRecording;	// IMP=0x0000000100035330
- (_Bool)_isVoiceTriggerInfoAvailableLocally:(id)arg1;	// IMP=0x00000001000352b8
- (void)triggerInfoForContext:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000010003501c
- (float)averagePowerForChannel:(unsigned long long)arg1;	// IMP=0x0000000100034fc0
- (float)peakPowerForChannel:(unsigned long long)arg1;	// IMP=0x0000000100034f64
- (void)updateMeters;	// IMP=0x0000000100034f24
- (void)setMeteringEnabled:(_Bool)arg1;	// IMP=0x0000000100034edc
- (id)audioMetric;	// IMP=0x0000000100034e88
- (void)configureAlertBehavior:(id)arg1;	// IMP=0x0000000100034db4
- (unsigned long long)alertStartTime;	// IMP=0x0000000100034c40
- (_Bool)playRecordStartingAlertAndResetEndpointer;	// IMP=0x0000000100034a70
- (_Bool)_didPlayStartAlertSoundForSiri:(id)arg1 audioStream:(id)arg2;	// IMP=0x00000001000346c4
- (_Bool)playAlertSoundForType:(long long)arg1;	// IMP=0x0000000100034540
- (_Bool)setAlertSoundFromURL:(id)arg1 forType:(long long)arg2;	// IMP=0x00000001000343a4
- (void)setAudioAlertDelegate:(id)arg1;	// IMP=0x000000010003430c
- (void)enableMiniDucking:(_Bool)arg1;	// IMP=0x0000000100034264
- (void)setDuckOthersOption:(_Bool)arg1;	// IMP=0x00000001000341bc
- (_Bool)duckOthersOption;	// IMP=0x00000001000340d8
- (_Bool)_deactivateAudioSession:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x0000000100033e88
- (_Bool)deactivateAudioSession:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x0000000100033c78
- (_Bool)_activateAudioSessionWithReason:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x0000000100033a20
- (_Bool)activateAudioSessionWithReason:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x0000000100033810
- (_Bool)prewarmAudioSessionWithError:(id *)arg1;	// IMP=0x00000001000335c4
- (void)setAudioSessionDelegate:(id)arg1;	// IMP=0x000000010003352c
- (id)playbackRoute;	// IMP=0x00000001000333e8
- (id)recordSettings;	// IMP=0x000000010003328c
- (id)recordDeviceInfo;	// IMP=0x0000000100033150
- (id)recordRoute;	// IMP=0x0000000100032ff4
- (void)cancelAudioStreamHold:(id)arg1;	// IMP=0x0000000100032c08
- (id)holdAudioStreamWithDescription:(id)arg1 timeout:(double)arg2;	// IMP=0x000000010003258c
- (void)_saveRecordingBufferFrom:(unsigned long long)arg1 to:(unsigned long long)arg2 toURL:(id)arg3;	// IMP=0x000000010003257c
- (void)saveRecordingBufferFrom:(unsigned long long)arg1 to:(unsigned long long)arg2 toURL:(id)arg3;	// IMP=0x00000001000324cc
- (void)saveRecordingBufferToEndFrom:(unsigned long long)arg1 toURL:(id)arg2;	// IMP=0x00000001000323d0
- (id)_audioChunkFrom:(unsigned long long)arg1 to:(unsigned long long)arg2;	// IMP=0x00000001000323a0
- (id)audioChunkToEndFrom:(unsigned long long)arg1;	// IMP=0x000000010003225c
- (id)audioChunkFrom:(unsigned long long)arg1 to:(unsigned long long)arg2;	// IMP=0x0000000100032150
- (void)_stopAudioStream:(id)arg1 option:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x0000000100031310
- (void)stopAudioStream:(id)arg1 option:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00000001000311fc
- (void)_handleDidStopAudioStreamWithReason:(long long)arg1;	// IMP=0x0000000100030904
- (void)_postEpilogueAudioStream;	// IMP=0x00000001000308ac
- (void)_preEpilogueAudioStream;	// IMP=0x000000010003089c
- (void)_handleDidStartAudioStreamWithResult:(_Bool)arg1 error:(id)arg2;	// IMP=0x00000001000304a4
- (void)_resetCircularBufferStartTime;	// IMP=0x0000000100030468
- (void)_startAudioStream:(id)arg1 option:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000010002f3b0
- (void)prepareAudioStream:(id)arg1 request:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000010002f0e8
- (_Bool)prepareAudioStreamSync:(id)arg1 request:(id)arg2 error:(id *)arg3;	// IMP=0x000000010002edd4
- (void)startAudioStream:(id)arg1 option:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000010002e850
- (void)_tearDownCircularBufferIfNeeded;	// IMP=0x000000010002e710
- (void)_createCircularBufferIfNeeded;	// IMP=0x000000010002e590
- (void)_prepareAudioStream:(id)arg1 request:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000010002e458
- (_Bool)_prepareAudioStreamSync:(id)arg1 request:(id)arg2 error:(id *)arg3;	// IMP=0x000000010002dfac
- (void)audioStreamWithRequest:(id)arg1 streamName:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000010002dd8c
- (id)audioStreamWithRequest:(id)arg1 streamName:(id)arg2 error:(id *)arg3;	// IMP=0x000000010002daf4
- (id)_audioStreamWithRequest:(id)arg1 streamName:(id)arg2 error:(id *)arg3;	// IMP=0x000000010002d874
- (_Bool)setCurrentContext:(id)arg1 error:(id *)arg2;	// IMP=0x000000010002d304
- (void)setAudioProviderDelegate:(id)arg1;	// IMP=0x000000010002d26c
- (void)start;	// IMP=0x000000010002cf04
- (void)dealloc;	// IMP=0x000000010002ce30
- (id)initWithAudioStreamHandleId:(unsigned long long)arg1 audioRecorder:(id)arg2;	// IMP=0x000000010002cb50

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

