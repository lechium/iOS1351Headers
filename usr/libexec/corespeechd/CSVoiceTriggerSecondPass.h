//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "CSAudioServerCrashMonitorDelegate-Protocol.h"
#import "CSAudioStreamProvidingDelegate-Protocol.h"
#import "CSKeywordAnalyzerNDAPIScoreDelegate-Protocol.h"
#import "CSKeywordAnalyzerNDEAPIScoreDelegate-Protocol.h"
#import "CSKeywordAnalyzerQuasarScoreDelegate-Protocol.h"
#import "CSMediaPlayingMonitorDelegate-Protocol.h"
#import "CSSelfTriggerDetectorDelegate-Protocol.h"
#import "CSSpIdVTTextDependentSpeakerRecognizerDelegate-Protocol.h"
#import "CSVoiceTriggerEnabledMonitorDelegate-Protocol.h"
#import "CSVolumeMonitorDelegate-Protocol.h"

@class CSAsset, CSAudioCircularBuffer, CSAudioStream, CSKeywordAnalyzerNDAPI, CSKeywordAnalyzerNDEAPI, CSKeywordAnalyzerQuasar, CSPlainAudioFileWriter, CSShadowMicScoreCreator, CSSpIdVTTextDependentSpeakerRecognizer, CSSpeakerDetectorNDAPI, CSSpeakerModel, CSVTSecondPassScorer, NSData, NSDate, NSDictionary, NSMutableData, NSMutableDictionary, NSString, NSUUID;
@protocol CSVoiceTriggerDelegate, OS_dispatch_queue;

@interface CSVoiceTriggerSecondPass : NSObject <CSKeywordAnalyzerNDAPIScoreDelegate, CSKeywordAnalyzerNDEAPIScoreDelegate, CSKeywordAnalyzerQuasarScoreDelegate, CSVoiceTriggerEnabledMonitorDelegate, CSAudioServerCrashMonitorDelegate, CSAudioStreamProvidingDelegate, CSMediaPlayingMonitorDelegate, CSVolumeMonitorDelegate, CSSpIdVTTextDependentSpeakerRecognizerDelegate, CSSelfTriggerDetectorDelegate>
{
    _Bool _hasReceivedNDEAPIResult;	// 8 = 0x8
    _Bool _isSecondChanceHot;	// 9 = 0x9
    _Bool _isSATDetectionRunning;	// 10 = 0xa
    _Bool _shouldUsePHS;	// 11 = 0xb
    _Bool _hasPendingNearMiss;	// 12 = 0xc
    _Bool _isRunningRecognizer;	// 13 = 0xd
    _Bool _recognizerResultPending;	// 14 = 0xe
    _Bool _didWakeAP;	// 15 = 0xf
    _Bool _hasTriggerCandidate;	// 16 = 0x10
    _Bool _isStartSampleCountMarked;	// 17 = 0x11
    _Bool _secondPassHasMadeDecision;	// 18 = 0x12
    _Bool _skipTdsrProc;	// 19 = 0x13
    _Bool _tdsrResultPending;	// 20 = 0x14
    _Bool _kwdRejectCleanupPending;	// 21 = 0x15
    unsigned char _hasReceivedEarlyDetectNDEAPIResult;	// 22 = 0x16
    float _referenceKeywordThreshold;	// 24 = 0x18
    float _keywordThreshold;	// 28 = 0x1c
    float _keywordThresholdSecondChance;	// 32 = 0x20
    float _effectiveKeywordThreshold;	// 36 = 0x24
    float _keywordLoggingThreshold;	// 40 = 0x28
    float _keywordRejectLoggingThreshold;	// 44 = 0x2c
    float _lastScore;	// 48 = 0x30
    float _recognizerScore;	// 52 = 0x34
    float _recognizerScoreScaleFactor;	// 56 = 0x38
    float _recognizerThresholdOffset;	// 60 = 0x3c
    float _firstPassChannelSelectionDelaySeconds;	// 64 = 0x40
    float _firstPassMasterChannelScoreBoost;	// 68 = 0x44
    float _firstPassOnsetScore;	// 72 = 0x48
    float _twoShotFeedbackDelay;	// 76 = 0x4c
    float _mediaVolume;	// 80 = 0x50
    float _shadowMicScoreThresholdForVAD;	// 84 = 0x54
    NSString *_UUID;	// 88 = 0x58
    id <CSVoiceTriggerDelegate> _delegate;	// 96 = 0x60
    unsigned long long _secondChanceHotTillMachTime;	// 104 = 0x68
    NSObject<OS_dispatch_queue> *_queue;	// 112 = 0x70
    CSAsset *_currentAsset;	// 120 = 0x78
    CSAudioStream *_audioStream;	// 128 = 0x80
    NSString *_audioProviderUUID;	// 136 = 0x88
    CSKeywordAnalyzerNDAPI *_keywordAnalyzerNDAPI;	// 144 = 0x90
    CSKeywordAnalyzerNDEAPI *_keywordAnalyzerNDEAPI;	// 152 = 0x98
    CSKeywordAnalyzerQuasar *_keywordAnalyzerQuasar;	// 160 = 0xa0
    CSSpeakerDetectorNDAPI *_speakerDetector;	// 168 = 0xa8
    CSSpeakerModel *_speakerModel;	// 176 = 0xb0
    CDUnknownBlockType _resultCompletion;	// 184 = 0xb8
    CSSpIdVTTextDependentSpeakerRecognizer *_tdsrAnalyzer;	// 192 = 0xc0
    double _tdSpeakerRecognizerCombinationWeight;	// 200 = 0xc8
    double _tdSpeakerRecognizerSATThreshold;	// 208 = 0xd0
    unsigned long long _secondPassTimeout;	// 216 = 0xd8
    unsigned long long _numProcessedSamples;	// 224 = 0xe0
    unsigned long long _numAnalyzedSamples;	// 232 = 0xe8
    unsigned long long _extraSamplesAtStart;	// 240 = 0xf0
    unsigned long long _analyzerPrependingSamples;	// 248 = 0xf8
    unsigned long long _analyzerTrailingSamples;	// 256 = 0x100
    unsigned long long _nearMissDelayTimeout;	// 264 = 0x108
    unsigned long long _nearMissCandidateDetectedSamples;	// 272 = 0x110
    NSDictionary *_lastAnalyzerResult;	// 280 = 0x118
    unsigned long long _recognizerWaitSamples;	// 288 = 0x120
    unsigned long long _earlyDetectFiredMachTime;	// 296 = 0x128
    unsigned long long _activeChannel;	// 304 = 0x130
    NSDictionary *_lastResult;	// 312 = 0x138
    unsigned long long _processedSampleCountsInPending;	// 320 = 0x140
    unsigned long long _firstPassTriggerStartSampleCount;	// 328 = 0x148
    unsigned long long _firstPassTriggerFireSampleCount;	// 336 = 0x150
    NSDictionary *_firstPassChannelSelectionScores;	// 344 = 0x158
    unsigned long long _firstPassOnsetChannel;	// 352 = 0x160
    unsigned long long _secondPassAnalyzerStartSampleCount;	// 360 = 0x168
    unsigned long long _secondPassTriggerMachAbsTime;	// 368 = 0x170
    NSObject<OS_dispatch_queue> *_stateSerialQueue;	// 376 = 0x178
    double _lastAggTime;	// 384 = 0x180
    double _cumulativeUptime;	// 392 = 0x188
    double _cumulativeDowntime;	// 400 = 0x190
    NSData *_superVector;	// 408 = 0x198
    CSAudioCircularBuffer *_audioBuffer;	// 416 = 0x1a0
    unsigned long long _firstPassSource;	// 424 = 0x1a8
    NSString *_firstPassDeviceID;	// 432 = 0x1b0
    CSPlainAudioFileWriter *_audioFileWriter;	// 440 = 0x1b8
    long long _mediaPlayingState;	// 448 = 0x1c0
    NSMutableDictionary *_lastVoiceTriggerEventInfo;	// 456 = 0x1c8
    NSDate *_tdsrStartTime;	// 464 = 0x1d0
    unsigned long long _kwdRejectCleanupSecondPassResult;	// 472 = 0x1d8
    NSUUID *_kwdRejectCleanupToken;	// 480 = 0x1e0
    NSUUID *_tdsrTimeoutToken;	// 488 = 0x1e8
    CSShadowMicScoreCreator *_shadowMicScoreCreator;	// 496 = 0x1f0
    NSMutableData *_dataBufferNDEAPI;	// 504 = 0x1f8
    unsigned long long _dataBufferPositionNDEAPI;	// 512 = 0x200
    CSVTSecondPassScorer *_secondPassScorer;	// 520 = 0x208
}

+ (id)timeStampString;	// IMP=0x00000001000e649c
+ (id)secondPassAudioLogDirectory;	// IMP=0x00000001000e6368
+ (id)secondPassAudioLoggingFilePath;	// IMP=0x00000001000e6290
- (void).cxx_destruct;	// IMP=0x00000001000e9f0c
@property(retain, nonatomic) CSVTSecondPassScorer *secondPassScorer; // @synthesize secondPassScorer=_secondPassScorer;
@property(nonatomic) float shadowMicScoreThresholdForVAD; // @synthesize shadowMicScoreThresholdForVAD=_shadowMicScoreThresholdForVAD;
@property(nonatomic) unsigned char hasReceivedEarlyDetectNDEAPIResult; // @synthesize hasReceivedEarlyDetectNDEAPIResult=_hasReceivedEarlyDetectNDEAPIResult;
@property(nonatomic) unsigned long long dataBufferPositionNDEAPI; // @synthesize dataBufferPositionNDEAPI=_dataBufferPositionNDEAPI;
@property(retain, nonatomic) NSMutableData *dataBufferNDEAPI; // @synthesize dataBufferNDEAPI=_dataBufferNDEAPI;
@property(retain, nonatomic) CSShadowMicScoreCreator *shadowMicScoreCreator; // @synthesize shadowMicScoreCreator=_shadowMicScoreCreator;
@property(retain, nonatomic) NSUUID *tdsrTimeoutToken; // @synthesize tdsrTimeoutToken=_tdsrTimeoutToken;
@property(retain, nonatomic) NSUUID *kwdRejectCleanupToken; // @synthesize kwdRejectCleanupToken=_kwdRejectCleanupToken;
@property(nonatomic) unsigned long long kwdRejectCleanupSecondPassResult; // @synthesize kwdRejectCleanupSecondPassResult=_kwdRejectCleanupSecondPassResult;
@property(nonatomic) _Bool kwdRejectCleanupPending; // @synthesize kwdRejectCleanupPending=_kwdRejectCleanupPending;
@property(nonatomic) _Bool tdsrResultPending; // @synthesize tdsrResultPending=_tdsrResultPending;
@property(retain, nonatomic) NSDate *tdsrStartTime; // @synthesize tdsrStartTime=_tdsrStartTime;
@property(nonatomic) _Bool skipTdsrProc; // @synthesize skipTdsrProc=_skipTdsrProc;
@property(retain, nonatomic) NSMutableDictionary *lastVoiceTriggerEventInfo; // @synthesize lastVoiceTriggerEventInfo=_lastVoiceTriggerEventInfo;
@property(nonatomic) float mediaVolume; // @synthesize mediaVolume=_mediaVolume;
@property(nonatomic) long long mediaPlayingState; // @synthesize mediaPlayingState=_mediaPlayingState;
@property(nonatomic) _Bool secondPassHasMadeDecision; // @synthesize secondPassHasMadeDecision=_secondPassHasMadeDecision;
@property(retain, nonatomic) CSPlainAudioFileWriter *audioFileWriter; // @synthesize audioFileWriter=_audioFileWriter;
@property(nonatomic) float twoShotFeedbackDelay; // @synthesize twoShotFeedbackDelay=_twoShotFeedbackDelay;
@property(retain, nonatomic) NSString *firstPassDeviceID; // @synthesize firstPassDeviceID=_firstPassDeviceID;
@property(nonatomic) unsigned long long firstPassSource; // @synthesize firstPassSource=_firstPassSource;
@property(nonatomic) __weak CSAudioCircularBuffer *audioBuffer; // @synthesize audioBuffer=_audioBuffer;
@property(retain, nonatomic) NSData *superVector; // @synthesize superVector=_superVector;
@property(nonatomic) double cumulativeDowntime; // @synthesize cumulativeDowntime=_cumulativeDowntime;
@property(nonatomic) double cumulativeUptime; // @synthesize cumulativeUptime=_cumulativeUptime;
@property(nonatomic) double lastAggTime; // @synthesize lastAggTime=_lastAggTime;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *stateSerialQueue; // @synthesize stateSerialQueue=_stateSerialQueue;
@property(nonatomic) unsigned long long secondPassTriggerMachAbsTime; // @synthesize secondPassTriggerMachAbsTime=_secondPassTriggerMachAbsTime;
@property(nonatomic) unsigned long long secondPassAnalyzerStartSampleCount; // @synthesize secondPassAnalyzerStartSampleCount=_secondPassAnalyzerStartSampleCount;
@property(nonatomic) _Bool isStartSampleCountMarked; // @synthesize isStartSampleCountMarked=_isStartSampleCountMarked;
@property(nonatomic) _Bool hasTriggerCandidate; // @synthesize hasTriggerCandidate=_hasTriggerCandidate;
@property(nonatomic) _Bool didWakeAP; // @synthesize didWakeAP=_didWakeAP;
@property(nonatomic) unsigned long long firstPassOnsetChannel; // @synthesize firstPassOnsetChannel=_firstPassOnsetChannel;
@property(nonatomic) float firstPassOnsetScore; // @synthesize firstPassOnsetScore=_firstPassOnsetScore;
@property(nonatomic) float firstPassMasterChannelScoreBoost; // @synthesize firstPassMasterChannelScoreBoost=_firstPassMasterChannelScoreBoost;
@property(nonatomic) float firstPassChannelSelectionDelaySeconds; // @synthesize firstPassChannelSelectionDelaySeconds=_firstPassChannelSelectionDelaySeconds;
@property(retain, nonatomic) NSDictionary *firstPassChannelSelectionScores; // @synthesize firstPassChannelSelectionScores=_firstPassChannelSelectionScores;
@property(nonatomic) unsigned long long firstPassTriggerFireSampleCount; // @synthesize firstPassTriggerFireSampleCount=_firstPassTriggerFireSampleCount;
@property(nonatomic) unsigned long long firstPassTriggerStartSampleCount; // @synthesize firstPassTriggerStartSampleCount=_firstPassTriggerStartSampleCount;
@property(nonatomic) unsigned long long processedSampleCountsInPending; // @synthesize processedSampleCountsInPending=_processedSampleCountsInPending;
@property(retain, nonatomic) NSDictionary *lastResult; // @synthesize lastResult=_lastResult;
@property(nonatomic) unsigned long long activeChannel; // @synthesize activeChannel=_activeChannel;
@property(nonatomic) unsigned long long earlyDetectFiredMachTime; // @synthesize earlyDetectFiredMachTime=_earlyDetectFiredMachTime;
@property(nonatomic) unsigned long long recognizerWaitSamples; // @synthesize recognizerWaitSamples=_recognizerWaitSamples;
@property(nonatomic) float recognizerThresholdOffset; // @synthesize recognizerThresholdOffset=_recognizerThresholdOffset;
@property(nonatomic) float recognizerScoreScaleFactor; // @synthesize recognizerScoreScaleFactor=_recognizerScoreScaleFactor;
@property(nonatomic) _Bool recognizerResultPending; // @synthesize recognizerResultPending=_recognizerResultPending;
@property(nonatomic) _Bool isRunningRecognizer; // @synthesize isRunningRecognizer=_isRunningRecognizer;
@property(nonatomic) float recognizerScore; // @synthesize recognizerScore=_recognizerScore;
@property(retain, nonatomic) NSDictionary *lastAnalyzerResult; // @synthesize lastAnalyzerResult=_lastAnalyzerResult;
@property(nonatomic) _Bool hasPendingNearMiss; // @synthesize hasPendingNearMiss=_hasPendingNearMiss;
@property(nonatomic) unsigned long long nearMissCandidateDetectedSamples; // @synthesize nearMissCandidateDetectedSamples=_nearMissCandidateDetectedSamples;
@property(nonatomic) unsigned long long nearMissDelayTimeout; // @synthesize nearMissDelayTimeout=_nearMissDelayTimeout;
@property(nonatomic) _Bool shouldUsePHS; // @synthesize shouldUsePHS=_shouldUsePHS;
@property(nonatomic) _Bool isSATDetectionRunning; // @synthesize isSATDetectionRunning=_isSATDetectionRunning;
@property(nonatomic) unsigned long long analyzerTrailingSamples; // @synthesize analyzerTrailingSamples=_analyzerTrailingSamples;
@property(nonatomic) unsigned long long analyzerPrependingSamples; // @synthesize analyzerPrependingSamples=_analyzerPrependingSamples;
@property(nonatomic) unsigned long long extraSamplesAtStart; // @synthesize extraSamplesAtStart=_extraSamplesAtStart;
@property(nonatomic) _Bool isSecondChanceHot; // @synthesize isSecondChanceHot=_isSecondChanceHot;
@property(nonatomic) float lastScore; // @synthesize lastScore=_lastScore;
@property(nonatomic) float keywordRejectLoggingThreshold; // @synthesize keywordRejectLoggingThreshold=_keywordRejectLoggingThreshold;
@property(nonatomic) float keywordLoggingThreshold; // @synthesize keywordLoggingThreshold=_keywordLoggingThreshold;
@property(nonatomic) float effectiveKeywordThreshold; // @synthesize effectiveKeywordThreshold=_effectiveKeywordThreshold;
@property(nonatomic) float keywordThresholdSecondChance; // @synthesize keywordThresholdSecondChance=_keywordThresholdSecondChance;
@property(nonatomic) float keywordThreshold; // @synthesize keywordThreshold=_keywordThreshold;
@property(nonatomic) float referenceKeywordThreshold; // @synthesize referenceKeywordThreshold=_referenceKeywordThreshold;
@property(nonatomic) unsigned long long numAnalyzedSamples; // @synthesize numAnalyzedSamples=_numAnalyzedSamples;
@property(nonatomic) unsigned long long numProcessedSamples; // @synthesize numProcessedSamples=_numProcessedSamples;
@property(nonatomic) unsigned long long secondPassTimeout; // @synthesize secondPassTimeout=_secondPassTimeout;
@property(nonatomic) _Bool hasReceivedNDEAPIResult; // @synthesize hasReceivedNDEAPIResult=_hasReceivedNDEAPIResult;
@property(nonatomic) double tdSpeakerRecognizerSATThreshold; // @synthesize tdSpeakerRecognizerSATThreshold=_tdSpeakerRecognizerSATThreshold;
@property(nonatomic) double tdSpeakerRecognizerCombinationWeight; // @synthesize tdSpeakerRecognizerCombinationWeight=_tdSpeakerRecognizerCombinationWeight;
@property(retain, nonatomic) CSSpIdVTTextDependentSpeakerRecognizer *tdsrAnalyzer; // @synthesize tdsrAnalyzer=_tdsrAnalyzer;
@property(copy, nonatomic) CDUnknownBlockType resultCompletion; // @synthesize resultCompletion=_resultCompletion;
@property(retain, nonatomic) CSSpeakerModel *speakerModel; // @synthesize speakerModel=_speakerModel;
@property(retain, nonatomic) CSSpeakerDetectorNDAPI *speakerDetector; // @synthesize speakerDetector=_speakerDetector;
@property(retain, nonatomic) CSKeywordAnalyzerQuasar *keywordAnalyzerQuasar; // @synthesize keywordAnalyzerQuasar=_keywordAnalyzerQuasar;
@property(retain, nonatomic) CSKeywordAnalyzerNDEAPI *keywordAnalyzerNDEAPI; // @synthesize keywordAnalyzerNDEAPI=_keywordAnalyzerNDEAPI;
@property(retain, nonatomic) CSKeywordAnalyzerNDAPI *keywordAnalyzerNDAPI; // @synthesize keywordAnalyzerNDAPI=_keywordAnalyzerNDAPI;
@property(retain, nonatomic) NSString *audioProviderUUID; // @synthesize audioProviderUUID=_audioProviderUUID;
@property(retain, nonatomic) CSAudioStream *audioStream; // @synthesize audioStream=_audioStream;
@property(retain, nonatomic) CSAsset *currentAsset; // @synthesize currentAsset=_currentAsset;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(nonatomic) unsigned long long secondChanceHotTillMachTime; // @synthesize secondChanceHotTillMachTime=_secondChanceHotTillMachTime;
@property(nonatomic) __weak id <CSVoiceTriggerDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) NSString *UUID; // @synthesize UUID=_UUID;
- (id)_mpGetVoiceTriggerEventInfoForPhrase:(id)arg1;	// IMP=0x00000001000e841c
- (void)_mpHandleTDSRFailure;	// IMP=0x00000001000e81e4
- (void)_mpProcessTDSRScore:(float)arg1;	// IMP=0x00000001000e7c04
- (void)_mpVerifySATWithAnalyzer:(id)arg1 voiceTriggerEventInfo:(id)arg2;	// IMP=0x00000001000e77d4
- (void)_mpAnalyzeForTriggerDetection:(id)arg1 forceMaximized:(_Bool)arg2;	// IMP=0x00000001000e7220
- (void)textDependentSpeakerRecognizer:(id)arg1 failedWithError:(id)arg2;	// IMP=0x00000001000e6c74
- (void)textDependentSpeakerRecognizer:(id)arg1 hasSatScore:(float)arg2;	// IMP=0x00000001000e6750
- (void)_handleResultCompletion:(unsigned long long)arg1 voiceTriggerInfo:(id)arg2 error:(id)arg3;	// IMP=0x00000001000e66a4
- (void)_setStartAnalyzeTime:(unsigned long long)arg1;	// IMP=0x00000001000e6588
- (void)_resetStartAnalyzeTime;	// IMP=0x00000001000e657c
- (void)CSVolumeMonitor:(id)arg1 didReceiveMusicVolumeChanged:(float)arg2;	// IMP=0x00000001000e6224
- (void)CSMediaPlayingMonitor:(id)arg1 didReceiveMediaPlayingChanged:(long long)arg2;	// IMP=0x00000001000e61c0
- (void)selfTriggerDetector:(id)arg1 didDetectSelfTrigger:(id)arg2;	// IMP=0x00000001000e6158
- (void)CSAudioServerCrashMonitorDidReceiveServerRestart:(id)arg1;	// IMP=0x00000001000e6004
- (void)handleSATOnlyScore;	// IMP=0x00000001000e5bec
- (void)handleTDSRCombinedScore;	// IMP=0x00000001000e5848
- (void)_addToPHSRejectListIfNeeded:(id)arg1;	// IMP=0x00000001000e5540
- (void)_getDidWakeAP:(id)arg1;	// IMP=0x00000001000e5490
- (void)_addDeviceStatusInfoToDict:(id)arg1;	// IMP=0x00000001000e52a0
- (void)_addRejectStatsToDict:(id)arg1;	// IMP=0x00000001000e5138
- (void)_addTdsrInfoToDict:(id)arg1 combinedScore:(float)arg2;	// IMP=0x00000001000e4fcc
- (void)_addSatAnalyzerInfoToDict:(id)arg1 satScore:(float)arg2 satThreshold:(float)arg3;	// IMP=0x00000001000e4d48
- (void)_addPHSExplicitOnlyModelScoresToDict:(id)arg1;	// IMP=0x00000001000e47c0
- (void)_handleVoiceTriggerFirstPassFromAOP:(id)arg1 audioProviderUUID:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00000001000e4258
- (void)_implicitTrainingIfNeeded:(id)arg1;	// IMP=0x00000001000e3fb4
- (void)CSVoiceTriggerEnabledMonitor:(id)arg1 didReceiveEnabled:(_Bool)arg2;	// IMP=0x00000001000e3efc
- (void)_resetUpTime;	// IMP=0x00000001000e3e00
- (void)_logUptimeWithVTSwitchChanged:(_Bool)arg1 VTEnabled:(_Bool)arg2;	// IMP=0x00000001000e3bf0
- (_Bool)_supportTwoShotFeedbackDelay;	// IMP=0x00000001000e3b18
- (void)_handleSecondPassSuccess:(id)arg1;	// IMP=0x00000001000e36d4
- (void)_markSecondPassTriggerMachAbsoluteTime:(unsigned long long)arg1;	// IMP=0x00000001000e3568
- (void)keywordAnalyzerQuasar:(id)arg1 hasResultAvailable:(id)arg2 forChannel:(unsigned long long)arg3;	// IMP=0x00000001000e3188
- (void)keywordAnalyzerNDEAPI:(id)arg1 hasResultAvailable:(id)arg2 forChannel:(unsigned long long)arg3;	// IMP=0x00000001000e2d8c
- (void)keywordAnalyzerNDAPI:(id)arg1 hasResultAvailable:(id)arg2 forChannel:(unsigned long long)arg3;	// IMP=0x00000001000e2cfc
- (void)_handleTDSRTimeout:(id)arg1;	// IMP=0x00000001000e2b0c
- (void)_analyzeForKeywordDetection:(id)arg1 result:(id)arg2 forChannel:(unsigned long long)arg3 forceMaximized:(_Bool)arg4;	// IMP=0x00000001000e0d4c
- (void)audioStreamProvider:(id)arg1 audioChunkForTVAvailable:(id)arg2;	// IMP=0x00000001000e0d48
- (void)audioStreamProvider:(id)arg1 audioBufferAvailable:(id)arg2;	// IMP=0x00000001000e0140
- (void)_computeEffectiveThreshold;	// IMP=0x00000001000dff94
- (_Bool)_isTDSRProcessingAllowed;	// IMP=0x00000001000dff4c
- (void)audioStreamProvider:(id)arg1 didStopStreamUnexpectly:(long long)arg2;	// IMP=0x00000001000dfe08
- (void)_didStopAudioStream;	// IMP=0x00000001000dfcb4
- (void)_didStartAudioStream:(_Bool)arg1;	// IMP=0x00000001000dfb58
- (void)_prepareStartAudioStream;	// IMP=0x00000001000df920
- (void)_cleanupKeywordRejectionWithToken:(id)arg1 result:(unsigned long long)arg2 voiceTriggerInfo:(id)arg3;	// IMP=0x00000001000df858
- (void)_notifySecondPassReject:(id)arg1 result:(unsigned long long)arg2;	// IMP=0x00000001000df3a0
- (void)_voiceTriggerFirstPassDidDetectKeywordFrom:(unsigned long long)arg1 deviceId:(id)arg2 audioProviderUUID:(id)arg3 firstPassInfo:(id)arg4 completion:(CDUnknownBlockType)arg5;	// IMP=0x00000001000de970
- (void)cancelCurrentRequest;	// IMP=0x00000001000de6fc
- (void)handleVoiceTriggerSecondPassFrom:(unsigned long long)arg1 deviceId:(id)arg2 audioProviderUUID:(id)arg3 firstPassInfo:(id)arg4 completion:(CDUnknownBlockType)arg5;	// IMP=0x00000001000de554
- (void)_handleVoiceTriggerFirstPassFromJarvis:(unsigned long long)arg1 deviceId:(id)arg2 audioProviderUUID:(id)arg3 firstPassInfo:(id)arg4 completion:(CDUnknownBlockType)arg5;	// IMP=0x00000001000ddeec
- (void)_handleVoiceTriggerFirstPassFromHearstAP:(unsigned long long)arg1 deviceId:(id)arg2 audioProviderUUID:(id)arg3 firstPassInfo:(id)arg4 completion:(CDUnknownBlockType)arg5;	// IMP=0x00000001000dd944
- (void)_handleVoiceTriggerFirstPassFromHearst:(unsigned long long)arg1 deviceId:(id)arg2 audioProviderUUID:(id)arg3 firstPassInfo:(id)arg4 completion:(CDUnknownBlockType)arg5;	// IMP=0x00000001000dd430
- (void)_handleVoiceTriggerFirstPassFromAP:(id)arg1 audioProviderUUID:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00000001000dcddc
- (void)_requestStartAudioStreamWitContext:(id)arg1 audioProviderUUID:(id)arg2 startStreamOption:(id)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x00000001000dc600
- (void)_clearTriggerCandidate;	// IMP=0x00000001000dc504
- (void)_initializeMediaPlayingState;	// IMP=0x00000001000dc300
- (void)_setAsset:(id)arg1;	// IMP=0x00000001000db648
- (void)setAsset:(id)arg1;	// IMP=0x00000001000db5b0
- (void)_reset;	// IMP=0x00000001000db464
- (void)reset;	// IMP=0x00000001000db3fc
- (void)start;	// IMP=0x00000001000db348
- (void)dealloc;	// IMP=0x00000001000db234
- (id)initWithPHSEnabled:(_Bool)arg1;	// IMP=0x00000001000daf94

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

