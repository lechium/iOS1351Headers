//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import "SDUnlockSessionManager.h"

#import "SDUnlockIDSControllerDelegate-Protocol.h"

@class NSData, NSDate, NSObject, NSString, NSTimer, SDUnlockMotionDetector, SDUnlockWakeGestureRecord;
@protocol OS_dispatch_semaphore, OS_dispatch_source;

__attribute__((visibility("hidden")))
@interface SDUnlockLockManager : SDUnlockSessionManager <SDUnlockIDSControllerDelegate>
{
    _Bool _inPosition;	// 8 = 0x8
    _Bool _canRetrySetup;	// 9 = 0x9
    _Bool _sentLockedState;	// 10 = 0xa
    _Bool _checkingWristState;	// 11 = 0xb
    _Bool _waitingForAuthToken;	// 12 = 0xc
    _Bool _preventingExitForSetup;	// 13 = 0xd
    _Bool _onWristForCurrentSession;	// 14 = 0xe
    _Bool _checkingWristAndMotionState;	// 15 = 0xf
    NSString *_requestID;	// 16 = 0x10
    NSDate *_wristOnDate;	// 24 = 0x18
    NSTimer *_enableTimer;	// 32 = 0x20
    NSData *_tempLongTermKey;	// 40 = 0x28
    NSDate *_sessionStartDate;	// 48 = 0x30
    NSString *_passcode;	// 56 = 0x38
    long long _unlockSessionID;	// 64 = 0x40
    NSObject<OS_dispatch_source> *_longTermKeyTimer;	// 72 = 0x48
    long long _deviceOffWristForSessionID;	// 80 = 0x50
    NSObject<OS_dispatch_source> *_wristAndMotionTimer;	// 88 = 0x58
    NSObject<OS_dispatch_semaphore> *_positionSemaphore;	// 96 = 0x60
    SDUnlockMotionDetector *_motionDetector;	// 104 = 0x68
    SDUnlockWakeGestureRecord *_lastWakeGestureRecord;	// 112 = 0x70
    CDUnknownBlockType _enableHandler;	// 120 = 0x78
    CDUnknownBlockType _wristAndMotionStateHandler;	// 128 = 0x80
}

+ (id)sharedLockManager;	// IMP=0x000000010021ed54
- (void).cxx_destruct;	// IMP=0x0000000100224524
@property(copy) CDUnknownBlockType wristAndMotionStateHandler; // @synthesize wristAndMotionStateHandler=_wristAndMotionStateHandler;
@property(copy) CDUnknownBlockType enableHandler; // @synthesize enableHandler=_enableHandler;
@property(retain) SDUnlockWakeGestureRecord *lastWakeGestureRecord; // @synthesize lastWakeGestureRecord=_lastWakeGestureRecord;
@property(retain) SDUnlockMotionDetector *motionDetector; // @synthesize motionDetector=_motionDetector;
@property(retain) NSObject<OS_dispatch_semaphore> *positionSemaphore; // @synthesize positionSemaphore=_positionSemaphore;
@property(retain) NSObject<OS_dispatch_source> *wristAndMotionTimer; // @synthesize wristAndMotionTimer=_wristAndMotionTimer;
@property long long deviceOffWristForSessionID; // @synthesize deviceOffWristForSessionID=_deviceOffWristForSessionID;
@property(retain) NSObject<OS_dispatch_source> *longTermKeyTimer; // @synthesize longTermKeyTimer=_longTermKeyTimer;
@property _Bool checkingWristAndMotionState; // @synthesize checkingWristAndMotionState=_checkingWristAndMotionState;
@property _Bool onWristForCurrentSession; // @synthesize onWristForCurrentSession=_onWristForCurrentSession;
@property _Bool preventingExitForSetup; // @synthesize preventingExitForSetup=_preventingExitForSetup;
@property long long unlockSessionID; // @synthesize unlockSessionID=_unlockSessionID;
@property(copy) NSString *passcode; // @synthesize passcode=_passcode;
@property(retain) NSDate *sessionStartDate; // @synthesize sessionStartDate=_sessionStartDate;
@property _Bool waitingForAuthToken; // @synthesize waitingForAuthToken=_waitingForAuthToken;
@property _Bool checkingWristState; // @synthesize checkingWristState=_checkingWristState;
@property(retain) NSData *tempLongTermKey; // @synthesize tempLongTermKey=_tempLongTermKey;
@property(retain) NSTimer *enableTimer; // @synthesize enableTimer=_enableTimer;
@property _Bool sentLockedState; // @synthesize sentLockedState=_sentLockedState;
@property(retain) NSDate *wristOnDate; // @synthesize wristOnDate=_wristOnDate;
@property(retain) NSString *requestID; // @synthesize requestID=_requestID;
@property _Bool canRetrySetup; // @synthesize canRetrySetup=_canRetrySetup;
@property(nonatomic) _Bool inPosition; // @synthesize inPosition=_inPosition;
- (void)sendStateResponseWithUnlockEnabled:(_Bool)arg1 passcodeEnabled:(_Bool)arg2;	// IMP=0x00000001002240dc
- (void)sendStashConfirmation:(_Bool)arg1 sessionID:(unsigned int)arg2;	// IMP=0x0000000100223f5c
- (void)sendStashKeyExchangeResponse:(id)arg1 sessionID:(unsigned int)arg2 errorCode:(long long)arg3;	// IMP=0x0000000100223dac
- (void)sendSessionUnlockConfirmation:(_Bool)arg1 sessionID:(unsigned int)arg2;	// IMP=0x0000000100223c2c
- (void)sendKeyExchangeResponse:(id)arg1 sessionID:(unsigned int)arg2;	// IMP=0x0000000100223a48
- (void)sendCreateEscrowSecretWithStepData:(id)arg1 sessionID:(unsigned int)arg2;	// IMP=0x0000000100223754
- (void)sendSetupRequest:(id)arg1 withSessionID:(unsigned int)arg2;	// IMP=0x0000000100223460
- (void)sendClassALongTermKeyRequest:(id)arg1 sessionID:(unsigned int)arg2;	// IMP=0x0000000100223158
- (void)sendLongTermKeyRequest:(id)arg1 requestID:(id)arg2;	// IMP=0x0000000100222f44
- (void)sendDeviceLockStateChanged:(_Bool)arg1;	// IMP=0x0000000100222df8
- (void)handleUnlockStateRequest:(id)arg1;	// IMP=0x0000000100222d18
- (void)handleStashToken:(id)arg1;	// IMP=0x0000000100222bb4
- (void)handleStashKeyExchangeRequest:(id)arg1;	// IMP=0x00000001002229a0
- (void)handleSessionAuthToken:(id)arg1;	// IMP=0x0000000100222608
- (void)handleSessionKeyExchangeRequest:(id)arg1;	// IMP=0x0000000100221f60
- (void)handleSetupCreateRecord:(id)arg1;	// IMP=0x0000000100221a58
- (void)handleEscrowSessionRequest:(id)arg1;	// IMP=0x0000000100221598
- (void)handleSetupSessionCreated:(id)arg1;	// IMP=0x000000010022122c
- (_Bool)updateLongTermKeys:(id)arg1;	// IMP=0x0000000100221138
- (void)handleClassALongTermKeyResponse:(id)arg1;	// IMP=0x0000000100220eac
- (void)handleLongTermKeyResponse:(id)arg1;	// IMP=0x0000000100220c7c
- (void)handleStartLTK:(id)arg1;	// IMP=0x0000000100220b98
- (void)idsControllerSpaceDidBecomeAvailable:(id)arg1;	// IMP=0x0000000100220b1c
- (void)idsController:(id)arg1 didReceiveProtoData:(id)arg2 forType:(unsigned short)arg3;	// IMP=0x0000000100220948
- (void)allowExiting;	// IMP=0x00000001002208f8
- (void)preventExiting;	// IMP=0x00000001002208a8
- (void)getWristAndMotionStateWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010022088c
- (_Bool)lostModeEnabled;	// IMP=0x000000010022078c
- (_Bool)localDeviceLocked;	// IMP=0x0000000100220730
- (void)resetLongTermKeyRequest;	// IMP=0x00000001002206e0
- (void)resetState;	// IMP=0x0000000100220650
- (void)disableUnlockPairing;	// IMP=0x00000001002205d0
- (void)forceOnWristCheck;	// IMP=0x00000001002205cc
- (void)wristDetectionDisabled:(CDUnknownBlockType)arg1;	// IMP=0x00000001002205b0
- (_Bool)deviceOnWrist;	// IMP=0x00000001002205a4
- (_Bool)unlockEnabled;	// IMP=0x00000001002204d0
- (void)notifyEnableStateWithError:(id)arg1;	// IMP=0x00000001002202cc
- (void)enableUnlockForcingLTKTransfer:(_Bool)arg1;	// IMP=0x000000010021ff94
- (void)enableUnlockWithDevice:(id)arg1 passcode:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000010021fac0
- (void)invalidateLongTermKeyTimer;	// IMP=0x000000010021fa30
- (void)restartLongTermKeyTimer;	// IMP=0x000000010021f8a0
- (void)invalidateEnableTimer;	// IMP=0x000000010021f854
- (void)enableTimerFired:(id)arg1;	// IMP=0x000000010021f744
- (void)restartEnableTimerWithTimeout:(double)arg1;	// IMP=0x000000010021f6c0
- (void)checkKeyBagState;	// IMP=0x000000010021f568
- (void)devicesDidUnpair:(id)arg1;	// IMP=0x000000010021f4fc
- (void)handleDevicesDidFailToPair;	// IMP=0x000000010021f4a0
- (void)handleConfigurationState;	// IMP=0x000000010021f374
- (void)keyBagLockStateChange:(id)arg1;	// IMP=0x000000010021f120
- (id)generateDebugInfo;	// IMP=0x000000010021f028
- (void)debugInfoRequested:(id)arg1;	// IMP=0x000000010021efc4
- (void)addObservers;	// IMP=0x000000010021ef90
- (id)init;	// IMP=0x000000010021edc0

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

