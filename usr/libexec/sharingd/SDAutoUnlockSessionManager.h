//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "SDAutoUnlockSessionDelegate-Protocol.h"
#import "SDAutoUnlockTransportClient-Protocol.h"

@class NSData, NSDate, NSDictionary, NSError, NSHashTable, NSMutableArray, NSMutableDictionary, NSMutableSet, NSSet, NSString, SDAutoUnlockIconTransferStore, SDAutoUnlockSuggestionManager, SFAutoUnlockDevice, SFDeviceDiscovery;
@protocol OS_dispatch_queue, OS_dispatch_source;

__attribute__((visibility("hidden")))
@interface SDAutoUnlockSessionManager : NSObject <SDAutoUnlockTransportClient, SDAutoUnlockSessionDelegate>
{
    _Bool _attemptInProgress;	// 8 = 0x8
    _Bool _watchUnlockEnabled;	// 9 = 0x9
    _Bool _previousNearbyState;	// 10 = 0xa
    _Bool _extendedTimer;	// 11 = 0xb
    _Bool _notifiedForProxy;	// 12 = 0xc
    _Bool _proxyNotAvailableForUnlock;	// 13 = 0xd
    _Bool _macBeenUnlocked;	// 14 = 0xe
    _Bool _presentedBluetoothError;	// 15 = 0xf
    _Bool _presentedWiFiError;	// 16 = 0x10
    _Bool _currentlyAdvertising;	// 17 = 0x11
    _Bool _previousConnectedState;	// 18 = 0x12
    _Bool _cachedMacWiFiState;	// 19 = 0x13
    _Bool _cachedWatchWiFiState;	// 20 = 0x14
    _Bool _wifiStateNeedsUpdating;	// 21 = 0x15
    _Bool _preventRadarNotification;	// 22 = 0x16
    int _proxyRSSI;	// 24 = 0x18
    NSString *_state;	// 32 = 0x20
    NSData *_attemptExternalACMContext;	// 40 = 0x28
    unsigned long long _stateHandle;	// 48 = 0x30
    NSDictionary *_awdlInfo;	// 56 = 0x38
    NSObject<OS_dispatch_queue> *_sessionManagerQueue;	// 64 = 0x40
    NSHashTable *_observerTable;	// 72 = 0x48
    SDAutoUnlockSuggestionManager *_suggestionManager;	// 80 = 0x50
    NSMutableDictionary *_lockAuthSessions;	// 88 = 0x58
    NSMutableArray *_canceledPairingKeySessions;	// 96 = 0x60
    NSMutableArray *_canceledAuthLockSessions;	// 104 = 0x68
    NSMutableDictionary *_keyAuthSessions;	// 112 = 0x70
    NSMutableDictionary *_lockPairingSessions;	// 120 = 0x78
    NSMutableDictionary *_keyPairingSessions;	// 128 = 0x80
    NSMutableDictionary *_proxySessions;	// 136 = 0x88
    NSMutableArray *_locksWithAKSTokens;	// 144 = 0x90
    NSMutableArray *_keysWithAKSTokens;	// 152 = 0x98
    NSMutableSet *_serviceClients;	// 160 = 0xa0
    NSData *_previousMacAddressData;	// 168 = 0xa8
    NSObject<OS_dispatch_source> *_nearbyPushTimer;	// 176 = 0xb0
    NSDate *_attemptStart;	// 184 = 0xb8
    SFDeviceDiscovery *_scanner;	// 192 = 0xc0
    SFAutoUnlockDevice *_attemptDevice;	// 200 = 0xc8
    long long _attemptType;	// 208 = 0xd0
    NSString *_attemptBundlePath;	// 216 = 0xd8
    NSString *_attemptAppName;	// 224 = 0xe0
    CDUnknownBlockType _attemptActivatedHandler;	// 232 = 0xe8
    NSObject<OS_dispatch_source> *_scanTimer;	// 240 = 0xf0
    double _proxyDiscoverTime;	// 248 = 0xf8
    NSString *_scanErrorString;	// 256 = 0x100
    NSError *_authSessionError;	// 264 = 0x108
    long long _proxyErrorCode;	// 272 = 0x110
    NSString *_proxyDeviceModel;	// 280 = 0x118
    long long _lastProxyState;	// 288 = 0x120
    double _proxyConnectionTime;	// 296 = 0x128
    NSSet *_scanAutoUnlockDevices;	// 304 = 0x130
    NSSet *_scanWatchIDs;	// 312 = 0x138
    NSSet *_scanPhoneIDs;	// 320 = 0x140
    long long _attemptCount;	// 328 = 0x148
    NSString *_attemptID;	// 336 = 0x150
    NSString *_incrementedCountID;	// 344 = 0x158
    long long _connectedBluetoothDevices;	// 352 = 0x160
    long long _timeSinceLastMachineWake;	// 360 = 0x168
    long long _lastSleepType;	// 368 = 0x170
    NSSet *_eligibleDevices;	// 376 = 0x178
    long long _wifiErrorCount;	// 384 = 0x180
    long long _bluetoothErrorCount;	// 392 = 0x188
    long long _idsMacCountCache;	// 400 = 0x190
    NSDate *_advertisingChangedDate;	// 408 = 0x198
    NSDate *_wristStateChangedDate;	// 416 = 0x1a0
    NSDate *_lockStateChangedDate;	// 424 = 0x1a8
    NSDate *_nearbyDeviceChangedDate;	// 432 = 0x1b0
    NSDate *_pipeConnectionChangedDate;	// 440 = 0x1b8
    NSMutableArray *_previousSessionIDs;	// 448 = 0x1c0
    SDAutoUnlockIconTransferStore *_iconTransferStore;	// 456 = 0x1c8
}

+ (id)sharedManager;	// IMP=0x00000001000b053c
- (void).cxx_destruct;	// IMP=0x00000001000bed1c
@property(retain, nonatomic) SDAutoUnlockIconTransferStore *iconTransferStore; // @synthesize iconTransferStore=_iconTransferStore;
@property(retain, nonatomic) NSMutableArray *previousSessionIDs; // @synthesize previousSessionIDs=_previousSessionIDs;
@property(nonatomic) _Bool preventRadarNotification; // @synthesize preventRadarNotification=_preventRadarNotification;
@property(nonatomic) _Bool wifiStateNeedsUpdating; // @synthesize wifiStateNeedsUpdating=_wifiStateNeedsUpdating;
@property(nonatomic) _Bool cachedWatchWiFiState; // @synthesize cachedWatchWiFiState=_cachedWatchWiFiState;
@property(nonatomic) _Bool cachedMacWiFiState; // @synthesize cachedMacWiFiState=_cachedMacWiFiState;
@property(nonatomic) _Bool previousConnectedState; // @synthesize previousConnectedState=_previousConnectedState;
@property(retain, nonatomic) NSDate *pipeConnectionChangedDate; // @synthesize pipeConnectionChangedDate=_pipeConnectionChangedDate;
@property(retain, nonatomic) NSDate *nearbyDeviceChangedDate; // @synthesize nearbyDeviceChangedDate=_nearbyDeviceChangedDate;
@property(retain, nonatomic) NSDate *lockStateChangedDate; // @synthesize lockStateChangedDate=_lockStateChangedDate;
@property(retain, nonatomic) NSDate *wristStateChangedDate; // @synthesize wristStateChangedDate=_wristStateChangedDate;
@property(retain, nonatomic) NSDate *advertisingChangedDate; // @synthesize advertisingChangedDate=_advertisingChangedDate;
@property(nonatomic) long long idsMacCountCache; // @synthesize idsMacCountCache=_idsMacCountCache;
@property(nonatomic) _Bool currentlyAdvertising; // @synthesize currentlyAdvertising=_currentlyAdvertising;
@property(nonatomic) _Bool presentedWiFiError; // @synthesize presentedWiFiError=_presentedWiFiError;
@property(nonatomic) _Bool presentedBluetoothError; // @synthesize presentedBluetoothError=_presentedBluetoothError;
@property(nonatomic) long long bluetoothErrorCount; // @synthesize bluetoothErrorCount=_bluetoothErrorCount;
@property(nonatomic) long long wifiErrorCount; // @synthesize wifiErrorCount=_wifiErrorCount;
@property(retain, nonatomic) NSSet *eligibleDevices; // @synthesize eligibleDevices=_eligibleDevices;
@property(nonatomic) long long lastSleepType; // @synthesize lastSleepType=_lastSleepType;
@property(nonatomic) long long timeSinceLastMachineWake; // @synthesize timeSinceLastMachineWake=_timeSinceLastMachineWake;
@property(nonatomic) long long connectedBluetoothDevices; // @synthesize connectedBluetoothDevices=_connectedBluetoothDevices;
@property(retain, nonatomic) NSString *incrementedCountID; // @synthesize incrementedCountID=_incrementedCountID;
@property(retain, nonatomic) NSString *attemptID; // @synthesize attemptID=_attemptID;
@property(nonatomic) long long attemptCount; // @synthesize attemptCount=_attemptCount;
@property(nonatomic) _Bool macBeenUnlocked; // @synthesize macBeenUnlocked=_macBeenUnlocked;
@property(retain, nonatomic) NSSet *scanPhoneIDs; // @synthesize scanPhoneIDs=_scanPhoneIDs;
@property(retain, nonatomic) NSSet *scanWatchIDs; // @synthesize scanWatchIDs=_scanWatchIDs;
@property(retain, nonatomic) NSSet *scanAutoUnlockDevices; // @synthesize scanAutoUnlockDevices=_scanAutoUnlockDevices;
@property(nonatomic) _Bool proxyNotAvailableForUnlock; // @synthesize proxyNotAvailableForUnlock=_proxyNotAvailableForUnlock;
@property(nonatomic) double proxyConnectionTime; // @synthesize proxyConnectionTime=_proxyConnectionTime;
@property(nonatomic) long long lastProxyState; // @synthesize lastProxyState=_lastProxyState;
@property(nonatomic) int proxyRSSI; // @synthesize proxyRSSI=_proxyRSSI;
@property(retain, nonatomic) NSString *proxyDeviceModel; // @synthesize proxyDeviceModel=_proxyDeviceModel;
@property(nonatomic) long long proxyErrorCode; // @synthesize proxyErrorCode=_proxyErrorCode;
@property(retain, nonatomic) NSError *authSessionError; // @synthesize authSessionError=_authSessionError;
@property(retain, nonatomic) NSString *scanErrorString; // @synthesize scanErrorString=_scanErrorString;
@property(nonatomic) _Bool notifiedForProxy; // @synthesize notifiedForProxy=_notifiedForProxy;
@property(nonatomic) double proxyDiscoverTime; // @synthesize proxyDiscoverTime=_proxyDiscoverTime;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *scanTimer; // @synthesize scanTimer=_scanTimer;
@property(copy, nonatomic) CDUnknownBlockType attemptActivatedHandler; // @synthesize attemptActivatedHandler=_attemptActivatedHandler;
@property(retain, nonatomic) NSString *attemptAppName; // @synthesize attemptAppName=_attemptAppName;
@property(retain, nonatomic) NSString *attemptBundlePath; // @synthesize attemptBundlePath=_attemptBundlePath;
@property(nonatomic) long long attemptType; // @synthesize attemptType=_attemptType;
@property(retain, nonatomic) SFAutoUnlockDevice *attemptDevice; // @synthesize attemptDevice=_attemptDevice;
@property(retain, nonatomic) SFDeviceDiscovery *scanner; // @synthesize scanner=_scanner;
@property(nonatomic) _Bool extendedTimer; // @synthesize extendedTimer=_extendedTimer;
@property(retain, nonatomic) NSDate *attemptStart; // @synthesize attemptStart=_attemptStart;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *nearbyPushTimer; // @synthesize nearbyPushTimer=_nearbyPushTimer;
@property(nonatomic) _Bool previousNearbyState; // @synthesize previousNearbyState=_previousNearbyState;
@property(retain, nonatomic) NSData *previousMacAddressData; // @synthesize previousMacAddressData=_previousMacAddressData;
@property(nonatomic) _Bool watchUnlockEnabled; // @synthesize watchUnlockEnabled=_watchUnlockEnabled;
@property(retain, nonatomic) NSMutableSet *serviceClients; // @synthesize serviceClients=_serviceClients;
@property(retain, nonatomic) NSMutableArray *keysWithAKSTokens; // @synthesize keysWithAKSTokens=_keysWithAKSTokens;
@property(retain, nonatomic) NSMutableArray *locksWithAKSTokens; // @synthesize locksWithAKSTokens=_locksWithAKSTokens;
@property(retain, nonatomic) NSMutableDictionary *proxySessions; // @synthesize proxySessions=_proxySessions;
@property(retain, nonatomic) NSMutableDictionary *keyPairingSessions; // @synthesize keyPairingSessions=_keyPairingSessions;
@property(retain, nonatomic) NSMutableDictionary *lockPairingSessions; // @synthesize lockPairingSessions=_lockPairingSessions;
@property(retain, nonatomic) NSMutableDictionary *keyAuthSessions; // @synthesize keyAuthSessions=_keyAuthSessions;
@property(retain, nonatomic) NSMutableArray *canceledAuthLockSessions; // @synthesize canceledAuthLockSessions=_canceledAuthLockSessions;
@property(retain, nonatomic) NSMutableArray *canceledPairingKeySessions; // @synthesize canceledPairingKeySessions=_canceledPairingKeySessions;
@property(retain, nonatomic) NSMutableDictionary *lockAuthSessions; // @synthesize lockAuthSessions=_lockAuthSessions;
@property(retain, nonatomic) SDAutoUnlockSuggestionManager *suggestionManager; // @synthesize suggestionManager=_suggestionManager;
@property(retain, nonatomic) NSHashTable *observerTable; // @synthesize observerTable=_observerTable;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *sessionManagerQueue; // @synthesize sessionManagerQueue=_sessionManagerQueue;
@property(copy, nonatomic) NSDictionary *awdlInfo; // @synthesize awdlInfo=_awdlInfo;
@property(nonatomic) unsigned long long stateHandle; // @synthesize stateHandle=_stateHandle;
@property(retain, nonatomic) NSData *attemptExternalACMContext; // @synthesize attemptExternalACMContext=_attemptExternalACMContext;
@property(nonatomic) _Bool attemptInProgress; // @synthesize attemptInProgress=_attemptInProgress;
@property(copy, nonatomic) NSString *state; // @synthesize state=_state;
- (void)loadPreviousSessionIDs;	// IMP=0x00000001000be6fc
- (_Bool)previousSessionExists:(id)arg1;	// IMP=0x00000001000be64c
- (void)storePreviousSessionID:(id)arg1;	// IMP=0x00000001000be484
- (struct os_state_data_s *)dumpState;	// IMP=0x00000001000bdd30
- (void)initializeCaptureBlock;	// IMP=0x00000001000bdc90
- (void)generateStateDump;	// IMP=0x00000001000bdc48
- (void)savePresentedWiFiError;	// IMP=0x00000001000bdbcc
- (void)savePresentedBluetoothError;	// IMP=0x00000001000bdb50
- (void)loadPresentedWiFiError;	// IMP=0x00000001000bdae8
- (void)loadPresentedBluetoothError;	// IMP=0x00000001000bda80
- (_Bool)shouldShowErrorForWiFiEnabled:(_Bool)arg1;	// IMP=0x00000001000bd8f8
- (_Bool)shouldShowErrorForBluetoothEnabled:(_Bool)arg1;	// IMP=0x00000001000bd770
- (long long)errorCodeForBluetoothEnabled:(_Bool)arg1 wifiEnabled:(_Bool)arg2;	// IMP=0x00000001000bd750
- (id)errorStringForBluetoothEnabled:(_Bool)arg1 wifiEnabled:(_Bool)arg2;	// IMP=0x00000001000bd6dc
- (void)handleWiFiPowerChanged:(id)arg1;	// IMP=0x00000001000bd6d8
- (void)handleBluetoothPowerChanged:(id)arg1;	// IMP=0x00000001000bd59c
- (id)baseResultsDictionaryForError:(id)arg1;	// IMP=0x00000001000bd310
- (void)createRadarForError:(id)arg1 devices:(id)arg2 rangingResults:(id)arg3;	// IMP=0x00000001000bd30c
- (void)handleNearbyStateChanged;	// IMP=0x00000001000bd300
- (void)pipeConnectionChanged:(id)arg1;	// IMP=0x00000001000bd230
- (void)wristStateChanged:(id)arg1;	// IMP=0x00000001000bd22c
- (void)handleLockStateChanged;	// IMP=0x00000001000bd090
- (void)screenLockUnlocked:(id)arg1;	// IMP=0x00000001000bd08c
- (void)keyBagLockStateChange:(id)arg1;	// IMP=0x00000001000bcf4c
- (void)handleBLEDataReceivedNotification:(id)arg1;	// IMP=0x00000001000bc610
- (void)removeServiceClientForIdentifier:(id)arg1;	// IMP=0x00000001000bc594
- (void)addServiceClientForIdentifier:(id)arg1;	// IMP=0x00000001000bc518
- (long long)idsMacCount;	// IMP=0x00000001000bc470
- (_Bool)watchLockedAndOnWrist;	// IMP=0x00000001000bc468
- (_Bool)advertisingEnabled;	// IMP=0x00000001000bc460
- (void)updateAdvertising;	// IMP=0x00000001000bc19c
- (_Bool)watchLockedOnWristForPeer:(id)arg1;	// IMP=0x00000001000bc164
- (_Bool)proxyAdvertisementForPeer:(id)arg1;	// IMP=0x00000001000bc12c
- (_Bool)unlockEnabledForPeer:(id)arg1;	// IMP=0x00000001000bc0f4
- (void)handleScanTimerFired;	// IMP=0x00000001000bba3c
- (void)handleBLEScanTimerFired;	// IMP=0x00000001000bb9d4
- (void)invalidateScanTimer;	// IMP=0x00000001000bb8fc
- (void)restartScanTimer:(unsigned long long)arg1;	// IMP=0x00000001000bb6b4
- (void)handleFoundPeer:(id)arg1;	// IMP=0x00000001000bb28c
- (void)invalidateScanner;	// IMP=0x00000001000bb0fc
- (void)startScannerWithWatchBluetoothIDs:(id)arg1 phoneBluetoothIDs:(id)arg2;	// IMP=0x00000001000ba694
- (void)transport:(id)arg1 didReceivePairingRequestWithSessionID:(id)arg2 deviceID:(id)arg3 requestData:(id)arg4;	// IMP=0x00000001000ba560
- (void)transportDidChangeNearbyState:(id)arg1;	// IMP=0x00000001000ba4a0
- (void)transportDidChangeDevices:(id)arg1;	// IMP=0x00000001000ba3c4
- (void)sessionDidSendInitialData:(id)arg1;	// IMP=0x00000001000ba3c0
- (void)sessionDidReceiveKeyDeviceLocked:(id)arg1;	// IMP=0x00000001000ba2fc
- (void)handleProxyConnectionStartedForSession:(id)arg1;	// IMP=0x00000001000b9f60
- (void)handleLockConnectionStartedForSession:(id)arg1;	// IMP=0x00000001000b9720
- (void)sessionDidStartConnection:(id)arg1;	// IMP=0x00000001000b969c
- (void)handleProxySessionCompleted:(id)arg1 error:(id)arg2;	// IMP=0x00000001000b93d8
- (void)handleLockSessionCompleted:(id)arg1 error:(id)arg2;	// IMP=0x00000001000b8a78
- (void)session:(id)arg1 didCompleteWithError:(id)arg2;	// IMP=0x00000001000b7f00
- (void)cancelAllLockSessionsForScanTimeout;	// IMP=0x00000001000b7d9c
- (void)clearAllKeysWithTokens;	// IMP=0x00000001000b7cfc
- (void)cleanUpProxySessions;	// IMP=0x00000001000b7ae4
- (void)updateStringForProxySession;	// IMP=0x00000001000b78a8
- (void)createProxySessionWithDeviceID:(id)arg1;	// IMP=0x00000001000b75ac
- (void)createKeySessionWithBLEDevice:(id)arg1 sessionID:(id)arg2 wrapper:(id)arg3 useEncryption:(_Bool)arg4;	// IMP=0x00000001000b7234
- (void)createLockSessionWithWatchDevice:(id)arg1;	// IMP=0x00000001000b6d64
- (void)createPairingKeySessionWithIdentifier:(id)arg1 deviceID:(id)arg2 requestData:(id)arg3;	// IMP=0x00000001000b6b04
- (void)createPairingLockSessionWithDevice:(id)arg1 passcode:(id)arg2;	// IMP=0x00000001000b66ac
- (void)disableKeyPairingForDeviceID:(id)arg1;	// IMP=0x00000001000b65f0
- (void)handleDisableMessageForLock:(id)arg1 fromDeviceID:(id)arg2;	// IMP=0x00000001000b6408
- (void)handleDisableMessageForKey:(id)arg1 fromDeviceID:(id)arg2;	// IMP=0x00000001000b609c
- (void)transport:(id)arg1 didReceiveDisableMessage:(id)arg2 fromDeviceID:(id)arg3;	// IMP=0x00000001000b5e28
- (void)sendDisableMessageToDeviceID:(id)arg1 pairingID:(id)arg2;	// IMP=0x00000001000b5b7c
- (_Bool)disablePairingForDeviceID:(id)arg1 pairingID:(id)arg2;	// IMP=0x00000001000b5a34
- (void)authPromptInfoWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000001000b599c
- (id)stringForState:(long long)arg1;	// IMP=0x00000001000b5944
- (void)autoUnlockStateWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000001000b5764
- (void)generateAppIconImageWithOptions:(unsigned int)arg1;	// IMP=0x00000001000b5760
- (void)decrementAttemptCount;	// IMP=0x00000001000b56b0
- (void)incrementAttemptCount;	// IMP=0x00000001000b54f0
- (void)cancelAutoUnlockWithCancelReason:(long long)arg1 usingTool:(_Bool)arg2;	// IMP=0x00000001000b54ec
- (void)cancelAutoUnlock;	// IMP=0x00000001000b54d8
- (void)invalidateAttempt;	// IMP=0x00000001000b51c0
- (void)attemptAutoUnlock;	// IMP=0x00000001000b3744
- (void)generateAttemptForType:(long long)arg1;	// IMP=0x00000001000b2eec
- (void)attemptAutoUnlockForType:(long long)arg1 externalACMContext:(id)arg2 preventRadarNotification:(_Bool)arg3 bundlePath:(id)arg4 appName:(id)arg5 reply:(CDUnknownBlockType)arg6;	// IMP=0x00000001000b2c18
- (void)attemptAutoUnlockForType:(long long)arg1 preventRadarNotification:(_Bool)arg2;	// IMP=0x00000001000b2bf8
- (void)attemptAutoUnlockForType:(long long)arg1;	// IMP=0x00000001000b2be8
- (void)disableAutoUnlockForDevice:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000b2958
- (void)cancelEnablingAutoUnlockForDeviceID:(id)arg1;	// IMP=0x00000001000b276c
- (void)cancelEnablingAutoUnlockForDevice:(id)arg1;	// IMP=0x00000001000b266c
- (void)cancelEnablingAllDevices;	// IMP=0x00000001000b2450
- (void)enableAutoUnlockWithDevice:(id)arg1 passcode:(id)arg2;	// IMP=0x00000001000b21b4
- (void)eligibleDevicesRequestFromBundleID:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000b19c0
- (void)repairCloudPairing;	// IMP=0x00000001000b18dc
- (void)notifyObserversOfUnlockFailureWithResults:(id)arg1 error:(id)arg2;	// IMP=0x00000001000b16b8
- (void)notifyObserversOfUnlockCompletionWithDevice:(id)arg1;	// IMP=0x00000001000b14dc
- (void)notifyObserverOfAttemptBeganWithDevice:(id)arg1;	// IMP=0x00000001000b1300
- (void)notifyObserverOfFailedToEnableDevice:(id)arg1 error:(id)arg2;	// IMP=0x00000001000b110c
- (void)notifyObserverOfEnabledDevice:(id)arg1;	// IMP=0x00000001000b0f30
- (void)notifyObserverOfKeyDeviceLockWithDevice:(id)arg1;	// IMP=0x00000001000b0d54
- (void)removeObserver:(id)arg1;	// IMP=0x00000001000b0ce8
- (void)addObserver:(id)arg1;	// IMP=0x00000001000b0c7c
- (void)addNotificationsObservers;	// IMP=0x00000001000b0b74
- (void)initializeAttemptState;	// IMP=0x00000001000b0b70
- (void)onqueue_start;	// IMP=0x00000001000b07dc
- (void)start;	// IMP=0x00000001000b0750
- (id)init;	// IMP=0x00000001000b05a8

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

