//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <LiveFS/LiveFSServiceMountPoint.h>

#import "NSFileProviderLiveItemImplementation-Protocol.h"

@class CSLiveFSVolume, LiveFSAppleDoubleManager, LiveFSRawDevice, NSMutableDictionary, NSObject, NSString, UserFSSleepManager, liveFSNode;
@protocol OS_dispatch_group, OS_dispatch_queue, OS_dispatch_source, OS_os_transaction;

__attribute__((visibility("hidden")))
@interface liveFSVolume : LiveFSServiceMountPoint <NSFileProviderLiveItemImplementation>
{
    NSMutableDictionary *mountFHtoNodeTable;	// 40 = 0x28
    NSMutableDictionary *mountNameToNodeCache;	// 48 = 0x30
    struct _opaque_pthread_rwlock_t mountNameToNodeCacheLock;	// 56 = 0x38
    _Atomic unsigned int ioQueuePausedCount;	// 256 = 0x100
    struct _opaque_pthread_rwlock_t searchRequestsRWLock;	// 264 = 0x108
    NSMutableDictionary *searchRequests;	// 464 = 0x1d0
    unsigned long long volCapFormat;	// 472 = 0x1d8
    unsigned long long volCapInterfaces;	// 480 = 0x1e0
    _Atomic int nextFileID;	// 488 = 0x1e8
    _Bool syncTimerNeeded;	// 492 = 0x1ec
    NSObject<OS_dispatch_source> *syncTimer;	// 496 = 0x1f0
    _Bool _allowSearch;	// 504 = 0x1f8
    _Bool _readOnly;	// 505 = 0x1f9
    _Bool _spotlightIsEnabled;	// 506 = 0x1fa
    int _volumeDeviceFD;	// 508 = 0x1fc
    LiveFSRawDevice *_volumeRawDevice;	// 512 = 0x200
    liveFSNode *_rootNode;	// 520 = 0x208
    NSString *_volumeName;	// 528 = 0x210
    NSString *_serialQueueName;	// 536 = 0x218
    NSString *_concurrentQueueName;	// 544 = 0x220
    NSObject<OS_dispatch_queue> *_metaDataRequests;	// 552 = 0x228
    NSObject<OS_dispatch_queue> *_IORequests;	// 560 = 0x230
    NSObject<OS_dispatch_queue> *_SearchRequests;	// 568 = 0x238
    NSObject<OS_dispatch_group> *_IOGroup;	// 576 = 0x240
    NSObject<OS_dispatch_group> *_searchGroup;	// 584 = 0x248
    LiveFSAppleDoubleManager *_appleDoubleManager;	// 592 = 0x250
    NSObject<OS_os_transaction> *_os_transaction;	// 600 = 0x258
    CSLiveFSVolume *_spotlightNotifer;	// 608 = 0x260
    UserFSSleepManager *_powerAssertManager;	// 616 = 0x268
}

+ (id)newMountServiceClient;	// IMP=0x0000000100015530
- (void).cxx_destruct;	// IMP=0x0000000100023f04
@property(retain) UserFSSleepManager *powerAssertManager; // @synthesize powerAssertManager=_powerAssertManager;
@property(retain) CSLiveFSVolume *spotlightNotifer; // @synthesize spotlightNotifer=_spotlightNotifer;
@property(retain) NSObject<OS_os_transaction> *os_transaction; // @synthesize os_transaction=_os_transaction;
@property _Bool spotlightIsEnabled; // @synthesize spotlightIsEnabled=_spotlightIsEnabled;
@property _Bool readOnly; // @synthesize readOnly=_readOnly;
@property(retain) LiveFSAppleDoubleManager *appleDoubleManager; // @synthesize appleDoubleManager=_appleDoubleManager;
@property _Bool allowSearch; // @synthesize allowSearch=_allowSearch;
@property(retain) NSObject<OS_dispatch_group> *searchGroup; // @synthesize searchGroup=_searchGroup;
@property(retain) NSObject<OS_dispatch_group> *IOGroup; // @synthesize IOGroup=_IOGroup;
@property(retain) NSObject<OS_dispatch_queue> *SearchRequests; // @synthesize SearchRequests=_SearchRequests;
@property(retain) NSObject<OS_dispatch_queue> *IORequests; // @synthesize IORequests=_IORequests;
@property(retain) NSObject<OS_dispatch_queue> *metaDataRequests; // @synthesize metaDataRequests=_metaDataRequests;
@property(retain) NSString *concurrentQueueName; // @synthesize concurrentQueueName=_concurrentQueueName;
@property(retain) NSString *serialQueueName; // @synthesize serialQueueName=_serialQueueName;
@property(retain) NSString *volumeName; // @synthesize volumeName=_volumeName;
@property(retain) liveFSNode *rootNode; // @synthesize rootNode=_rootNode;
@property int volumeDeviceFD; // @synthesize volumeDeviceFD=_volumeDeviceFD;
@property(retain) LiveFSRawDevice *volumeRawDevice; // @synthesize volumeRawDevice=_volumeRawDevice;
- (void)LIGetParentsAndAttributesForFileIDs:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x000000010002340c
- (void)LIVerifyExistenceWithFileIDs:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00000001000230dc
- (int)searchVolume:(id)arg1 withCriteria:(id)arg2 withSearchToken:(id)arg3 andWithResultsHandler:(id)arg4;	// IMP=0x000000010002063c
- (void)LICCinvalidateFileNodesForConnection:(unsigned long long)arg1;	// IMP=0x0000000100020298
- (void)LISetUpdateInterest:(id)arg1 interest:(_Bool)arg2 forClient:(unsigned long long)arg3 reply:(CDUnknownBlockType)arg4;	// IMP=0x000000010001ff08
- (void)LIReclaim:(id)arg1 forClient:(unsigned long long)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x000000010001fbb4
- (void)LIClose:(id)arg1 withMode:(int)arg2 forPID:(int)arg3 reply:(CDUnknownBlockType)arg4;	// IMP=0x000000010001f700
- (void)LIOpen:(id)arg1 withMode:(int)arg2 forPID:(int)arg3 reply:(CDUnknownBlockType)arg4;	// IMP=0x000000010001f5a8
- (void)LIAccessCheck:(id)arg1 requestedAccess:(unsigned int)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x000000010001f598
- (void)LISearchAbort:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x000000010001f4a4
- (void)LISearchAbortAllClientSearches:(unsigned long long)arg1;	// IMP=0x000000010001f38c
- (void)LISearchAbortAll;	// IMP=0x000000010001f2f4
- (void)LIDisableSearch;	// IMP=0x000000010001f2e4
- (void)LISearchReplenishCredits:(id)arg1 credits:(unsigned int)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x000000010001f20c
- (void)LISearch:(id)arg1 token:(id)arg2 criteria:(id)arg3 returnProxy:(id)arg4 withCallerID:(unsigned long long)arg5 reply:(CDUnknownBlockType)arg6;	// IMP=0x000000010001f024
- (void)LIListXattrs:(id)arg1 forPID:(int)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x000000010001e84c
- (void)LISetXattr:(id)arg1 name:(id)arg2 value:(id)arg3 how:(int)arg4 forPID:(int)arg5 reply:(CDUnknownBlockType)arg6;	// IMP=0x000000010001dbb0
- (void)LIGetXattr:(id)arg1 name:(id)arg2 forPID:(int)arg3 reply:(CDUnknownBlockType)arg4;	// IMP=0x000000010001d480
- (void)LISetFsAttr:(id)arg1 name:(id)arg2 value:(id)arg3 reply:(CDUnknownBlockType)arg4;	// IMP=0x000000010001d1d8
- (void)LIGetFsAttr:(id)arg1 name:(id)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x000000010001cfb8
- (void)LIPathConf:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x000000010001cea0
- (void)LIStatFS:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x000000010001cd88
- (void)LIReadDirAndAttrs:(id)arg1 intoBuffer:(id)arg2 forCookie:(unsigned long long)arg3 andVerifier:(unsigned long long)arg4 reply:(CDUnknownBlockType)arg5;	// IMP=0x000000010001cc50
- (void)LIReadDir:(id)arg1 intoBuffer:(id)arg2 forCookie:(unsigned long long)arg3 andVerifier:(unsigned long long)arg4 reply:(CDUnknownBlockType)arg5;	// IMP=0x000000010001c9e0
- (void)LIReadDirAndAttrs:(id)arg1 amount:(unsigned long long)arg2 forCookie:(unsigned long long)arg3 andVerifier:(unsigned long long)arg4 reply:(CDUnknownBlockType)arg5;	// IMP=0x000000010001c804
- (void)LIReadDir:(id)arg1 amount:(unsigned long long)arg2 forCookie:(unsigned long long)arg3 andVerifier:(unsigned long long)arg4 reply:(CDUnknownBlockType)arg5;	// IMP=0x000000010001c628
- (void)LIRename:(id)arg1 name:(id)arg2 toDir:(id)arg3 andName:(id)arg4 withFlags:(unsigned int)arg5 forPID:(int)arg6 reply:(CDUnknownBlockType)arg7;	// IMP=0x000000010001ba14
- (void)LIRemoveDir:(id)arg1 name:(id)arg2 forPID:(int)arg3 reply:(CDUnknownBlockType)arg4;	// IMP=0x000000010001b308
- (void)LIRemove:(id)arg1 name:(id)arg2 forPID:(int)arg3 reply:(CDUnknownBlockType)arg4;	// IMP=0x000000010001acd8
- (void)LIMakeClone:(id)arg1 named:(id)arg2 inDirectory:(id)arg3 withAttrs:(id)arg4 andFlags:(unsigned int)arg5 forPID:(int)arg6 andClient:(unsigned long long)arg7 reply:(CDUnknownBlockType)arg8;	// IMP=0x000000010001a900
- (void)LIMakeLink:(id)arg1 named:(id)arg2 inDirectory:(id)arg3 forPID:(int)arg4 andClient:(unsigned long long)arg5 reply:(CDUnknownBlockType)arg6;	// IMP=0x000000010001a49c
- (void)LIMakeSymLink:(id)arg1 named:(id)arg2 withContents:(id)arg3 andAttrs:(id)arg4 forPID:(int)arg5 andClient:(unsigned long long)arg6 reply:(CDUnknownBlockType)arg7;	// IMP=0x000000010001a1e0
- (void)LIMakeDir:(id)arg1 named:(id)arg2 withAttrs:(id)arg3 forPID:(int)arg4 andClient:(unsigned long long)arg5 reply:(CDUnknownBlockType)arg6;	// IMP=0x0000000100019e20
- (void)LICreate:(id)arg1 named:(id)arg2 withAttrs:(id)arg3 forPID:(int)arg4 andClient:(unsigned long long)arg5 reply:(CDUnknownBlockType)arg6;	// IMP=0x0000000100019a58
- (void)LIWrite:(id)arg1 atOffset:(unsigned long long)arg2 withBuffer:(id)arg3 reply:(CDUnknownBlockType)arg4;	// IMP=0x0000000100019798
- (void)LIWrite:(id)arg1 atOffset:(unsigned long long)arg2 withBuffer:(id)arg3 forPID:(int)arg4 reply:(CDUnknownBlockType)arg5;	// IMP=0x000000010001971c
- (void)LIRead:(id)arg1 atOffset:(unsigned long long)arg2 withBuffer:(id)arg3 reply:(CDUnknownBlockType)arg4;	// IMP=0x000000010001940c
- (void)LIRead:(id)arg1 length:(unsigned long long)arg2 atOffset:(unsigned long long)arg3 reply:(CDUnknownBlockType)arg4;	// IMP=0x0000000100019230
- (void)LIRead:(id)arg1 length:(unsigned long long)arg2 atOffset:(unsigned long long)arg3 forPID:(int)arg4 reply:(CDUnknownBlockType)arg5;	// IMP=0x00000001000191c8
- (void)LIRead:(id)arg1 atOffset:(unsigned long long)arg2 withBuffer:(id)arg3 forPID:(int)arg4 reply:(CDUnknownBlockType)arg5;	// IMP=0x000000010001914c
- (void)LIReadLink:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0000000100018f50
- (void)LILookup:(id)arg1 name:(id)arg2 forClient:(unsigned long long)arg3 reply:(CDUnknownBlockType)arg4;	// IMP=0x0000000100018c3c
- (void)LISetAttr:(id)arg1 setAttrs:(id)arg2 forPID:(int)arg3 reply:(CDUnknownBlockType)arg4;	// IMP=0x0000000100018868
- (void)LIGetAttr:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00000001000186d0
- (void)LIGetRootFileHandleForClient:(unsigned long long)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0000000100018658
- (void)LIGetDomainAttributes:(CDUnknownBlockType)arg1;	// IMP=0x0000000100018640
- (void)startSyncerIfNeeded;	// IMP=0x0000000100018450
- (char *)pathStringForNode:(id)arg1 name:(id)arg2 buffer:(char *)arg3 bufferSize:(unsigned long long)arg4 outLength:(unsigned long long *)arg5;	// IMP=0x00000001000181bc
- (unsigned long long)getNextObjectIdentifier;	// IMP=0x0000000100018198
- (_Bool)isCaseSensitive;	// IMP=0x0000000100018180
- (_Bool)supportsHardLinks;	// IMP=0x000000010001816c
- (_Bool)supportsPersistentObjectIdentifier;	// IMP=0x0000000100018158
- (id)lookupWithParent:(id)arg1 andName:(id)arg2;	// IMP=0x0000000100018048
- (void)removeFromNameCache:(id)arg1 withParent:(id)arg2 withName:(id)arg3;	// IMP=0x0000000100017cf0
- (void)removeFromNameCache:(id)arg1 withParent:(id)arg2;	// IMP=0x0000000100017c60
- (void)insertIntoNameCache:(id)arg1 withParent:(id)arg2 withName:(id)arg3;	// IMP=0x0000000100017b48
- (void)insertIntoNameCache:(id)arg1 withParent:(id)arg2;	// IMP=0x0000000100017ab8
- (id)getNodeForFH:(id)arg1 withError:(int *)arg2;	// IMP=0x00000001000179d4
- (void)removeFromFHCache:(id)arg1;	// IMP=0x00000001000178f8
- (void)insertIntoFHCache:(id)arg1;	// IMP=0x0000000100017830
- (void)resumeIOQueue;	// IMP=0x00000001000177c8
- (_Bool)pauseIOQueue;	// IMP=0x00000001000176d8
- (_Bool)isDCIM;	// IMP=0x0000000100016ce8
- (void)createAppleDoubleManagerIfNeeded;	// IMP=0x0000000100016c10
- (void)dealloc;	// IMP=0x0000000100016bc0
- (void)unmount:(unsigned int)arg1;	// IMP=0x00000001000168dc
- (void)purgeMappingTables;	// IMP=0x00000001000168a8
- (_Bool)getNodeFromFileID:(unsigned long long)arg1 outNode:(id *)arg2;	// IMP=0x00000001000166bc
- (void)purgeFHToNodeTable;	// IMP=0x0000000100016458
- (void)purgeNameToFHTable;	// IMP=0x00000001000163cc
- (void)unregisterWithLiveFSService:(unsigned int)arg1;	// IMP=0x0000000100016194
- (id)unregisterWithMounterService:(unsigned int)arg1;	// IMP=0x0000000100016050
- (id)registerSpotlightNotifer;	// IMP=0x0000000100015fb0
- (id)initWithDevice:(id)arg1 volumeName:(id)arg2 UVFSRootNode:(void *)arg3 andError:(id *)arg4;	// IMP=0x0000000100015810
- (id)init;	// IMP=0x000000010001554c

@end

