//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "tGraphDataSource-Protocol.h"

@class AWDServerConnection, AggDThermalMonitor, ArcController, CameraTS, ContextualClampController, LifetimeServoController, NSArray, NSDictionary, NSMutableArray, NSUserDefaults, TableDrivenDecisionTree;
@protocol OS_dispatch_queue;

@interface CommonProduct : NSObject <tGraphDataSource>
{
    AggDThermalMonitor *aggdTM;	// 8 = 0x8
    _Bool thermalTrap;	// 16 = 0x10
    NSMutableArray *listofComponentControl;	// 24 = 0x18
    NSMutableArray *listOfSupervisorControl;	// 32 = 0x20
    int calibrationResistorSensor;	// 40 = 0x28
    int calibrationResistorTempDefault;	// 44 = 0x2c
    unsigned int requiredCalibrationResistorSamples;	// 48 = 0x30
    TableDrivenDecisionTree *decisionTree;	// 56 = 0x38
    int thermalState;	// 64 = 0x40
    unsigned long long componentThermalStatusLevel;	// 72 = 0x48
    unsigned long long previousOSThermalNotificationLevel;	// 80 = 0x50
    long long thermalPressureLevel;	// 88 = 0x58
    long long previousThermalPressureLevel;	// 96 = 0x60
    int moderatePressureToLevelVersion;	// 104 = 0x68
    CameraTS *camSensor;	// 112 = 0x70
    _Bool canForceThermalLevels;	// 120 = 0x78
    _Bool usesFastDieTempControl;	// 121 = 0x79
    _Bool suppressesTrapSubCountLogging;	// 122 = 0x7a
    _Bool needsAppleConnectThermalTrapLogging;	// 123 = 0x7b
    _Bool sendMaxTemp;	// 124 = 0x7c
    int tsfdIndex;	// 128 = 0x80
    _Bool _blendStillNeeded;	// 132 = 0x84
    _Bool _haveUsedDeferral;	// 133 = 0x85
    int baseVT[30];	// 136 = 0x88
    int _forcedThermalLevelLower;	// 256 = 0x100
    int _forcedThermalLevelUpper;	// 260 = 0x104
    LifetimeServoController *lifetimeServoController;	// 264 = 0x108
    ContextualClampController *contextualClampController;	// 272 = 0x110
    ArcController *_arcController;	// 280 = 0x118
    AWDServerConnection *awdConnection;	// 288 = 0x120
    NSDictionary *simulatedThermalMitigationLimits;	// 296 = 0x128
    NSDictionary *simulatedLowTempMitigationLimits;	// 304 = 0x130
    NSArray *_maximumDieTempSensorIndexSet;	// 312 = 0x138
    NSArray *_averageDieTempSensorIndexSet;	// 320 = 0x140
    NSArray *_filteredAverageDieTempSensorIndexSet;	// 328 = 0x148
    int _totalSensorCount;	// 336 = 0x150
    int _powerSensorCount;	// 340 = 0x154
    unsigned long long _PMUtcalAdjustMask;	// 344 = 0x158
    _Bool _reducedRateModeActive;	// 352 = 0x160
    _Bool _skipRegularAggdCountUpdate;	// 353 = 0x161
    _Bool _isBackLightOn;	// 354 = 0x162
    _Bool _isCPMSMitigationEnabled;	// 355 = 0x163
    int _displayToken;	// 356 = 0x164
    int _chargerToken;	// 360 = 0x168
    int _chargerState;	// 364 = 0x16c
    NSObject<OS_dispatch_queue> *_thermalQueue;	// 368 = 0x170
    NSUserDefaults *_defaults;	// 376 = 0x178
}

@property(nonatomic) _Bool isCPMSMitigationEnabled; // @synthesize isCPMSMitigationEnabled=_isCPMSMitigationEnabled;
@property(retain, nonatomic) NSUserDefaults *defaults; // @synthesize defaults=_defaults;
@property(readonly, nonatomic) long long thermalPressureLevel; // @synthesize thermalPressureLevel;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *thermalQueue; // @synthesize thermalQueue=_thermalQueue;
@property(nonatomic) int chargerState; // @synthesize chargerState=_chargerState;
@property(nonatomic) int chargerToken; // @synthesize chargerToken=_chargerToken;
@property(nonatomic) int displayToken; // @synthesize displayToken=_displayToken;
@property(nonatomic) _Bool isBackLightOn; // @synthesize isBackLightOn=_isBackLightOn;
@property(nonatomic) int thermalState; // @synthesize thermalState;
@property(readonly, nonatomic) NSMutableArray *listOfSupervisorControl; // @synthesize listOfSupervisorControl;
@property(readonly, nonatomic) NSMutableArray *listofComponentControl; // @synthesize listofComponentControl;
@property(nonatomic) unsigned long long componentThermalStatusLevel; // @synthesize componentThermalStatusLevel;
@property(readonly, nonatomic) unsigned int requiredCalibrationResistorSamples; // @synthesize requiredCalibrationResistorSamples;
@property(readonly, nonatomic) int calibrationResistorTempDefault; // @synthesize calibrationResistorTempDefault;
@property(readonly, nonatomic) int calibrationResistorSensor; // @synthesize calibrationResistorSensor;
- (struct __CFString *)copyFieldCurrentValueForIndex:(int)arg1;	// IMP=0x000000010004ea4c
- (struct __CFString *)copyHeaderForIndex:(int)arg1;	// IMP=0x000000010004e9d0
- (int)numberOfFields;	// IMP=0x000000010004e9c8
- (void)canaryModeExitEarly:(int)arg1;	// IMP=0x000000010004e9c4
- (int)canaryTempThreshold;	// IMP=0x000000010004e9bc
- (int)canaryTempSensorIndex;	// IMP=0x000000010004e9b4
- (int)desiredLoopInterval;	// IMP=0x000000010004e9a8
- (void)suppressStandardBehaviors;	// IMP=0x000000010004e9a4
- (_Bool)shouldSuppressStandardBehaviors:(struct __CFDictionary *)arg1;	// IMP=0x000000010004e6a0
- (_Bool)canSystemSleep;	// IMP=0x000000010004e698
- (void)updateSystemPowerState:(_Bool)arg1;	// IMP=0x000000010004e628
- (void)replaceOrAppendHotspotEntry:(struct __CFDictionary *)arg1 existingHotspots:(struct __CFArray *)arg2;	// IMP=0x000000010004e548
- (struct __CFArray *)copyHotspotsArray:(id)arg1;	// IMP=0x000000010004e504
- (int)sensorIndexFromList:(struct __CFArray *)arg1 fourCharCode:(struct __CFString *)arg2;	// IMP=0x000000010004e46c
- (int)getModeratePressureVersion;	// IMP=0x000000010004e464
- (_Bool)getPotentialForcedThermalPressureLevel;	// IMP=0x000000010004e344
- (unsigned long long)getPotentialForcedThermalLevel:(unsigned long long)arg1;	// IMP=0x000000010004e1c8
- (_Bool)useTcalAdjust:(unsigned int)arg1;	// IMP=0x000000010004e1b0
- (void)updateTrapTargetFor:(int)arg1:(unsigned int)arg2;	// IMP=0x000000010004e160
- (void)updateSleepTargetFor:(int)arg1:(unsigned int)arg2;	// IMP=0x000000010004e110
- (void)updateMaxLIFor:(int)arg1:(unsigned int)arg2;	// IMP=0x000000010004e090
- (void)removeHotspotTargetOverrides;	// IMP=0x000000010004df8c
- (void)updateHotSpotPIDTargetFor:(int)arg1:(unsigned int)arg2;	// IMP=0x000000010004df4c
- (void)updateControlEffortFor:(int)arg1:(unsigned int)arg2;	// IMP=0x000000010004de8c
- (void)overrideArcParam:(id)arg1 value:(int)arg2;	// IMP=0x000000010004de7c
- (int)arcVirtualTemperature;	// IMP=0x000000010004de74
- (int)arcModuleTemperature;	// IMP=0x000000010004de6c
- (int)gasGaugeBatteryTemperature;	// IMP=0x000000010004de64
- (int)thermalSensorValuesMaxFromIndexSet:(id)arg1;	// IMP=0x000000010004dd2c
- (int)dieTempFilteredMaxAverage;	// IMP=0x000000010004dd10
- (int)dieTempMaxAverage;	// IMP=0x000000010004dd00
- (int)dieTempMaxMax;	// IMP=0x000000010004dcf0
- (void)updateContextualClamp;	// IMP=0x000000010004dcd8
- (void)overrideLifetimeServoParam:(id)arg1 value:(int)arg2;	// IMP=0x000000010004dcc0
- (void)updateLifetimeServo;	// IMP=0x000000010004dc50
- (void)updateCoreAnalyticsInfo;	// IMP=0x000000010004dc4c
- (void)updateAggdInfo;	// IMP=0x000000010004dc48
- (id)getGridY;	// IMP=0x000000010004dc04
- (id)getGridX;	// IMP=0x000000010004dbc0
- (void)setup2DGridDisplayDriver;	// IMP=0x000000010004d98c
- (void)send2DGridTempsToDisplayDriver:(int *)arg1;	// IMP=0x000000010004d7d4
- (void)sendMaxTempToDisplayDriver:(int)arg1;	// IMP=0x000000010004d634
- (void)updateDisplayDriver:(_Bool)arg1;	// IMP=0x000000010004d25c
- (void)writeAllCornerTemperatures:(int)arg1;	// IMP=0x000000010004d11c
- (int)getFrontDisplayCenterTemperature;	// IMP=0x000000010004d114
- (void)updatePowerzoneTelemetry;	// IMP=0x000000010004d0e8
- (int)computeMaxCGTemp;	// IMP=0x000000010004d0a4
- (int *)compute2DGridTemps;	// IMP=0x000000010004d060
- (void)updateAllThermalLoad:(_Bool)arg1;	// IMP=0x000000010004d020
- (void)tryTakeAction;	// IMP=0x000000010004cee0
- (int)powerSensors;	// IMP=0x000000010004ced8
- (int)totalSensors;	// IMP=0x000000010004ced0
- (void)probeAllSupervisorControlLoadingIndex;	// IMP=0x000000010004ce98
- (_Bool)isInternalInstall;	// IMP=0x000000010004ce34
- (int)maxControlEffort;	// IMP=0x000000010004cd10
- (unsigned long long)getMaxSensorValue;	// IMP=0x000000010004cbb8
- (int)getHighestSkinTemp;	// IMP=0x000000010004ca94
- (struct iir_filter_t *)getFilterValues;	// IMP=0x000000010004ca68
- (_Bool)isSendingMaxTempToDisplayDriverEnabled;	// IMP=0x000000010004ca60
- (void)enableSendingMaxTempToDisplayDriver;	// IMP=0x000000010004ca54
- (id)newBacklightComponentController:(struct __CFDictionary *)arg1;	// IMP=0x000000010004ca20
- (int)getCurrentMaxLIForComponent:(unsigned int)arg1;	// IMP=0x000000010004c9fc
- (void)getAllComponentID:(struct __SCPreferences *)arg1;	// IMP=0x000000010004c7f4
- (id)findComponent:(int)arg1;	// IMP=0x000000010004c624
- (void)logTrapEntryForAC:(id)arg1;	// IMP=0x000000010004c5b8
- (void)evaluteMitigationMaxLoadingIndex;	// IMP=0x000000010004c374
- (void)createConnectionToCT;	// IMP=0x000000010004c34c
- (void)clearLoadingIndexOverrides;	// IMP=0x000000010004c244
- (void)clearControlEffortOverrides;	// IMP=0x000000010004c098
- (void)registerChargerNotification;	// IMP=0x000000010004be5c
- (void)registerDisplayNotification;	// IMP=0x000000010004bd38
- (void)pushChargerTypeToAWD:(int)arg1;	// IMP=0x000000010004bcd8
- (int)getChargerState;	// IMP=0x000000010004bcd0
- (_Bool)mitigationsFullyReleased;	// IMP=0x000000010004bbb8
- (_Bool)fourCharCodeNeedsPMUtcal:(struct __CFString *)arg1;	// IMP=0x000000010004bb04
- (_Bool)fourCharCodeMatchesDieTempType:(BOOL)arg1 fourCharCode:(struct __CFString *)arg2;	// IMP=0x000000010004ba28
- (id)copyDieTempSensorIndexSetForFourthChar:(BOOL)arg1 sensors:(struct __CFArray *)arg2;	// IMP=0x000000010004b8f0
- (void)dealloc;	// IMP=0x000000010004b85c
- (void)putDeviceInLowTempSimulationMode:(id)arg1;	// IMP=0x000000010004b640
- (void)putDeviceInThermalSimulationMode:(id)arg1;	// IMP=0x000000010004b3e8
- (void)thermalUpdatesToWatchdogEnabled:(id)arg1;	// IMP=0x000000010004b2a4
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;	// IMP=0x000000010004b120
- (void)setHiPFeatureEnabled:(_Bool)arg1;	// IMP=0x000000010004b110
- (void)removeLightPressureOverride;	// IMP=0x000000010004b0f4
- (void)simulateLightThermalPressure;	// IMP=0x000000010004b0ac
- (void)registerDefaultsDomain;	// IMP=0x000000010004affc
- (id)initProduct:(id)arg1;	// IMP=0x00000001000499ac

@end

