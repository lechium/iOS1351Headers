//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class LiveFSXattrCache, NSData, NSLock, NSMutableDictionary, NSString, dirEnumerator, fileRef, smbMount;
@protocol OS_dispatch_queue;

@interface smbNode : NSObject
{
    struct smbfattr fattr;	// 8 = 0x8
    unsigned int fa_max_access;	// 248 = 0xf8
    _Bool fa_max_access_valid;	// 252 = 0xfc
    struct timespec attrTime;	// 256 = 0x100
    struct timespec maxAccessTime;	// 272 = 0x110
    NSData *attrDataCache;	// 288 = 0x120
    dirEnumerator *dirEnum;	// 296 = 0x128
    struct changeNotifyArgs changeNotifyArgs;	// 304 = 0x130
    _Bool _isRoot;	// 320 = 0x140
    unsigned int _np_flag;	// 324 = 0x144
    int _openFileRefs;	// 328 = 0x148
    int _wasWritten;	// 332 = 0x14c
    unsigned int _dirRefCount;	// 336 = 0x150
    NSObject<OS_dispatch_queue> *_fileRefSyncQueue;	// 344 = 0x158
    NSObject<OS_dispatch_queue> *_xattrIOQueue;	// 352 = 0x160
    NSLock *_metaLock;	// 360 = 0x168
    smbMount *_mp;	// 368 = 0x170
    smbNode *_parent;	// 376 = 0x178
    NSString *_name;	// 384 = 0x180
    NSString *_symlinkTargetStr;	// 392 = 0x188
    unsigned long long _symlinkTargetLen;	// 400 = 0x190
    NSString *_fh;	// 408 = 0x198
    fileRef *_Read_fileRef;	// 416 = 0x1a0
    fileRef *_ReadWrite_fileRef;	// 424 = 0x1a8
    fileRef *_Write_fileRef;	// 432 = 0x1b0
    NSMutableDictionary *_filerefCache;	// 440 = 0x1b8
    LiveFSXattrCache *_xattrCache;	// 448 = 0x1c0
    unsigned long long _inUseClientSet;	// 456 = 0x1c8
    unsigned long long _interestedClients;	// 464 = 0x1d0
    fileRef *_changeNotifyFileRef;	// 472 = 0x1d8
    struct timespec _symlinkRefreshTime;	// 480 = 0x1e0
}

+ (id)fileHandleForIno:(unsigned long long)arg1;	// IMP=0x0000000100032f50
+ (unsigned int)getAttrTimeout:(struct timespec)arg1 lastModified:(struct timespec)arg2;	// IMP=0x0000000100032bd4
- (void).cxx_destruct;	// IMP=0x0000000100036e9c
@property unsigned int dirRefCount; // @synthesize dirRefCount=_dirRefCount;
@property(retain) fileRef *changeNotifyFileRef; // @synthesize changeNotifyFileRef=_changeNotifyFileRef;
@property int wasWritten; // @synthesize wasWritten=_wasWritten;
@property int openFileRefs; // @synthesize openFileRefs=_openFileRefs;
@property unsigned long long interestedClients; // @synthesize interestedClients=_interestedClients;
@property unsigned long long inUseClientSet; // @synthesize inUseClientSet=_inUseClientSet;
@property(retain) LiveFSXattrCache *xattrCache; // @synthesize xattrCache=_xattrCache;
@property(retain) NSMutableDictionary *filerefCache; // @synthesize filerefCache=_filerefCache;
@property(retain) fileRef *Write_fileRef; // @synthesize Write_fileRef=_Write_fileRef;
@property(retain) fileRef *ReadWrite_fileRef; // @synthesize ReadWrite_fileRef=_ReadWrite_fileRef;
@property(retain) fileRef *Read_fileRef; // @synthesize Read_fileRef=_Read_fileRef;
@property(retain) NSString *fh; // @synthesize fh=_fh;
@property(readonly) unsigned int np_flag; // @synthesize np_flag=_np_flag;
@property(readonly) struct timespec symlinkRefreshTime; // @synthesize symlinkRefreshTime=_symlinkRefreshTime;
@property(readonly) unsigned long long symlinkTargetLen; // @synthesize symlinkTargetLen=_symlinkTargetLen;
@property(readonly) NSString *symlinkTargetStr; // @synthesize symlinkTargetStr=_symlinkTargetStr;
@property(readonly) _Bool isRoot; // @synthesize isRoot=_isRoot;
@property(copy) NSString *name; // @synthesize name=_name;
@property(retain) smbNode *parent; // @synthesize parent=_parent;
@property(retain) smbMount *mp; // @synthesize mp=_mp;
@property(readonly) NSLock *metaLock; // @synthesize metaLock=_metaLock;
@property(retain) NSObject<OS_dispatch_queue> *xattrIOQueue; // @synthesize xattrIOQueue=_xattrIOQueue;
@property(retain) NSObject<OS_dispatch_queue> *fileRefSyncQueue; // @synthesize fileRefSyncQueue=_fileRefSyncQueue;
- (void)dealloc;	// IMP=0x0000000100036c1c
- (_Bool)reopenChangeNotify:(CDUnknownBlockType)arg1;	// IMP=0x0000000100036698
- (void)clearChangeNotify:(_Bool)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000010003609c
- (void)addChangeNotify:(CDUnknownBlockType)arg1 NotifyHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000355b4
- (int)reopenFileRef:(id)arg1;	// IMP=0x00000001000352d4
- (int)reopenSharedRefs;	// IMP=0x0000000100034b18
- (int)reopenDenyModeRefs;	// IMP=0x000000010003435c
- (_Bool)reopenFileNodes;	// IMP=0x0000000100034248
- (_Bool)reopenFilesAfterReconnect;	// IMP=0x000000010003423c
- (void)prepareForReconnect;	// IMP=0x0000000100033de0
- (int)prepareForReclaimSync;	// IMP=0x0000000100033bc4
- (void)prepareForReclaim:(CDUnknownBlockType)arg1;	// IMP=0x0000000100033a40
- (void)closeAllFileRefs:(CDUnknownBlockType)arg1;	// IMP=0x0000000100033048
- (id)makeSillyDeleteName;	// IMP=0x0000000100032ffc
- (void)fetchAttrDataWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000100032d10
- (void)setMaxAccessAttr:(unsigned int)arg1;	// IMP=0x0000000100032cbc
- (_Bool)getMaxAccessAttr:(unsigned int *)arg1;	// IMP=0x0000000100032c08
- (id)getDirEnumerator:(int *)arg1;	// IMP=0x0000000100032b24
- (unsigned long long)getReadDirVerifier;	// IMP=0x00000001000329ec
- (void)refreshAttrsWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000100031e78
- (void)invalidateAttrs;	// IMP=0x0000000100031e3c
- (void)closeFileRefInternal:(id)arg1 CompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100031b50
- (void)closeFileRef:(int)arg1 withMode:(unsigned int)arg2 CompletionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000100030fb8
- (void)addNewFileRef:(id)arg1;	// IMP=0x0000000100030eb0
- (id)getNewFileRef:(int)arg1 withMode:(unsigned int)arg2;	// IMP=0x0000000100030de8
- (id)fileRefForWrite:(int)arg1;	// IMP=0x0000000100030d40
- (id)fileRefForRead:(int)arg1;	// IMP=0x0000000100030c98
- (id)findSharedFileRef:(int)arg1 andMode:(unsigned int)arg2;	// IMP=0x0000000100030b98
- (void)decDirRefCount;	// IMP=0x0000000100030b30
- (void)incDirRefCount;	// IMP=0x0000000100030aec
- (id)symlinkTargetCache;	// IMP=0x0000000100030a2c
- (void)setReparseSymLink:(id)arg1;	// IMP=0x00000001000309a4
- (void)setWindowsSymLink:(id)arg1;	// IMP=0x000000010003091c
- (struct smbfattr *)getSmbFattr;	// IMP=0x0000000100030914
- (_Bool)isRevokedLocked;	// IMP=0x00000001000308fc
- (_Bool)isRevoked;	// IMP=0x00000001000308a8
- (_Bool)isViable;	// IMP=0x0000000100030854
- (void)setRevokedState:(_Bool)arg1;	// IMP=0x00000001000307f0
- (void)setZombieState:(_Bool)arg1;	// IMP=0x000000010003079c
- (_Bool)isZombie;	// IMP=0x0000000100030754
- (_Bool)isSymlink;	// IMP=0x0000000100030708
- (_Bool)isReg;	// IMP=0x00000001000306bc
- (_Bool)isDir;	// IMP=0x0000000100030670
- (void)unlockMeta;	// IMP=0x0000000100030660
- (void)lockMeta;	// IMP=0x0000000100030650
- (void)updateFileID;	// IMP=0x00000001000305c4
- (id)initWithName:(id)arg1 andParent:(id)arg2 andAttr:(struct smbfattr *)arg3;	// IMP=0x00000001000302d8

@end

