//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct LoudsTrie;

struct MatchingSpan {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    int _field4;
    int _field5;
};

struct NLCandidate;

struct NLModel;

struct Trie {
    struct scoped_ptr<marisa::grimoire::trie::LoudsTrie> trie_;
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *_field1;
                    unsigned long long _field2;
                    unsigned long long _field3;
                } _field1;
                struct __short {
                    char _field1[23];
                    struct {
                        unsigned char _field1;
                    } _field2;
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
};

struct scoped_ptr<marisa::grimoire::trie::LoudsTrie> {
    struct LoudsTrie *ptr_;
};

struct unique_ptr<nl::NLModel, std::__1::default_delete<nl::NLModel>> {
    struct __compressed_pair<nl::NLModel *, std::__1::default_delete<nl::NLModel>> {
        struct NLModel *__value_;
    } __ptr_;
};

struct vector<nl::NLCandidate, std::__1::allocator<nl::NLCandidate>> {
    struct NLCandidate *_field1;
    struct NLCandidate *_field2;
    struct __compressed_pair<nl::NLCandidate *, std::__1::allocator<nl::NLCandidate>> {
        struct NLCandidate *_field1;
    } _field3;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct vector<nl::NLCandidate, std::__1::allocator<nl::NLCandidate>> {
    struct NLCandidate *_field1;
    struct NLCandidate *_field2;
    struct __compressed_pair<nl::NLCandidate *, std::__1::allocator<nl::NLCandidate>> {
        struct NLCandidate *_field1;
    } _field3;
} vector_770e4a46;

