//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "ADRecordingInfoProviding-Protocol.h"
#import "ADSpeechCapturingDelegate-Protocol.h"
#import "ADVolumeServiceProviding-Protocol.h"
#import "AFAudioPowerUpdaterDelegate-Protocol.h"
#import "SiriCoreLocalSpeechRecognizerDelegate-Protocol.h"

@class ADSpeechCapturingContext, ADSpeechCompressor, ADSpeechLog, ADSpeechPlaybackSimulator, ADSpeechRecorder, ADVolumeService, AFAudioPowerUpdater, AFClientConfiguration, AFDictationOptions, NSArray, NSError, NSString, SiriCoreLocalSpeechRecognizer;
@protocol ADRecordingInfoProviding, ADSpeechCapturing, ADSpeechManagerDelegate, ADVolumeServiceProviding, OS_dispatch_queue, OS_dispatch_source;

@interface ADSpeechManager : NSObject <SiriCoreLocalSpeechRecognizerDelegate, ADSpeechCapturingDelegate, ADVolumeServiceProviding, ADRecordingInfoProviding, AFAudioPowerUpdaterDelegate>
{
    SiriCoreLocalSpeechRecognizer *_interactiveLocalSpeechRecognizer;	// 8 = 0x8
    NSString *_localSpeechRecognizerTask;	// 16 = 0x10
    NSObject<OS_dispatch_source> *_profileUpdateDelayTimer;	// 24 = 0x18
    NSObject<OS_dispatch_source> *_profileUpdateCoalescingTimer;	// 32 = 0x20
    NSObject<OS_dispatch_queue> *_queue;	// 40 = 0x28
    int _speechState;	// 48 = 0x30
    _Bool _shouldTalkToDelegate;	// 52 = 0x34
    long long _capturingMode;	// 56 = 0x38
    AFClientConfiguration *_clientConfiguration;	// 64 = 0x40
    ADSpeechCapturingContext *_capturingContext;	// 72 = 0x48
    NSError *_recordingError;	// 80 = 0x50
    id <ADSpeechManagerDelegate> _delegate;	// 88 = 0x58
    CDUnknownBlockType _recordStartedCompletion;	// 96 = 0x60
    CDUnknownBlockType _recordStoppedCompletion;	// 104 = 0x68
    _Bool _releasesAudioSessionWhenRecordingStopped;	// 112 = 0x70
    long long _prepareAudioSystemTransactionCount;	// 120 = 0x78
    _Bool _releasesAudioSessionWhenPrepareAudioSystemDone;	// 128 = 0x80
    ADSpeechLog *_speechLog;	// 136 = 0x88
    id <ADSpeechCapturing> _currentCapturing;	// 144 = 0x90
    ADSpeechRecorder *_speechRecorder;	// 152 = 0x98
    ADSpeechPlaybackSimulator *_playbackSimulator;	// 160 = 0xa0
    ADSpeechCompressor *_speechCompressor;	// 168 = 0xa8
    ADVolumeService *_volumeService;	// 176 = 0xb0
    id _context;	// 184 = 0xb8
    _Bool _isDriving;	// 192 = 0xc0
    NSString *_recordRoute;	// 200 = 0xc8
    NSString *_deviceIdentifier;	// 208 = 0xd0
    _Bool _hasFetchedSmartSiriVolume;	// 216 = 0xd8
    _Bool _hasUpdatedSiriOutputVolume;	// 217 = 0xd9
    _Bool _hasReceivedLastAudioBuffer;	// 218 = 0xda
    NSString *_primaryDictationLanguage;	// 224 = 0xe0
    NSArray *_dictationLanguages;	// 232 = 0xe8
    AFDictationOptions *_dictationOptions;	// 240 = 0xf0
    AFAudioPowerUpdater *_inputAudioPowerUpdater;	// 248 = 0xf8
    AFAudioPowerUpdater *_outputAudioPowerUpdater;	// 256 = 0x100
}

+ (id)_speechCodecError;	// IMP=0x00000001000b3a20
+ (id)_badStateError;	// IMP=0x00000001000b39f8
- (void).cxx_destruct;	// IMP=0x00000001000bf6d4
@property(readonly, nonatomic) AFAudioPowerUpdater *outputAudioPowerUpdater; // @synthesize outputAudioPowerUpdater=_outputAudioPowerUpdater;
@property(readonly, nonatomic) AFAudioPowerUpdater *inputAudioPowerUpdater; // @synthesize inputAudioPowerUpdater=_inputAudioPowerUpdater;
@property(nonatomic) _Bool isDriving; // @synthesize isDriving=_isDriving;
@property(retain, nonatomic) id context; // @synthesize context=_context;
@property(copy, nonatomic) AFDictationOptions *dictationOptions; // @synthesize dictationOptions=_dictationOptions;
@property(copy, nonatomic) NSArray *dictationLanguages; // @synthesize dictationLanguages=_dictationLanguages;
@property(copy, nonatomic) NSString *primaryDictationLanguage; // @synthesize primaryDictationLanguage=_primaryDictationLanguage;
- (void)_updateSiriOutputVolume:(_Bool)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000001000bf4a4
- (void)_fetchSmartSiriVolume:(_Bool)arg1;	// IMP=0x00000001000bf328
- (id)_volumeService;	// IMP=0x00000001000bf260
- (_Bool)_supportsVolumeService;	// IMP=0x00000001000bf22c
- (void)setEARLanguageDetectorSpeechRequestId:(id)arg1;	// IMP=0x00000001000bf13c
- (void)_addRecordStoppedCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000001000bf030
- (void)setEndpointerDelayedTrigger:(_Bool)arg1;	// IMP=0x00000001000bef88
- (void)setEndpointerThreshold:(double)arg1;	// IMP=0x00000001000beee0
- (void)updateSpeechSynthesisRecord:(id)arg1;	// IMP=0x00000001000bee10
@property(readonly, nonatomic) id <ADRecordingInfoProviding> recordingInfoProvider;
@property(readonly, nonatomic) id <ADVolumeServiceProviding> volumeServiceProvider;
- (void)_updateSpeechProfileForLanguage:(id)arg1;	// IMP=0x00000001000beae0
- (void)_requestSpeechProfileUpdateForLanguage:(id)arg1;	// IMP=0x00000001000be7cc
- (void)updateSpeechProfilesForReasons:(id)arg1;	// IMP=0x00000001000bde1c
- (void)sendSpeechCorrectionInfo:(id)arg1 interactionIdentifier:(id)arg2;	// IMP=0x00000001000bdd0c
- (void)cancelSpeechProfileUpdate;	// IMP=0x00000001000bdc78
- (void)getLastStartpointTimestampAndCurrentTime:(CDUnknownBlockType)arg1;	// IMP=0x00000001000bdba8
- (void)stopFingerprintingForSuccess:(_Bool)arg1;	// IMP=0x00000001000bdae4
- (void)updateSpeechOptions:(id)arg1;	// IMP=0x00000001000bda00
- (void)playRecordingStartAlert;	// IMP=0x00000001000bd964
- (void)enforcePreviousEndpointHint;	// IMP=0x00000001000bd8c8
- (void)updateEndpointHintForDuration:(double)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000001000bd7e4
- (void)updateOptionsAfterRecognitionForElapsedTime:(double)arg1 isFinal:(_Bool)arg2;	// IMP=0x00000001000bd764
- (void)updateServerEndpointFeatures:(id)arg1;	// IMP=0x00000001000bd694
- (void)suspendAutomaticEndpointingInRange:(struct AFTimeRange)arg1;	// IMP=0x00000001000bd5ec
- (void)setFingerprintWasRecognized;	// IMP=0x00000001000bd580
- (void)suppressAudioInterruptionEndedNotificationsAndEndSessionIfIdle:(CDUnknownBlockType)arg1;	// IMP=0x00000001000bd41c
- (_Bool)_endSessionIfIdle;	// IMP=0x00000001000bd2f4
- (void)_cancelRecordingIfNeededAndEndSessionWhenIdleWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000001000bccb8
- (void)endSession:(_Bool)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000001000bca9c
- (void)endSession;	// IMP=0x00000001000bc468
- (void)setSuppressAudioInterruptionEndedNotifications:(_Bool)arg1;	// IMP=0x00000001000bc3f0
- (void)_stopSpeechCaptureWithOptions:(id)arg1;	// IMP=0x00000001000bc014
- (void)stopSpeechCaptureIfFingerprintingOnlyWithOptions:(id)arg1;	// IMP=0x00000001000bbea0
- (void)stopSpeechCaptureWithOptions:(id)arg1;	// IMP=0x00000001000bbd18
- (void)cancelSpeechCaptureSuppressingAlert:(_Bool)arg1;	// IMP=0x00000001000bb870
- (void)startSpeechCaptureWithURL:(id)arg1 isNarrowBand:(_Bool)arg2 isDictation:(_Bool)arg3 sessionUUID:(id)arg4;	// IMP=0x00000001000bb404
- (void)addRecordedDictationAudioSampleData:(id)arg1;	// IMP=0x00000001000bb334
- (void)startRecordedDictationCaptureWithSessionUUID:(id)arg1 narrowband:(_Bool)arg2;	// IMP=0x00000001000bafdc
- (void)_startCaptureForMode:(long long)arg1 options:(id)arg2 context:(id)arg3;	// IMP=0x00000001000ba558
- (id)_startFixedPriorityCaptureForMode:(long long)arg1 options:(id)arg2 sessionUUID:(id)arg3;	// IMP=0x00000001000ba340
- (void)startAcousticIDCaptureWithOptions:(id)arg1 sessionUUID:(id)arg2;	// IMP=0x00000001000ba2e0
- (id)startSpeechCaptureForDictationWithOptions:(id)arg1 sessionUUID:(id)arg2 secureOfflineOnly:(_Bool)arg3;	// IMP=0x00000001000ba138
- (id)startSpeechCaptureForRequestWithOptions:(id)arg1 sessionUUID:(id)arg2 language:(id)arg3;	// IMP=0x00000001000b9fb0
- (_Bool)isStopped;	// IMP=0x00000001000b9f04
- (_Bool)isCapturing;	// IMP=0x00000001000b9e54
- (void)setClientConfiguration:(id)arg1;	// IMP=0x00000001000b9d6c
- (void)setDelegate:(id)arg1;	// IMP=0x00000001000b9cdc
- (void)prepareAudioSystemWithOptions:(id)arg1 setAudioSessionActiveOptions:(unsigned long long)arg2 setAudioSessionActiveReason:(long long)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x00000001000b8760
- (void)preheatWithOptions:(id)arg1;	// IMP=0x00000001000b8520
- (void)eagerlyInitializeAudioRecording;	// IMP=0x00000001000b84b4
- (void)localSpeechRecognizer:(id)arg1 didCompletionRecognitionWithStatistics:(id)arg2 error:(id)arg3;	// IMP=0x00000001000b81c4
- (void)localSpeechRecognizer:(id)arg1 didRecognizePackage:(id)arg2;	// IMP=0x00000001000b7f8c
- (void)localSpeechRecognizer:(id)arg1 didRecognizeRawEagerRecognitionCandidate:(id)arg2;	// IMP=0x00000001000b7e48
- (void)localSpeechRecognizer:(id)arg1 didProcessAudioDuration:(double)arg2;	// IMP=0x00000001000b7d8c
- (void)localSpeechRecognizer:(id)arg1 didRecognizeTokens:(id)arg2;	// IMP=0x00000001000b7b54
- (void)audioPowerUpdaterDidUpdate:(id)arg1 averagePower:(float)arg2 peakPower:(float)arg3;	// IMP=0x00000001000b7b38
- (id)_recordingInfo;	// IMP=0x00000001000b7ae4
- (id)getRecordingInfo;	// IMP=0x00000001000b79c8
- (void)getRecordingInfoUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x00000001000b78ec
- (void)getVolumeServiceUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x00000001000b7810
- (void)speechCapturingDidProvideConfidenceScores:(id)arg1 unknownUserScore:(long long)arg2 duration:(long long)arg3 version:(long long)arg4 thresholdingType:(id)arg5 assetVersion:(id)arg6;	// IMP=0x00000001000b7748
- (void)speechCapturing:(id)arg1 languageDetectorDidFail:(id)arg2;	// IMP=0x00000001000b76e8
- (void)speechCapturing:(id)arg1 didDetectLanguage:(id)arg2 confidenceScores:(id)arg3 isConfident:(_Bool)arg4;	// IMP=0x00000001000b7690
- (void)speechCapturing:(id)arg1 didSetAudioSessionActive:(_Bool)arg2;	// IMP=0x00000001000b7680
- (void)speechCapturing:(id)arg1 willSetAudioSessionActive:(_Bool)arg2;	// IMP=0x00000001000b7670
- (void)speechCapturingDidRequestUpdateSiriOutputVolume:(id)arg1;	// IMP=0x00000001000b7608
- (void)speechCapturingDidRequestShutdownUI:(id)arg1;	// IMP=0x00000001000b75fc
- (void)speechCapturingDidRequestQuickStop:(id)arg1;	// IMP=0x00000001000b75f0
- (void)speechCapturing:(id)arg1 performTwoShotPromptWithType:(long long)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00000001000b75dc
- (void)speechCapturing:(id)arg1 didDetectEndpointAtTime:(double)arg2;	// IMP=0x00000001000b75d0
- (void)speechCapturing:(id)arg1 didDetectStartpointAtTime:(double)arg2;	// IMP=0x00000001000b75c4
- (void)speechCapturing:(id)arg1 didFinishWritingAudioFile:(id)arg2 error:(id)arg3;	// IMP=0x00000001000b7574
- (void)speechCapturingDidDelayEndpointForMusic:(id)arg1;	// IMP=0x00000001000b7568
- (void)speechCapturingDidDetectMusic:(id)arg1;	// IMP=0x00000001000b755c
- (void)speechCapturing:(id)arg1 didReceiveFingerprint:(id)arg2 duration:(double)arg3;	// IMP=0x00000001000b754c
- (void)speechCapturingDidRecordPCMAudioData:(id)arg1;	// IMP=0x00000001000b74dc
- (void)speechCapturingDidRecordSpeechPackets:(id)arg1 atTimestamp:(double)arg2 totalPacketCount:(long long)arg3;	// IMP=0x00000001000b7458
- (void)speechCapturingDidStopRecordingWithError:(id)arg1 endpointMode:(long long)arg2 totalPacketCount:(long long)arg3 endpointerMetrics:(id)arg4;	// IMP=0x00000001000b7338
- (void)speechCapturingWillStopRecording;	// IMP=0x00000001000b7328
- (void)speechCapturingDidReceiveLastAudioBufferWithEndpointMode:(long long)arg1 totalPacketCount:(long long)arg2 endpointerMetrics:(id)arg3;	// IMP=0x00000001000b7264
- (void)speechCapturingDidUpdateRecordingInfo:(id)arg1;	// IMP=0x00000001000b71bc
- (void)speechCapturingDidStartRecordingSuccessfully:(_Bool)arg1 error:(id)arg2 withInfo:(id)arg3;	// IMP=0x00000001000b6898
- (void)_updateCapturingStateWithOptions:(id)arg1;	// IMP=0x00000001000b677c
- (void)_recordingStoppedWithError:(id)arg1 totalPacketCount:(long long)arg2 endpointMode:(long long)arg3 endpointerMetrics:(id)arg4;	// IMP=0x00000001000b64b8
- (void)_lastAudioBufferReceivedWithEndpointMode:(long long)arg1 totalPacketCount:(long long)arg2 endpointerMetrics:(id)arg3;	// IMP=0x00000001000b638c
- (void)_cancelRecordingWithError:(id)arg1 suppressAlert:(_Bool)arg2;	// IMP=0x00000001000b62fc
- (void)_tellDelegateDidDetectLanguage:(id)arg1 confidenceScores:(id)arg2 isConfident:(_Bool)arg3;	// IMP=0x00000001000b6270
- (void)_tellDelegateDidSetAudioSessionActive:(_Bool)arg1;	// IMP=0x00000001000b6224
- (void)_tellDelegateWillSetAudioSessionActive:(_Bool)arg1;	// IMP=0x00000001000b61d8
- (void)_tellDelegateShutdownUIWasRequested;	// IMP=0x00000001000b6168
- (void)_tellDelegateQuickStopWasRequested;	// IMP=0x00000001000b60f8
- (void)_tellDelegateToPerformTwoShotPromptWithType:(long long)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000001000b605c
- (void)_tellDelegateSpeechEndpointWasDetectedAtTime:(double)arg1;	// IMP=0x00000001000b5fdc
- (void)_tellDelegateSpeechStartpointWasDetectedAtTime:(double)arg1;	// IMP=0x00000001000b5f5c
- (void)_tellDelegateAudioFileDidFinish:(id)arg1 error:(id)arg2;	// IMP=0x00000001000b5eac
- (void)_tellDelegateAboutInputAveragePower:(float)arg1 peak:(float)arg2;	// IMP=0x00000001000b5e18
- (void)_tellDelegateEndpointWasDelayedForMusic;	// IMP=0x00000001000b5da0
- (void)_tellDelegateMusicWasDetected;	// IMP=0x00000001000b5d28
- (void)_tellDelegateAboutFingerprint:(id)arg1 duration:(double)arg2;	// IMP=0x00000001000b5c84
- (void)_tellDelegateAboutSpeechPackets:(id)arg1 atTimestamp:(double)arg2 count:(long long)arg3;	// IMP=0x00000001000b5bd8
- (void)_tellDelegateUpdateAudioInfo:(id)arg1;	// IMP=0x00000001000b5b40
- (void)_tellDelegateSpeechStartedWithRecordingInfo:(id)arg1;	// IMP=0x00000001000b5aa8
- (void)_tellDelegateSpeechWillBeginWithTimestamp:(double)arg1 isFromFile:(_Bool)arg2;	// IMP=0x00000001000b59a8
- (void)_tellDelegateSpeechRecognitionUpdateWillBegin;	// IMP=0x00000001000b592c
- (void)_tellDelegateSpeechShouldPreheatWithRecordingInfo:(id)arg1;	// IMP=0x00000001000b5894
- (void)_tellDelegateSpeechFinished;	// IMP=0x00000001000b57c4
- (void)_tellDelegateSpeechReceivedLastAudioBufferWithEndpointMode:(long long)arg1 totalPacketCount:(long long)arg2 endpointerMetrics:(id)arg3;	// IMP=0x00000001000b56ec
- (void)_tellDelegateSpeechFailedWithError:(id)arg1;	// IMP=0x00000001000b561c
- (void)_tellDelegateSpeechCanceled;	// IMP=0x00000001000b555c
- (void)_cleanUpDelegateInfo;	// IMP=0x00000001000b548c
- (void)resetLocalRecognizer;	// IMP=0x00000001000b53e4
- (void)cancelLocalRecognitionIfActive;	// IMP=0x00000001000b528c
- (_Bool)isLocallyRecognizingInSiriMiniMode;	// IMP=0x00000001000b51b4
- (_Bool)isLocallyRecognizingInDictationMode;	// IMP=0x00000001000b50e8
- (_Bool)isLocallyRecognizing;	// IMP=0x00000001000b503c
- (void)disableDESWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000001000b4f6c
- (void)getOfflineDictationStatusWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000001000b4e9c
- (id)_interactiveLocalSpeechRecognizer;	// IMP=0x00000001000b4d80
- (void)_fetchAssetsForLanaugeOrEnablementNotification:(id)arg1;	// IMP=0x00000001000b4b64
- (void)dictationSessionDidComplete;	// IMP=0x00000001000b4740
- (void)_releaseSession;	// IMP=0x00000001000b4558
- (void)_updateRecordRoute:(id)arg1 andDeviceIdentifier:(id)arg2;	// IMP=0x00000001000b4354
- (void)_updateSpeechState:(int)arg1;	// IMP=0x00000001000b4120
- (id)_currentSpeechCaptureSource;	// IMP=0x00000001000b4020
- (id)_speechCompressor;	// IMP=0x00000001000b3f00
- (id)_speechRecorder;	// IMP=0x00000001000b3dcc
- (void)dealloc;	// IMP=0x00000001000b3d54
- (id)init;	// IMP=0x00000001000b3a48

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

