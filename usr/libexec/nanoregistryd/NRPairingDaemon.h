//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <NanoRegistry/NRRegistryServer.h>

#import "CBCentralManagerDelegate-Protocol.h"
#import "CBScalablePipeManagerDelegate-Protocol.h"
#import "EPActiveDeviceAssertionFactoryObserver-Protocol.h"
#import "EPNanoRegistryStatusCodeElectionDelegate-Protocol.h"
#import "EPResourceOwnerDelegate-Protocol.h"
#import "NRExtensiblePairingDelegate-Protocol.h"
#import "NRKeychainSyncStatusManagerObserver-Protocol.h"
#import "NRLocalPropertyMonitorObserver-Protocol.h"
#import "NRPairingServicesDelegate-Protocol.h"
#import "NRRemoteObjectClassADelegate-Protocol.h"
#import "NRRemoteObjectClassCDelegate-Protocol.h"
#import "NRRemoteObjectClassDDelegate-Protocol.h"
#import "NRRemoteObjectCloudDelegate-Protocol.h"
#import "NRRemoteObjectDelegate-Protocol.h"
#import "NRSystemVersionRequestService-Protocol.h"
#import "NRTermsAcknowledgementRegistryService-Protocol.h"
#import "NRXPCPairingDelegate-Protocol.h"

@class CBCentralManager, DispatchTimer, EPKeymaster, EPNanoRegistryStatusCodeVote, EPScalablePipeManager, EPScalablePipeManagerManager, EPWatchPusher, MCProfileConnection, NRConnectivityPublisher, NRLocalPropertyMonitor, NRMutableDevice, NROSLogStateProvider, NROSTransaction, NRPairingProxy, NRPairingReport, NRPowerAssertionActivity, NRSimpleReferenceCounter, NSLock, NSMapTable, NSMutableArray, NSMutableDictionary, NSMutableSet, NSNumber, NSObject, NSString, NSUUID;
@protocol AbstractTimer, EPServiceRegistry, NSObject, OS_dispatch_queue, OS_dispatch_source;

@interface NRPairingDaemon : NRRegistryServer <NRLocalPropertyMonitorObserver, CBCentralManagerDelegate, NRKeychainSyncStatusManagerObserver, EPActiveDeviceAssertionFactoryObserver, NRRemoteObjectClassADelegate, NRRemoteObjectClassCDelegate, NRRemoteObjectClassDDelegate, NRRemoteObjectCloudDelegate, NRRemoteObjectDelegate, NRPairingServicesDelegate, EPResourceOwnerDelegate, EPNanoRegistryStatusCodeElectionDelegate, CBScalablePipeManagerDelegate, NRTermsAcknowledgementRegistryService, NRSystemVersionRequestService, NRExtensiblePairingDelegate, NRXPCPairingDelegate>
{
    _Bool _mirrorOfIsPaired;	// 8 = 0x8
    _Bool _sentPropertiesFlag;	// 9 = 0x9
    _Bool _initRemoteProperties;	// 10 = 0xa
    _Bool _healthKitLastChanceSyncInProgress;	// 11 = 0xb
    _Bool _bluetoothIsScanning;	// 12 = 0xc
    _Bool _mightNeedToKickOffPairedSyncAfterLaunch;	// 13 = 0xd
    _Bool _hasClassAFile;	// 14 = 0xe
    _Bool _idsConnectivityTimedOut;	// 15 = 0xf
    _Bool _alreadyRepairedTheSwitch;	// 16 = 0x10
    _Bool _pairingQueueIsSuspended;	// 17 = 0x11
    _Bool _pairingClientCrashMonitoringCachedValue;	// 18 = 0x12
    _Bool _isNotCachingCrashMonitoring;	// 19 = 0x13
    int _activeDeviceChipIDNotifyToken;	// 20 = 0x14
    struct os_unfair_lock_s _lastStatusCodeCacheLock;	// 24 = 0x18
    struct os_unfair_lock_s _pairingQueueWriteLock;	// 28 = 0x1c
    unsigned long long _lastStatusCodeCache;	// 32 = 0x20
    NRPairingProxy *_lastCaller;	// 40 = 0x28
    NSNumber *_chipIDOfActiveDevice;	// 48 = 0x30
    NRMutableDevice *_mirrorOfActiveDevice;	// 56 = 0x38
    NSUUID *_mirrorOfActiveDeviceID;	// 64 = 0x40
    long long _mirrorOfPairedDeviceCount;	// 72 = 0x48
    CBCentralManager *_central;	// 80 = 0x50
    NSString *_pairingClientPhase;	// 88 = 0x58
    id <EPServiceRegistry> _serviceRegistry;	// 96 = 0x60
    NRLocalPropertyMonitor *_localProperties;	// 104 = 0x68
    MCProfileConnection *_mcConnection;	// 112 = 0x70
    id <NSObject> _mcConnectionSettingsChangedNotificationToken;	// 120 = 0x78
    EPNanoRegistryStatusCodeVote *_readyStatusCodeVote;	// 128 = 0x80
    NSMutableArray *_bluetoothInitBlocks;	// 136 = 0x88
    NSLock *_bluetoothInitBlockLock;	// 144 = 0x90
    NSMutableDictionary *_bluetoothIDToPairingID;	// 152 = 0x98
    NSMutableSet *_bluetoothDiscoveryEventDedupe;	// 160 = 0xa0
    NROSTransaction *_discoveryTransaction;	// 168 = 0xa8
    long long _rssiValue;	// 176 = 0xb0
    id <AbstractTimer> _gizmoSetCompatibilityStateTimer;	// 184 = 0xb8
    NSNumber *_lastDaemonState;	// 192 = 0xc0
    NSUUID *_bluetoothIsScanningToMatchThisDeviceID;	// 200 = 0xc8
    NSObject<OS_dispatch_source> *_historyPurgeWorkingSetTimer;	// 208 = 0xd0
    NROSTransaction *_receivedPropertiesTransaction;	// 216 = 0xd8
    long long _receivedPropertiesTransactionRefCounter;	// 224 = 0xe0
    NSMutableSet *_outstandingBluetoothConnectRequests;	// 232 = 0xe8
    NSObject<OS_dispatch_queue> *_chipIDOfActiveDeviceQueue;	// 240 = 0xf0
    NRConnectivityPublisher *_connectivityPublisher;	// 248 = 0xf8
    EPKeymaster *_keymaster;	// 256 = 0x100
    NROSTransaction *_watchPusherTransaction;	// 264 = 0x108
    EPWatchPusher *_watchPusher;	// 272 = 0x110
    EPWatchPusher *_lastWatchPusher;	// 280 = 0x118
    EPScalablePipeManagerManager *_pusherPipeManager;	// 288 = 0x120
    EPScalablePipeManager *_pusherPipe;	// 296 = 0x128
    EPNanoRegistryStatusCodeVote *_migrationVote;	// 304 = 0x130
    NRPowerAssertionActivity *_migrationActivity;	// 312 = 0x138
    NSObject<OS_dispatch_queue> *_lastCallerQueue;	// 320 = 0x140
    NRSimpleReferenceCounter *_pairingClients;	// 328 = 0x148
    NRSimpleReferenceCounter *_pushingClients;	// 336 = 0x150
    long long _pushingReferenceCounter;	// 344 = 0x158
    NRSimpleReferenceCounter *_discoveringClients;	// 352 = 0x160
    NRSimpleReferenceCounter *_advertisingClients;	// 360 = 0x168
    NSMapTable *_assertionToAssertionInfo;	// 368 = 0x170
    NSMapTable *_clientProxyToAssertionInfo;	// 376 = 0x178
    NSMutableDictionary *_clientAssertionIDToAssertionInfo;	// 384 = 0x180
    NROSLogStateProvider *_dumper;	// 392 = 0x188
    id <AbstractTimer> _idsConnectivityTimer;	// 400 = 0x190
    NSUUID *_lastActivePairingIDThatFailed;	// 408 = 0x198
    NSMutableDictionary *_deviceDiscoveryTimestamps;	// 416 = 0x1a0
    long long _lastDiscoveryPurgeSeconds;	// 424 = 0x1a8
    NROSTransaction *_pairingClientCrashMonitoringTransaction;	// 432 = 0x1b0
    NRPairingProxy *_pairingClientCrashMonitoringProxy;	// 440 = 0x1b8
    NSObject<OS_dispatch_source> *_mcDebounceSource;	// 448 = 0x1c0
    DispatchTimer *_timerCompatibilityState;	// 456 = 0x1c8
}

+ (id)sharedInstance;	// IMP=0x000000010002e40c
+ (CDUnknownBlockType)countdown:(long long)arg1 toCompletion:(CDUnknownBlockType)arg2;	// IMP=0x0000000100026210
+ (void)debugDump:(id)arg1 public:(_Bool)arg2;	// IMP=0x0000000100025ad8
+ (void)updateActiveFlag:(_Bool)arg1;	// IMP=0x000000010001c85c
+ (Class)proxyClass;	// IMP=0x000000010001c850
- (void).cxx_destruct;	// IMP=0x0000000100045d20
@property(retain, nonatomic) DispatchTimer *timerCompatibilityState; // @synthesize timerCompatibilityState=_timerCompatibilityState;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *mcDebounceSource; // @synthesize mcDebounceSource=_mcDebounceSource;
@property(nonatomic) _Bool isNotCachingCrashMonitoring; // @synthesize isNotCachingCrashMonitoring=_isNotCachingCrashMonitoring;
@property(nonatomic) _Bool pairingClientCrashMonitoringCachedValue; // @synthesize pairingClientCrashMonitoringCachedValue=_pairingClientCrashMonitoringCachedValue;
@property(nonatomic) _Bool pairingQueueIsSuspended; // @synthesize pairingQueueIsSuspended=_pairingQueueIsSuspended;
@property(retain, nonatomic) NRPairingProxy *pairingClientCrashMonitoringProxy; // @synthesize pairingClientCrashMonitoringProxy=_pairingClientCrashMonitoringProxy;
@property(retain, nonatomic) NROSTransaction *pairingClientCrashMonitoringTransaction; // @synthesize pairingClientCrashMonitoringTransaction=_pairingClientCrashMonitoringTransaction;
@property(nonatomic) struct os_unfair_lock_s pairingQueueWriteLock; // @synthesize pairingQueueWriteLock=_pairingQueueWriteLock;
@property(nonatomic) struct os_unfair_lock_s lastStatusCodeCacheLock; // @synthesize lastStatusCodeCacheLock=_lastStatusCodeCacheLock;
@property(nonatomic) _Bool alreadyRepairedTheSwitch; // @synthesize alreadyRepairedTheSwitch=_alreadyRepairedTheSwitch;
@property(nonatomic) long long lastDiscoveryPurgeSeconds; // @synthesize lastDiscoveryPurgeSeconds=_lastDiscoveryPurgeSeconds;
@property(retain, nonatomic) NSMutableDictionary *deviceDiscoveryTimestamps; // @synthesize deviceDiscoveryTimestamps=_deviceDiscoveryTimestamps;
@property(retain, nonatomic) NSUUID *lastActivePairingIDThatFailed; // @synthesize lastActivePairingIDThatFailed=_lastActivePairingIDThatFailed;
@property(nonatomic) int activeDeviceChipIDNotifyToken; // @synthesize activeDeviceChipIDNotifyToken=_activeDeviceChipIDNotifyToken;
@property(retain, nonatomic) id <AbstractTimer> idsConnectivityTimer; // @synthesize idsConnectivityTimer=_idsConnectivityTimer;
@property(nonatomic) _Bool idsConnectivityTimedOut; // @synthesize idsConnectivityTimedOut=_idsConnectivityTimedOut;
@property(retain, nonatomic) NROSLogStateProvider *dumper; // @synthesize dumper=_dumper;
@property(retain, nonatomic) NSMutableDictionary *clientAssertionIDToAssertionInfo; // @synthesize clientAssertionIDToAssertionInfo=_clientAssertionIDToAssertionInfo;
@property(retain, nonatomic) NSMapTable *clientProxyToAssertionInfo; // @synthesize clientProxyToAssertionInfo=_clientProxyToAssertionInfo;
@property(retain, nonatomic) NSMapTable *assertionToAssertionInfo; // @synthesize assertionToAssertionInfo=_assertionToAssertionInfo;
@property(retain, nonatomic) NRSimpleReferenceCounter *advertisingClients; // @synthesize advertisingClients=_advertisingClients;
@property(retain, nonatomic) NRSimpleReferenceCounter *discoveringClients; // @synthesize discoveringClients=_discoveringClients;
@property(nonatomic) long long pushingReferenceCounter; // @synthesize pushingReferenceCounter=_pushingReferenceCounter;
@property(retain, nonatomic) NRSimpleReferenceCounter *pushingClients; // @synthesize pushingClients=_pushingClients;
@property(retain, nonatomic) NRSimpleReferenceCounter *pairingClients; // @synthesize pairingClients=_pairingClients;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *lastCallerQueue; // @synthesize lastCallerQueue=_lastCallerQueue;
@property(nonatomic) _Bool hasClassAFile; // @synthesize hasClassAFile=_hasClassAFile;
@property(nonatomic) _Bool mightNeedToKickOffPairedSyncAfterLaunch; // @synthesize mightNeedToKickOffPairedSyncAfterLaunch=_mightNeedToKickOffPairedSyncAfterLaunch;
@property(retain, nonatomic) NRPowerAssertionActivity *migrationActivity; // @synthesize migrationActivity=_migrationActivity;
@property(retain, nonatomic) EPNanoRegistryStatusCodeVote *migrationVote; // @synthesize migrationVote=_migrationVote;
@property(retain, nonatomic) EPScalablePipeManager *pusherPipe; // @synthesize pusherPipe=_pusherPipe;
@property(retain, nonatomic) EPScalablePipeManagerManager *pusherPipeManager; // @synthesize pusherPipeManager=_pusherPipeManager;
@property(retain, nonatomic) EPWatchPusher *lastWatchPusher; // @synthesize lastWatchPusher=_lastWatchPusher;
@property(retain, nonatomic) EPWatchPusher *watchPusher; // @synthesize watchPusher=_watchPusher;
@property(retain, nonatomic) NROSTransaction *watchPusherTransaction; // @synthesize watchPusherTransaction=_watchPusherTransaction;
@property(retain, nonatomic) EPKeymaster *keymaster; // @synthesize keymaster=_keymaster;
@property(retain, nonatomic) NRConnectivityPublisher *connectivityPublisher; // @synthesize connectivityPublisher=_connectivityPublisher;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *chipIDOfActiveDeviceQueue; // @synthesize chipIDOfActiveDeviceQueue=_chipIDOfActiveDeviceQueue;
@property(retain, nonatomic) NSMutableSet *outstandingBluetoothConnectRequests; // @synthesize outstandingBluetoothConnectRequests=_outstandingBluetoothConnectRequests;
@property(nonatomic) long long receivedPropertiesTransactionRefCounter; // @synthesize receivedPropertiesTransactionRefCounter=_receivedPropertiesTransactionRefCounter;
@property(retain, nonatomic) NROSTransaction *receivedPropertiesTransaction; // @synthesize receivedPropertiesTransaction=_receivedPropertiesTransaction;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *historyPurgeWorkingSetTimer; // @synthesize historyPurgeWorkingSetTimer=_historyPurgeWorkingSetTimer;
@property(retain, nonatomic) NSUUID *bluetoothIsScanningToMatchThisDeviceID; // @synthesize bluetoothIsScanningToMatchThisDeviceID=_bluetoothIsScanningToMatchThisDeviceID;
@property(nonatomic) _Bool bluetoothIsScanning; // @synthesize bluetoothIsScanning=_bluetoothIsScanning;
@property(retain, nonatomic) NSNumber *lastDaemonState; // @synthesize lastDaemonState=_lastDaemonState;
@property(nonatomic) _Bool healthKitLastChanceSyncInProgress; // @synthesize healthKitLastChanceSyncInProgress=_healthKitLastChanceSyncInProgress;
@property(retain, nonatomic) id <AbstractTimer> gizmoSetCompatibilityStateTimer; // @synthesize gizmoSetCompatibilityStateTimer=_gizmoSetCompatibilityStateTimer;
@property(nonatomic) long long rssiValue; // @synthesize rssiValue=_rssiValue;
@property(retain, nonatomic) NROSTransaction *discoveryTransaction; // @synthesize discoveryTransaction=_discoveryTransaction;
@property(retain, nonatomic) NSMutableSet *bluetoothDiscoveryEventDedupe; // @synthesize bluetoothDiscoveryEventDedupe=_bluetoothDiscoveryEventDedupe;
@property(retain, nonatomic) NSMutableDictionary *bluetoothIDToPairingID; // @synthesize bluetoothIDToPairingID=_bluetoothIDToPairingID;
@property(retain, nonatomic) NSLock *bluetoothInitBlockLock; // @synthesize bluetoothInitBlockLock=_bluetoothInitBlockLock;
@property(retain, nonatomic) NSMutableArray *bluetoothInitBlocks; // @synthesize bluetoothInitBlocks=_bluetoothInitBlocks;
@property(retain, nonatomic) EPNanoRegistryStatusCodeVote *readyStatusCodeVote; // @synthesize readyStatusCodeVote=_readyStatusCodeVote;
@property(nonatomic) _Bool initRemoteProperties; // @synthesize initRemoteProperties=_initRemoteProperties;
@property(retain, nonatomic) id <NSObject> mcConnectionSettingsChangedNotificationToken; // @synthesize mcConnectionSettingsChangedNotificationToken=_mcConnectionSettingsChangedNotificationToken;
@property(retain, nonatomic) MCProfileConnection *mcConnection; // @synthesize mcConnection=_mcConnection;
@property(retain, nonatomic) NRLocalPropertyMonitor *localProperties; // @synthesize localProperties=_localProperties;
@property(nonatomic) _Bool sentPropertiesFlag; // @synthesize sentPropertiesFlag=_sentPropertiesFlag;
@property(retain, nonatomic) id <EPServiceRegistry> serviceRegistry; // @synthesize serviceRegistry=_serviceRegistry;
@property(retain, nonatomic) NSString *pairingClientPhase; // @synthesize pairingClientPhase=_pairingClientPhase;
@property(retain, nonatomic) CBCentralManager *central; // @synthesize central=_central;
@property(readonly, nonatomic) long long mirrorOfPairedDeviceCount; // @synthesize mirrorOfPairedDeviceCount=_mirrorOfPairedDeviceCount;
- (void)sendVersionRequestToCompanion;	// IMP=0x000000010004549c
- (void)xpcIsAssertionActive:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;	// IMP=0x0000000100045400
- (void)xpcIsPhoneReadyToMigrateDevice:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;	// IMP=0x00000001000452f8
- (void)xpcSwitchActiveDeviceWithDeviceID:(id)arg1 isMagicSwitch:(_Bool)arg2 operationHasCompleted:(CDUnknownBlockType)arg3;	// IMP=0x0000000100045154
- (void)xpcTriggerVersion4Workaround;	// IMP=0x0000000100045150
- (void)xpcPairingShouldContinue;	// IMP=0x000000010004514c
- (id)activeDeviceAssertions;	// IMP=0x0000000100044d14
- (void)xpcActiveDeviceAssertions:(CDUnknownBlockType)arg1;	// IMP=0x0000000100044ca4
- (void)assertionDescription:(id)arg1;	// IMP=0x0000000100044b00
- (void)xpcFakePairedSyncIsCompleteWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000001000445ec
- (void)xpcFakePairedSyncStartWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000001000440e4
- (void)xpcClearRecoveryFlagWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0000000100044010
- (void)xpcCheckIfFlaggedForRecoveryWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0000000100043f3c
- (id)termsAcknowledgementServiceGetCloudObject;	// IMP=0x0000000100043efc
- (id)termsAcknowledgementServiceGetRemoteObject;	// IMP=0x0000000100043ebc
- (void)termsAcknowledgementServiceGetNRIDFromBTID:(id)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x0000000100043b80
- (void)termsAcknowledgementServiceGetDeviceMirrorFromDeviceID:(id)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x00000001000437f8
- (void)child:(id)arg1 didApplyDiff:(id)arg2;	// IMP=0x00000001000437f4
- (void)xpcGetInitialSyncCompletedForPairingID:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000001000437d8
- (void)xpcGetMigrationCountForPairingID:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000001000437bc
- (void)xpcGetLastSwitchIndex:(CDUnknownBlockType)arg1;	// IMP=0x00000001000437a0
- (void)xpcScanForMigratableWatchesWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000100043714
- (void)proxyRequestsResumptionOfCrashMonitoring:(id)arg1;	// IMP=0x0000000100043708
- (void)proxyRequestsSuspensionOfCrashMonitoring:(id)arg1;	// IMP=0x00000001000436fc
- (void)proxyWillInvalidateSwitchAssertion:(id)arg1;	// IMP=0x00000001000436f0
- (void)proxyWillTakeSwitchAssertion:(id)arg1;	// IMP=0x00000001000436e4
- (void)proxyWillEndAdvertising:(id)arg1;	// IMP=0x00000001000436cc
- (void)proxyWillBeginAdvertising:(id)arg1;	// IMP=0x00000001000436b4
- (void)proxyWillEndDiscovering:(id)arg1;	// IMP=0x000000010004369c
- (void)proxyWillBeginDiscovering:(id)arg1;	// IMP=0x0000000100043684
- (void)proxyWillEndPushing:(id)arg1;	// IMP=0x0000000100043678
- (void)proxyWillBeginPushing:(id)arg1;	// IMP=0x000000010004366c
- (void)proxyWillAbortPairing:(id)arg1;	// IMP=0x0000000100043660
- (void)proxyWillBeginUnpairing:(id)arg1;	// IMP=0x0000000100043654
- (void)proxyWillBeginPairing:(id)arg1;	// IMP=0x0000000100043648
- (_Bool)proxyIsSecureDataAvailable:(id)arg1;	// IMP=0x000000010004360c
- (void)updateNRMutableDeviceFromEPDevice:(id)arg1 withNRUUID:(id)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x0000000100043608
- (void)sendRemoteUnpairingDidBeginNotificationWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x00000001000432bc
- (void)savePairingReport;	// IMP=0x00000001000432b8
- (void)pushVersion4CompatibilityMessageIfNeeded;	// IMP=0x00000001000432b4
- (void)setPairingID:(id)arg1;	// IMP=0x00000001000432b0
- (void)pairingCompleted;	// IMP=0x00000001000432ac
- (void)deleteUnexpectedIDSPairedDevices;	// IMP=0x00000001000432a8
- (void)createLocalPairingStore:(id)arg1 andNotifyPairingBeginning:(_Bool)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x00000001000432a4
- (void)createDeviceFromPairingRequest:(id)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x00000001000432a0
- (void)activateDevice:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;	// IMP=0x000000010004329c
- (id)_pathToNanoRegistryStateDirectory;	// IMP=0x0000000100043294
- (void)_cleanUpDiscoveredDevicesWithCollection:(id)arg1;	// IMP=0x0000000100043290
- (void)getPairedPairingIDForBluetoothID:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0000000100042f10
- (void)idsConnectivityTimeout;	// IMP=0x0000000100042ee8
- (void)startIDSConnectivityTimeout;	// IMP=0x0000000100042dbc
- (void)resetIDSConnectivityTimeout;	// IMP=0x0000000100042d74
- (void)keychainSyncStatusDidChange:(_Bool)arg1;	// IMP=0x00000001000429e4
- (void)scalablePipeManager:(id)arg1 pipeDidDisconnect:(id)arg2 error:(id)arg3;	// IMP=0x00000001000429e0
- (void)scalablePipeManager:(id)arg1 pipeDidConnect:(id)arg2;	// IMP=0x00000001000429dc
- (void)scalablePipeManager:(id)arg1 didUnregisterEndpoint:(id)arg2;	// IMP=0x00000001000429d8
- (void)scalablePipeManager:(id)arg1 didRegisterEndpoint:(id)arg2 error:(id)arg3;	// IMP=0x00000001000429d4
- (void)scalablePipeManagerDidUpdateState:(id)arg1;	// IMP=0x00000001000429d0
- (void)xpcKeepPhoneUnlockedInternalTestSPI:(CDUnknownBlockType)arg1;	// IMP=0x00000001000429cc
- (void)xpcGetLastMigrationRequestPhoneNameWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0000000100042928
- (long long)maxPairingCompatibilityVersion;	// IMP=0x00000001000428d4
- (long long)minPairingCompatibilityVersion;	// IMP=0x0000000100042880
- (void)remoteObjectReceivedWatchMigrationCompletion:(unsigned long long)arg1;	// IMP=0x00000001000427b8
- (void)xpcBeginMigrationWithDeviceID:(id)arg1 passcode:(id)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x0000000100042604
- (void)xpcSwitchIndex:(CDUnknownBlockType)arg1;	// IMP=0x00000001000425d0
- (void)xpcRetrieveSecureProperties:(id)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x0000000100042568
- (void)xpcGetDiffSinceTokenValue:(unsigned long long)arg1 getSecureProperties:(_Bool)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x0000000100042534
- (void)xpcGetDeviceCollectionWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000100042500
- (void)xpcGetChangeHistoryWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x00000001000424cc
- (void)xpcClientInfo:(CDUnknownBlockType)arg1;	// IMP=0x0000000100042498
- (void)xpcApplyDiff:(id)arg1 withSecureProperties:(id)arg2 block:(CDUnknownBlockType)arg3;	// IMP=0x0000000100042414
- (void)xpcSetMigrationConsented:(_Bool)arg1 forDeviceID:(id)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x0000000100041fe4
- (void)xpcStopWatchSetupPushWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000100041f60
- (void)xpcStartWatchSetupPushWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000100041e00
- (void)stopPushing;	// IMP=0x0000000100041cc8
- (void)startPushing;	// IMP=0x0000000100041aec
- (void)xpcPutMigrationChallengeCharacteristicWriteData:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000001000419dc
- (void)xpcGetMigrationPairingCharacteristicReadDataWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x000000010004191c
- (_Bool)shouldCollectPairingPerfStackshots;	// IMP=0x00000001000418e4
- (void)xpcPingActiveGizmoWithPriority:(int)arg1 withMessageSize:(unsigned long long)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x00000001000416c8
- (void)remoteObject:(id)arg1 receivedMigratedAwayWithAdvertisedName:(id)arg2;	// IMP=0x0000000100040ff4
- (void)remoteObject:(id)arg1 receivedMigrationRequestWithShouldCancel:(_Bool)arg2 responseBlock:(CDUnknownBlockType)arg3;	// IMP=0x0000000100040eb4
- (void)resourceAvailabilityDidChange:(id)arg1;	// IMP=0x0000000100040528
- (void)assertionFactoryDidBecomeIdle:(id)arg1;	// IMP=0x0000000100040438
- (void)remoteObject:(id)arg1 receivedSystemVersionBroadcast:(id)arg2;	// IMP=0x0000000100040394
- (void)remoteObject:(id)arg1 receivedCheckTermsEvent:(id)arg2 fromIDSBTUUID:(id)arg3 responseBlock:(CDUnknownBlockType)arg4;	// IMP=0x00000001000402b0
- (void)remoteObject:(id)arg1 receivedAddTermsEvent:(id)arg2 fromIDSBTUUID:(id)arg3 responseBlock:(CDUnknownBlockType)arg4;	// IMP=0x00000001000401cc
- (void)remoteObject:(id)arg1 receivedPropertyRequestWithRequestIdentifier:(id)arg2 fromIDSBTUUID:(id)arg3;	// IMP=0x0000000100040110
- (void)remoteObject:(id)arg1 receivedPropertyChanges:(id)arg2 isAllProperties:(_Bool)arg3 fromIDSBTUUID:(id)arg4;	// IMP=0x000000010003fa94
- (id)_deviceFromIDSBTUUID:(id)arg1;	// IMP=0x000000010003f7cc
- (void)remoteObject:(id)arg1 receivedUnpairRequestWithAdvertisedName:(id)arg2 shouldObliterate:(_Bool)arg3 shouldBrick:(_Bool)arg4 shouldPreserveESim:(_Bool)arg5 withPairingFailureCode:(id)arg6 withAbortReason:(id)arg7 withRequestIdentifier:(id)arg8 fromIDSBTUUID:(id)arg9;	// IMP=0x000000010003eda8
- (void)_updatePairedDevicePropertiesFromIDSDevice:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000010003da44
- (void)presentWatchWasUpdatedAlertIfNeededForNewBuildVersion:(id)arg1 oldBuildVersion:(id)arg2;	// IMP=0x000000010003d850
- (void)_isIDSReady;	// IMP=0x000000010003d1b8
- (void)checkLaunchNotificationsSetup;	// IMP=0x000000010003cd9c
- (void)_notifyClients;	// IMP=0x000000010003cd4c
- (void)getPairedPairedPairingIDForBluetoothID:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000010003c9c4
- (void)remoteObjectIDSServiceUnavailable:(id)arg1;	// IMP=0x000000010003c9b8
- (void)remoteObjectDevicesChanged:(id)arg1;	// IMP=0x000000010003c890
- (void)remoteObjectIDSServiceAvailable:(id)arg1 withIDSDevice:(id)arg2;	// IMP=0x000000010003c7b8
- (void)remoteObject:(id)arg1 isConnected:(_Bool)arg2;	// IMP=0x000000010003c380
- (_Bool)_isIDSPairedAndConsistentWithIDSDevices:(id)arg1;	// IMP=0x000000010003c17c
- (void)getCanPairAnotherDeviceWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x000000010003bd50
- (void)xpcRetriggerUnpairInfoDialogWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x000000010003bccc
- (void)xpcResumePairingClientCrashMonitoring:(CDUnknownBlockType)arg1;	// IMP=0x000000010003bbcc
- (void)xpcSuspendPairingClientCrashMonitoring:(CDUnknownBlockType)arg1;	// IMP=0x000000010003bb04
- (void)xpcUnpairWithDeviceID:(id)arg1 withOptions:(id)arg2 operationHasBegun:(CDUnknownBlockType)arg3;	// IMP=0x000000010003b468
- (void)enterCompatibilityState:(unsigned short)arg1 withDeviceID:(id)arg2 withCompletion:(CDUnknownBlockType)arg3;	// IMP=0x000000010003b294
- (void)xpcEnterCompatibilityState:(unsigned short)arg1 withDeviceID:(id)arg2;	// IMP=0x000000010003b284
- (void)xpcNotifyPasscode:(id)arg1 withDeviceID:(id)arg2;	// IMP=0x000000010003b0f8
- (void)xpcNotifyActivationCompleted:(id)arg1 withSuccess:(_Bool)arg2;	// IMP=0x000000010003af84
- (void)abortPairingReason:(id)arg1 proxy:(id)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x000000010003acb0
- (void)xpcAbortPairingReason:(id)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x000000010003ac20
- (void)handleDeadPairingClient:(id)arg1;	// IMP=0x000000010003ab78
- (void)xpcGizmoPasscodeAdvertiseAndPairWithName:(id)arg1 operationHasBegun:(CDUnknownBlockType)arg2;	// IMP=0x000000010003a394
- (void)xpcBeginMigrationWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x000000010003a280
- (void)xpcBeginMigrationWithDeviceID:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0000000100039aec
- (void)xpcGizmoOOBAdvertiseAndPairWithName:(id)arg1 operationHasBegun:(CDUnknownBlockType)arg2;	// IMP=0x000000010003918c
- (void)clearMagicSwitchAdvertisingIdentifierSeedIfNeeded;	// IMP=0x0000000100038edc
- (void)xpcCompanionPasscodePairWithDeviceID:(id)arg1 withOptions:(id)arg2 operationHasBegun:(CDUnknownBlockType)arg3;	// IMP=0x0000000100037fb8
- (void)xpcCompanionOOBDiscoverAndPairWithName:(id)arg1 withOutOfBandPairingKey:(id)arg2 withOptions:(id)arg3 operationHasBegun:(CDUnknownBlockType)arg4;	// IMP=0x000000010003717c
- (void)xpcWaitForWatchPairingExtendedMetadataForAdvertisedName:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0000000100036510
- (void)checkAndDisableStandAloneMode;	// IMP=0x0000000100036254
- (long long)pairingVersionFromAdvertisedName:(id)arg1;	// IMP=0x00000001000361d8
- (void)xpcSwitchToSimulator:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;	// IMP=0x0000000100036178
- (void)xpcUnpairWithSimulator:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;	// IMP=0x0000000100036118
- (void)xpcPairWithSimulator:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;	// IMP=0x00000001000360b8
- (void)setUpClientReferenceCounters;	// IMP=0x0000000100035ae8
- (void)updateShouldMonitorProxy:(id)arg1;	// IMP=0x00000001000358e8
- (void)xpcServer:(id)arg1 proxyDidDisconnect:(id)arg2;	// IMP=0x0000000100035484
- (void)xpcServer:(id)arg1 proxyDidSuspend:(id)arg2;	// IMP=0x0000000100035360
- (void)xpcSubmitServerRequestReportWithRequestType:(id)arg1 duration:(double)arg2 errorCode:(unsigned int)arg3 block:(CDUnknownBlockType)arg4;	// IMP=0x00000001000350c0
- (void)centralManager:(id)arg1 didDiscoverPeripheral:(id)arg2 advertisementData:(id)arg3 RSSI:(id)arg4;	// IMP=0x0000000100035048
- (void)centralManagerDidUpdateState:(id)arg1;	// IMP=0x000000010003500c
- (void)updateFromBTState;	// IMP=0x0000000100034f00
- (void)updateFromBTState:(long long)arg1;	// IMP=0x0000000100034bf0
- (void)xpcPairingClientDidEnterPhase:(id)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x0000000100034acc
- (void)xpcSubmitAlbertPairingReport:(CDUnknownBlockType)arg1;	// IMP=0x00000001000348b0
- (id)localizedString:(id)arg1;	// IMP=0x00000001000347f4
- (_Bool)isDemoModeEnabled;	// IMP=0x00000001000347f0
- (void)updateTrafficClass;	// IMP=0x0000000100034524
- (id)getTrafficClassifiersForCompatibilityState:(unsigned short)arg1;	// IMP=0x0000000100034468
- (void)sendXPCOOBKeyChanged:(id)arg1;	// IMP=0x00000001000342ac
- (id)getOOBKey;	// IMP=0x00000001000342a4
- (void)beginDiscovery:(_Bool)arg1 withDeviceIDToDiscover:(id)arg2;	// IMP=0x0000000100033d64
- (void)getAdvertisedNameFromDeviceID:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;	// IMP=0x0000000100033b28
- (id)_bluetoothIDOfActiveDevice;	// IMP=0x0000000100033a80
- (id)_bluetoothIDFromPairingID:(id)arg1;	// IMP=0x00000001000339b0
- (void)setOOBPairingEnabled:(_Bool)arg1;	// IMP=0x00000001000339ac
- (void)createDeviceFromBluetoothDiscoveryWithAdvertisementData:(id)arg1 withBluetoothPeer:(id)arg2 withRSSI:(id)arg3 withBlock:(CDUnknownBlockType)arg4;	// IMP=0x0000000100032704
- (void)removeStaleDiscoveredDevices;	// IMP=0x0000000100032324
- (void)createDeviceFromBluetoothPairRequestWithBluetoothPeer:(id)arg1 advertisedName:(id)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x0000000100032164
- (void)initiateSyncAfterSoftwareUpdateForDevice:(id)arg1;	// IMP=0x0000000100031cd4
- (void)_updateCompatibilityStateForDeviceID:(id)arg1 withDeviceCollection:(id)arg2 oldCompatibilityState:(id)arg3 newCompatibilityState:(id)arg4;	// IMP=0x00000001000317ac
- (void)_updateCompatibilityStateForDeviceID:(id)arg1 withDeviceCollection:(id)arg2;	// IMP=0x000000010003114c
- (void)statusCodeManager:(id)arg1 electionOutcomeChanged:(unsigned long long)arg2;	// IMP=0x0000000100031088
- (void)setStatusCode:(unsigned long long)arg1 InCollection:(id)arg2;	// IMP=0x0000000100030ef8
- (id)IDSGetPairedDevices;	// IMP=0x0000000100030c30
- (void)purgeIDSPairedDevicesExceptFor:(id)arg1 withQueue:(id)arg2 andCompletion:(CDUnknownBlockType)arg3;	// IMP=0x00000001000302fc
- (void)deleteUnexpectedIDSPairedDevicesWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x000000010002fd98
- (void)updateDeviceID:(id)arg1 withProperties:(id)arg2 withCompletion:(CDUnknownBlockType)arg3;	// IMP=0x000000010002f738
- (void)idsSendProperties:(id)arg1 thisIsAllOfThem:(_Bool)arg2;	// IMP=0x000000010002f0a4
- (void)localMonitor:(id)arg1 propertiesDidChange:(id)arg2 thisIsAllOfThem:(_Bool)arg3;	// IMP=0x000000010002f07c
- (void)deleteLocalPairingStore:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;	// IMP=0x000000010002eec4
- (void)refreshPropertyCache;	// IMP=0x000000010002eb3c
- (void)sendXPCBTPairRequestMessage:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;	// IMP=0x000000010002eb38
- (void)sendXPCDeviceNeedsPasscodeMessage:(id)arg1 passcode:(id)arg2;	// IMP=0x000000010002e914
- (void)forceEndDiscovery;	// IMP=0x000000010002e738
- (void)forceEndAdvertising;	// IMP=0x000000010002e734
- (void)grabPairingAgent;	// IMP=0x000000010002e730
- (void)updateIsPairedAggDKey:(id)arg1;	// IMP=0x000000010002e57c
- (_Bool)isBluetoothPoweredOn;	// IMP=0x000000010002e538
- (_Bool)isBluetoothConnected;	// IMP=0x000000010002e4f4
- (_Bool)isBluetoothPoweredOn:(long long)arg1;	// IMP=0x000000010002e4e8
- (_Bool)isBluetoothConnected:(long long)arg1;	// IMP=0x000000010002e4dc
- (void)dealloc;	// IMP=0x000000010002e4a8
- (void)voidIDSService:(Class)arg1;	// IMP=0x000000010002e39c
- (void)getEnsureActiveDeviceWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x000000010002dd14
- (_Bool)isInternalInstall;	// IMP=0x000000010002dd10
- (void)normalizeDaemonStateWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x000000010002d934
- (_Bool)isSecureDataAvailable;	// IMP=0x000000010002d8f8
- (_Bool)managedConfigurationWatchDisabled;	// IMP=0x000000010002d7b8
- (void)registerManagedConfigurationChanged:(CDUnknownBlockType)arg1;	// IMP=0x000000010002d5d4
- (unsigned long long)readNotifyToken:(int)arg1;	// IMP=0x000000010002d594
- (void)updateNotifyToken:(int)arg1 withValue:(unsigned long long)arg2 withNotificationName:(id)arg3;	// IMP=0x000000010002d584
- (void)updateNotifyToken:(int)arg1 withValue:(unsigned long long)arg2 withNotificationName:(id)arg3 alwaysPost:(_Bool)arg4;	// IMP=0x000000010002d288
- (int)getNotifyTokenWithName:(id)arg1;	// IMP=0x000000010002d174
- (void)allocateDictionaries;	// IMP=0x000000010002d080
- (void)ackXPCEvents;	// IMP=0x000000010002c918
- (void)debounceOnQueue:(id)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x000000010002c4e8
- (void)cleanupPairingStoreWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x000000010002c128
- (_Bool)setPairingClientCrashMonitoringCache:(_Bool)arg1 proxy:(id)arg2;	// IMP=0x000000010002bd90
- (void)syncPairingClientCrashMonitoringCache;	// IMP=0x000000010002b7f8
- (id)init;	// IMP=0x000000010002ae28
- (void)updateAppRemovability:(CDUnknownBlockType)arg1;	// IMP=0x000000010002a9bc
- (void)purgeDiscoveredDevices:(CDUnknownBlockType)arg1;	// IMP=0x000000010002a5b8
- (void)_transactionCoordinatorHasBecomeIdle;	// IMP=0x0000000100029f24
- (void)transactionCoordinatorHasBecomeIdle;	// IMP=0x0000000100029da0
- (void)enqueueSetLastPairedDeviceTransactionWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0000000100029934
- (void)lastPairedDeviceWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000100028ea8
- (void)postFirstUnlockInitBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000100028114
- (void)preFirstUnlockInitCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0000000100027ad8
- (id)dump;	// IMP=0x0000000100027644
- (void)invalidateIDSChannels;	// IMP=0x00000001000275ec
- (void)initializeAllIDSChannelsBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000100027108
- (void)areWePairedOrPairing:(CDUnknownBlockType)arg1;	// IMP=0x0000000100026e7c
- (void)initializeTrafficClassBlock:(CDUnknownBlockType)arg1;	// IMP=0x00000001000269a8
- (void)initIDSService:(Class)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x0000000100025cd8
- (void)sigUsr1;	// IMP=0x0000000100025a7c
- (void)sigTerm;	// IMP=0x00000001000259e4
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *pairingQueue;
- (void)logIfVersionsAreOverridden;	// IMP=0x00000001000257a8
- (void)broadcastActiveDeviceChipID:(id)arg1 from:(id)arg2;	// IMP=0x000000010002559c
@property(readonly, nonatomic) _Bool mirrorOfIsPaired; // @synthesize mirrorOfIsPaired=_mirrorOfIsPaired;
@property(readonly, nonatomic) NSUUID *mirrorOfActiveDeviceID; // @synthesize mirrorOfActiveDeviceID=_mirrorOfActiveDeviceID;
@property(readonly, nonatomic) NRMutableDevice *mirrorOfActiveDevice; // @synthesize mirrorOfActiveDevice=_mirrorOfActiveDevice;
- (void)updateMirrorWithCollection:(id)arg1;	// IMP=0x00000001000250d8
- (_Bool)pairingCompatibilityVersionInitWithCollection:(id)arg1;	// IMP=0x0000000100024f50
@property(retain, nonatomic) NSNumber *chipIDOfActiveDevice; // @synthesize chipIDOfActiveDevice=_chipIDOfActiveDevice;
- (void)initBluetoothWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000100024b64
- (void)createUnpairTransactionsWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0000000100022ea4
- (void)_forceMigrationSync:(id)arg1 withCollection:(id)arg2;	// IMP=0x0000000100022a78
- (void)_archiveDevices:(id)arg1 withCollection:(id)arg2;	// IMP=0x00000001000220f8
- (void)unpairDeviceWithPairingID:(id)arg1 obliterationString:(id)arg2 shouldBrick:(id)arg3 storeUnpair:(id)arg4 migrationUnpair:(id)arg5 shouldPreserveESim:(id)arg6 pairingReport:(id)arg7 remoteUnpairRequestUUID:(id)arg8;	// IMP=0x00000001000218dc
- (id)unpairReasonString:(unsigned long long)arg1;	// IMP=0x0000000100021860
- (_Bool)legacyDidRestoreFromBackup;	// IMP=0x000000010002126c
@property(nonatomic) _Bool didRestoreFromBackup;
- (id)legacyUnpairTriggerFileContents;	// IMP=0x0000000100020a8c
- (id)unpairTriggerFileContents;	// IMP=0x000000010002086c
- (void)nuke:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000001000205f0
- (_Bool)storeMode;	// IMP=0x00000001000205c0
- (void)xpcDeviceIDAtSwitchIndex:(unsigned int)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x0000000100020490
- (void)xpcInvalidateSwitchAssertionWithIdentifier:(id)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x00000001000202c0
- (void)xpcSwitchActiveDeviceWithDeviceID:(id)arg1 withAssertionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000010001fdac
@property(retain, nonatomic) NRPairingProxy *lastCaller; // @synthesize lastCaller=_lastCaller;
- (void)removeExternalAssertionsForPairingID:(id)arg1;	// IMP=0x000000010001f8c4
- (void)removeAssertionsForProxy:(id)arg1 newDeviceID:(id)arg2;	// IMP=0x000000010001f628
- (void)removeAssertionsForProxy:(id)arg1;	// IMP=0x000000010001f618
- (void)removeAssertionInfo:(id)arg1;	// IMP=0x000000010001f390
- (void)saveAssertionInfo:(id)arg1;	// IMP=0x000000010001f0d4
- (void)scanCollectionForUpdateModeDevices:(id)arg1;	// IMP=0x000000010001ed2c
- (void)_deleteSharingPathWithPairingID:(id)arg1;	// IMP=0x000000010001eab4
- (void)setIDSTrafficClassifiersForActiveDeviceWithNewCompatibilityState:(id)arg1;	// IMP=0x000000010001e354
- (void)_setBridgeBadgeWithCollection:(id)arg1;	// IMP=0x000000010001e0f4
- (void)_updateActiveFlag:(id)arg1;	// IMP=0x000000010001df24
- (void)setUpHistoryCompletionBlocks;	// IMP=0x000000010001cb58
@property(nonatomic) unsigned long long lastStatusCodeCache; // @synthesize lastStatusCodeCache=_lastStatusCodeCache;
- (void)xpcEndDiscoveryWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x000000010001c7fc
- (void)xpcBeginDiscoveryWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x000000010001c7a0
@property(readonly, nonatomic) NRPairingReport *pairingReport;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

