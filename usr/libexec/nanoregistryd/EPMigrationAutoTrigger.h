//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "EPActiveDeviceAssertionFactoryObserver-Protocol.h"
#import "EPDiscovererDelegate-Protocol.h"
#import "EPResourceOwnerDelegate-Protocol.h"
#import "EPService-Protocol.h"
#import "PSYInitialSyncStateObserverDelegate-Protocol.h"

@class EPDiscoverer, EPKey, EPKeymaster, EPPhoneMigrator, NROSTransaction, NRPreferences, NRRegistry, NSDate, NSMutableSet, NSString, NSUUID, PSYInitialSyncStateObserver;
@protocol AbstractTimer, EPServiceRegistry, OS_dispatch_source;

@interface EPMigrationAutoTrigger : NSObject <EPResourceOwnerDelegate, EPDiscovererDelegate, PSYInitialSyncStateObserverDelegate, EPService, EPActiveDeviceAssertionFactoryObserver>
{
    _Bool _wasUIUnlocked;	// 8 = 0x8
    _Bool _hadAccounts;	// 9 = 0x9
    _Bool _wasUnlocked;	// 10 = 0xa
    _Bool _didntHaveTheKey;	// 11 = 0xb
    _Bool _aWatchWasDiscovered;	// 12 = 0xc
    _Bool _flagsUpdatedForceMigration;	// 13 = 0xd
    _Bool _flagsUpdatedForceMigrationMessage;	// 14 = 0xe
    _Bool _shouldClearAdvertisingIntervalTimeouts;	// 15 = 0xf
    _Bool _hasSwitchAssertion;	// 16 = 0x10
    _Bool _needsSync;	// 17 = 0x11
    _Bool _syncStateKnown;	// 18 = 0x12
    _Bool _syncStatePending;	// 19 = 0x13
    int _uiUnlockNotifyToken;	// 20 = 0x14
    int _keybagNotifyToken;	// 24 = 0x18
    NROSTransaction *_transaction;	// 32 = 0x20
    NSObject<OS_dispatch_source> *_currentTimer;	// 40 = 0x28
    EPDiscoverer *_discoverer;	// 48 = 0x30
    NSDate *_lastMessageSendDate;	// 56 = 0x38
    NSDate *_lastMigrationScanDate;	// 64 = 0x40
    NRPreferences *_prefs;	// 72 = 0x48
    id <AbstractTimer> _nanoRegistryAdvertisingRequestTimer;	// 80 = 0x50
    EPKey *_key;	// 88 = 0x58
    NSUUID *_currentDeviceForSyncState;	// 96 = 0x60
    PSYInitialSyncStateObserver *_syncObserver;	// 104 = 0x68
    NSUUID *_lastActiveDevice;	// 112 = 0x70
    NSMutableSet *_bluetoothIdentifierShortTermFailureLockout;	// 120 = 0x78
    NSDate *_shortTermFailureLockoutCreationDate;	// 128 = 0x80
    id <EPServiceRegistry> _serviceRegistry;	// 136 = 0x88
    NSObject<OS_dispatch_source> *_migrationSoftErrorAlertDelayTimer;	// 144 = 0x90
    NSUUID *_migrationSoftErrorDeviceID;	// 152 = 0x98
}

+ (unsigned long long)failureTypeWithError:(id)arg1;	// IMP=0x000000010006e778
+ (id)newService:(id)arg1;	// IMP=0x0000000100068894
- (void).cxx_destruct;	// IMP=0x0000000100070da4
@property(retain, nonatomic) NSUUID *migrationSoftErrorDeviceID; // @synthesize migrationSoftErrorDeviceID=_migrationSoftErrorDeviceID;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *migrationSoftErrorAlertDelayTimer; // @synthesize migrationSoftErrorAlertDelayTimer=_migrationSoftErrorAlertDelayTimer;
@property(retain, nonatomic) id <EPServiceRegistry> serviceRegistry; // @synthesize serviceRegistry=_serviceRegistry;
@property(retain, nonatomic) NSDate *shortTermFailureLockoutCreationDate; // @synthesize shortTermFailureLockoutCreationDate=_shortTermFailureLockoutCreationDate;
@property(retain, nonatomic) NSMutableSet *bluetoothIdentifierShortTermFailureLockout; // @synthesize bluetoothIdentifierShortTermFailureLockout=_bluetoothIdentifierShortTermFailureLockout;
@property(retain, nonatomic) NSUUID *lastActiveDevice; // @synthesize lastActiveDevice=_lastActiveDevice;
@property(nonatomic) _Bool syncStatePending; // @synthesize syncStatePending=_syncStatePending;
@property(nonatomic) _Bool syncStateKnown; // @synthesize syncStateKnown=_syncStateKnown;
@property(nonatomic) _Bool needsSync; // @synthesize needsSync=_needsSync;
@property(retain, nonatomic) PSYInitialSyncStateObserver *syncObserver; // @synthesize syncObserver=_syncObserver;
@property(retain, nonatomic) NSUUID *currentDeviceForSyncState; // @synthesize currentDeviceForSyncState=_currentDeviceForSyncState;
@property(nonatomic) _Bool hasSwitchAssertion; // @synthesize hasSwitchAssertion=_hasSwitchAssertion;
@property(retain, nonatomic) EPKey *key; // @synthesize key=_key;
@property(nonatomic) _Bool shouldClearAdvertisingIntervalTimeouts; // @synthesize shouldClearAdvertisingIntervalTimeouts=_shouldClearAdvertisingIntervalTimeouts;
@property(retain, nonatomic) id <AbstractTimer> nanoRegistryAdvertisingRequestTimer; // @synthesize nanoRegistryAdvertisingRequestTimer=_nanoRegistryAdvertisingRequestTimer;
@property(retain, nonatomic) NRPreferences *prefs; // @synthesize prefs=_prefs;
@property(nonatomic) _Bool flagsUpdatedForceMigrationMessage; // @synthesize flagsUpdatedForceMigrationMessage=_flagsUpdatedForceMigrationMessage;
@property(nonatomic) _Bool flagsUpdatedForceMigration; // @synthesize flagsUpdatedForceMigration=_flagsUpdatedForceMigration;
@property(retain, nonatomic) NSDate *lastMigrationScanDate; // @synthesize lastMigrationScanDate=_lastMigrationScanDate;
@property(retain, nonatomic) NSDate *lastMessageSendDate; // @synthesize lastMessageSendDate=_lastMessageSendDate;
@property(retain, nonatomic) EPDiscoverer *discoverer; // @synthesize discoverer=_discoverer;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *currentTimer; // @synthesize currentTimer=_currentTimer;
@property(nonatomic) int keybagNotifyToken; // @synthesize keybagNotifyToken=_keybagNotifyToken;
@property(nonatomic) int uiUnlockNotifyToken; // @synthesize uiUnlockNotifyToken=_uiUnlockNotifyToken;
@property(nonatomic) _Bool aWatchWasDiscovered; // @synthesize aWatchWasDiscovered=_aWatchWasDiscovered;
@property(nonatomic) _Bool didntHaveTheKey; // @synthesize didntHaveTheKey=_didntHaveTheKey;
@property(nonatomic) _Bool wasUnlocked; // @synthesize wasUnlocked=_wasUnlocked;
@property(nonatomic) _Bool hadAccounts; // @synthesize hadAccounts=_hadAccounts;
@property(nonatomic) _Bool wasUIUnlocked; // @synthesize wasUIUnlocked=_wasUIUnlocked;
@property(retain, nonatomic) NROSTransaction *transaction; // @synthesize transaction=_transaction;
- (void)isDevice:(id)arg1 readyToMigrate:(CDUnknownBlockType)arg2;	// IMP=0x000000010006fd10
- (void)discoverer:(id)arg1 deviceDidBecomeDisplayable:(id)arg2;	// IMP=0x000000010006fc40
- (void)startMigrationAfterTimeout:(double)arg1;	// IMP=0x000000010006fab0
- (void)startMigrationOnMRUIfWatchWasFoundWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x000000010006e93c
- (void)sendMessageToWatchWithRawCloudIdentifiers:(id)arg1;	// IMP=0x000000010006e250
- (_Bool)hasMessageTimeIntervalExpired:(double)arg1 forCloudIdentifier:(id)arg2;	// IMP=0x000000010006e124
- (void)calculateNextMessageSendIntervalWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x000000010006db08
- (void)resetAllMessageSendTimersWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x000000010006d6e0
- (void)setLastMessageSendDate:(id)arg1 forRawCloudIdentifiers:(id)arg2;	// IMP=0x000000010006d444
- (id)_cloudIdentifierForDevice:(id)arg1;	// IMP=0x000000010006d1a0
- (void)sendMessageToAvailableWatchesWithInterval:(double)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000010006cb20
- (void)resourceAvailabilityDidChange:(id)arg1;	// IMP=0x000000010006cb14
- (void)startWatchScanWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x000000010006c54c
- (void)setMigrationSoftErrorAlertDelayTimer:(double)arg1 deviceID:(id)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x000000010006c020
- (void)cancelMigrationSoftErrorAlertDelayTimerWithDeviceID:(id)arg1;	// IMP=0x000000010006bddc
- (void)cancelTimer;	// IMP=0x000000010006bda0
- (void)setTimerDuration:(double)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x000000010006bc18
- (void)checkIfShouldRetryMigrationWhenIDSDevicesChange;	// IMP=0x000000010006bc04
- (void)update;	// IMP=0x000000010006aa28
- (void)nanoRegistryAdvertisingRequestTimeout;	// IMP=0x000000010006a8a4
- (_Bool)isDate:(id)arg1 agedMoreThan:(double)arg2;	// IMP=0x000000010006a828
- (void)dealloc;	// IMP=0x000000010006a7c4
@property(readonly, nonatomic) _Bool isUIUnlocked;
- (void)unregisterForNotifications;	// IMP=0x000000010006a6c8
- (void)registerForNotifications;	// IMP=0x000000010006a32c
- (_Bool)_hasMigrationConsent:(id)arg1;	// IMP=0x000000010006a190
- (id)shortTermFailureLockoutFilterBluetoothIdentifiers:(id)arg1;	// IMP=0x000000010006a0d4
- (_Bool)shortTermFailureLockoutContainsBluetoothIdentifier:(id)arg1;	// IMP=0x000000010006a024
- (void)addBluetoothIdentifierToShortTermFailureLockout:(id)arg1;	// IMP=0x0000000100069fb0
- (void)initialSyncStateObserver:(id)arg1 initialSyncDidCompleteForPairingIdentifier:(id)arg2;	// IMP=0x0000000100069e04
- (void)initialSyncStateObserver:(id)arg1 syncDidResetForPairingIdentifier:(id)arg2;	// IMP=0x0000000100069c6c
- (void)initialSyncStateObserverClientCanRetryFailedRequests:(id)arg1;	// IMP=0x0000000100069b30
- (void)queryDeviceSyncStatusIfNeeded;	// IMP=0x00000001000694fc
- (void)assertionFactoryDidBecomeIdle:(id)arg1;	// IMP=0x0000000100069408
- (void)checkAssertionFactoryForAssertion;	// IMP=0x00000001000692b8
- (id)initWithServiceRegistry:(id)arg1;	// IMP=0x00000001000689c4
@property(readonly, nonatomic) EPKeymaster *keymaster;
- (id)cloud;	// IMP=0x0000000100068954
@property(readonly, nonatomic) NRRegistry *registry;
@property(readonly, nonatomic) EPPhoneMigrator *migrator;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

