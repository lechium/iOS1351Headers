//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class NSLock, NSMutableDictionary, NSString, QLCacheIndexDatabase, QLCacheMMAPBlobDatabase;
@protocol QLDiskCacheDelegate;

@interface QLDiskCache : NSObject
{
    NSString *_path;	// 8 = 0x8
    QLCacheIndexDatabase *_indexDatabase;	// 16 = 0x10
    QLCacheMMAPBlobDatabase *_blobDatabase;	// 24 = 0x18
    NSString *_metaDataFilePath;	// 32 = 0x20
    NSString *_dirtyFilePath;	// 40 = 0x28
    NSString *_exclusivePath;	// 48 = 0x30
    NSString *_resetFilePath;	// 56 = 0x38
    NSString *_resetReasonPath;	// 64 = 0x40
    _Bool _dirtyForDelegate;	// 72 = 0x48
    NSLock *_databaseLock;	// 80 = 0x50
    _Bool _opened;	// 88 = 0x58
    NSMutableDictionary *_metaData;	// 96 = 0x60
    _Bool _metaDataDirty;	// 104 = 0x68
    long long _writingCount;	// 112 = 0x70
    int _exclusiveFD;	// 120 = 0x78
    _Bool _hasDirtyLock;	// 124 = 0x7c
    id <QLDiskCacheDelegate> _delegate;	// 128 = 0x80
}

+ (void)setupCacheAtLocationIfNecessary:(id)arg1;	// IMP=0x0000000100008aa4
+ (id)defaultLocation;	// IMP=0x00000001000088e8
+ (void)setCacheLocationForTesting:(id)arg1;	// IMP=0x00000001000088d8
- (void).cxx_destruct;	// IMP=0x000000010000bec8
@property(retain) NSString *metaDataFilePath; // @synthesize metaDataFilePath=_metaDataFilePath;
@property(retain) NSMutableDictionary *metaData; // @synthesize metaData=_metaData;
@property _Bool metaDataDirty; // @synthesize metaDataDirty=_metaDataDirty;
@property(readonly) long long writingCount; // @synthesize writingCount=_writingCount;
@property(readonly, nonatomic) _Bool hasDirtyLock; // @synthesize hasDirtyLock=_hasDirtyLock;
@property __weak id <QLDiskCacheDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly) NSString *path; // @synthesize path=_path;
@property(readonly) _Bool isOpened; // @synthesize isOpened=_opened;
- (id)itemsAfterFilteringOutItemsWithMissingThumbnails:(id)arg1;	// IMP=0x000000010000be30
- (void)noteRemoteThumbnailPresentForItems:(id)arg1;	// IMP=0x000000010000be20
- (void)noteRemoteThumbnailMissingForItems:(id)arg1;	// IMP=0x000000010000be10
- (_Bool)setLastHitDateOfAllCachedThumbnailsToDate:(id)arg1;	// IMP=0x000000010000be00
- (_Bool)removeCachedThumbnailsFromUninstalledFileProvidersWithRemainingFileProviderIdentifiers:(id)arg1;	// IMP=0x000000010000bda0
- (id)lastResetWithDate:(id *)arg1;	// IMP=0x000000010000bcf0
- (id)lastCrapWithDate:(id *)arg1;	// IMP=0x000000010000bce0
@property(readonly) unsigned long long thumbnailCount;
@property(readonly) unsigned long long fileEntryCount;
@property(readonly) unsigned long long maxThumbnailLifeTime;
- (_Bool)discardReservedBuffer:(id)arg1;	// IMP=0x000000010000bb9c
- (_Bool)validateReservedBuffer:(id)arg1;	// IMP=0x000000010000ba88
- (id)reserveBufferForData:(id)arg1;	// IMP=0x000000010000b86c
- (id)reserveBufferWithLength:(unsigned long long)arg1;	// IMP=0x000000010000b784
- (unsigned long long)sizeSumOfThumbnailsOlderThanDate:(id)arg1;	// IMP=0x000000010000b774
- (void)setMetaData:(id)arg1 forKey:(id)arg2;	// IMP=0x000000010000b694
- (id)metaDataForKey:(id)arg1;	// IMP=0x000000010000b684
- (id)blobDatabase;	// IMP=0x000000010000b67c
- (id)indexDatabase;	// IMP=0x000000010000b674
- (id)checkConsistency;	// IMP=0x000000010000b524
- (void)reset;	// IMP=0x000000010000b478
- (void)close;	// IMP=0x000000010000b3d4
- (_Bool)open;	// IMP=0x000000010000b2f4
- (id)_checkConsistency;	// IMP=0x000000010000b260
- (void)_resetWithReason:(id)arg1;	// IMP=0x000000010000b134
- (void)_close;	// IMP=0x000000010000b080
- (void)_closeWhatIsOpen;	// IMP=0x000000010000afe0
- (_Bool)_open;	// IMP=0x000000010000a734
@property(readonly) unsigned long long maxSize;
@property(readonly) unsigned long long size;
@property(readonly) unsigned long long reserveBufferSize;
@property(readonly) unsigned long long reserveBufferCount;
@property(readonly) float fragmentation;
- (void)updateHitCount:(id)arg1 forFileIdentifier:(id)arg2;	// IMP=0x000000010000a694
- (void)removeFilesWithFileInfo:(id)arg1;	// IMP=0x000000010000a644
- (void)checkpoint;	// IMP=0x000000010000a634
- (unsigned long long)cleanup;	// IMP=0x000000010000a5d8
- (unsigned long long)freeDiskSpaceForNewThumbnails;	// IMP=0x000000010000a528
- (unsigned long long)removeThumbnailsOlderThanDate:(id)arg1;	// IMP=0x000000010000a4cc
- (unsigned long long)_deleteBlobArrayFromDatabase:(id)arg1;	// IMP=0x000000010000a37c
- (void)discardThumbnailDataBatchForReset:(id)arg1;	// IMP=0x000000010000a25c
- (void)writeThumbnailDataBatch:(id)arg1;	// IMP=0x000000010000a13c
- (_Bool)doWriting:(CDUnknownBlockType)arg1;	// IMP=0x0000000100009dec
- (_Bool)doReading:(CDUnknownBlockType)arg1;	// IMP=0x0000000100009c70
- (void)do:(CDUnknownBlockType)arg1;	// IMP=0x0000000100009c60
- (void)_cleanupForceResetAtNextLaunch;	// IMP=0x0000000100009c40
- (void)forceResetAtNextLaunch;	// IMP=0x0000000100009c08
- (void)_removeDirtyLock;	// IMP=0x0000000100009b54
- (void)_createDirtyLockInformDelegate:(_Bool)arg1;	// IMP=0x0000000100009a88
- (void)_cleanupDirtyLock;	// IMP=0x0000000100009a84
- (void)_discardThumbnailDataForReset:(id)arg1;	// IMP=0x000000010000990c
- (_Bool)_setThumbnailData:(id)arg1;	// IMP=0x000000010000916c
- (id)enumeratorForAllThumbnailsWithFileIdentifier:(id)arg1;	// IMP=0x0000000100009108
- (id)enumeratorForAllFilesUbiquitousFiles:(_Bool)arg1 withExtraInfo:(_Bool)arg2;	// IMP=0x00000001000090b8
- (id)enumeratorForThumbnailRequests:(id)arg1;	// IMP=0x0000000100009054
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;	// IMP=0x0000000100008ecc
- (id)initWithPathLocation:(id)arg1 cacheSize:(long long)arg2 cacheThread:(id)arg3;	// IMP=0x0000000100008c64

@end

