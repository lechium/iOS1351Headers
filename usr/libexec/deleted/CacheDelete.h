//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "CacheDeleteClientProtocol-Protocol.h"
#import "CacheDeletePublicClientProtocol-Protocol.h"
#import "CacheDeleteServiceProvider-Protocol.h"

@class CDPurgeableResultCache, CacheDeleteAnalytics, CacheDeleteListener, NSDictionary, NSMutableDictionary, NSMutableSet, NSPointerArray, NSURL, NSUserDefaults;
@protocol OS_dispatch_queue, OS_dispatch_source;

__attribute__((visibility("hidden")))
@interface CacheDelete : NSObject <CacheDeleteClientProtocol, CacheDeletePublicClientProtocol, CacheDeleteServiceProvider>
{
    _Bool _measureElapsedTimes;	// 8 = 0x8
    NSObject<OS_dispatch_queue> *_collection_queue;	// 16 = 0x10
    NSObject<OS_dispatch_queue> *_defaults_queue;	// 24 = 0x18
    NSObject<OS_dispatch_queue> *_operations_queue;	// 32 = 0x20
    CacheDeleteListener *_listener;	// 40 = 0x28
    CacheDeleteListener *_publicListener;	// 48 = 0x30
    id _extensionMatchContext;	// 56 = 0x38
    NSObject<OS_dispatch_queue> *_notify_queue;	// 64 = 0x40
    NSObject<OS_dispatch_queue> *_timer_queue;	// 72 = 0x48
    NSObject<OS_dispatch_source> *_persistence_timer;	// 80 = 0x50
    NSURL *_rootPath;	// 88 = 0x58
    NSMutableDictionary *_lastRefreshTimes;	// 96 = 0x60
    NSUserDefaults *_userDefaults;	// 104 = 0x68
    NSMutableDictionary *_services;	// 112 = 0x70
    NSMutableSet *_daemons;	// 120 = 0x78
    NSDictionary *_default_values;	// 128 = 0x80
    NSMutableDictionary *_purgeOperations;	// 136 = 0x88
    CDPurgeableResultCache *_purgeableResultCache;	// 144 = 0x90
    CacheDeleteAnalytics *_analytics;	// 152 = 0x98
    NSPointerArray *_inFlightOperations;	// 160 = 0xa0
    unsigned long long _pendingLowDiskCount;	// 168 = 0xa8
    NSMutableSet *_pendingLowDiskVolumes;	// 176 = 0xb0
}

+ (id)sharedCacheDelete;	// IMP=0x00000001000053c8
- (void).cxx_destruct;	// IMP=0x000000010001a78c
@property(retain, nonatomic) NSMutableSet *pendingLowDiskVolumes; // @synthesize pendingLowDiskVolumes=_pendingLowDiskVolumes;
@property(nonatomic) unsigned long long pendingLowDiskCount; // @synthesize pendingLowDiskCount=_pendingLowDiskCount;
@property(retain, nonatomic) NSPointerArray *inFlightOperations; // @synthesize inFlightOperations=_inFlightOperations;
@property(retain, nonatomic) CacheDeleteAnalytics *analytics; // @synthesize analytics=_analytics;
@property(retain, nonatomic) CDPurgeableResultCache *purgeableResultCache; // @synthesize purgeableResultCache=_purgeableResultCache;
@property(retain, nonatomic) NSMutableDictionary *purgeOperations; // @synthesize purgeOperations=_purgeOperations;
@property(retain, nonatomic) NSDictionary *default_values; // @synthesize default_values=_default_values;
@property(retain, nonatomic) NSMutableSet *daemons; // @synthesize daemons=_daemons;
@property(retain, nonatomic) NSMutableDictionary *services; // @synthesize services=_services;
@property(retain, nonatomic) NSUserDefaults *userDefaults; // @synthesize userDefaults=_userDefaults;
@property(retain, nonatomic) NSMutableDictionary *lastRefreshTimes; // @synthesize lastRefreshTimes=_lastRefreshTimes;
@property(readonly, nonatomic) NSURL *rootPath; // @synthesize rootPath=_rootPath;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *persistence_timer; // @synthesize persistence_timer=_persistence_timer;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *timer_queue; // @synthesize timer_queue=_timer_queue;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *notify_queue; // @synthesize notify_queue=_notify_queue;
@property(retain, nonatomic) id extensionMatchContext; // @synthesize extensionMatchContext=_extensionMatchContext;
@property(readonly) _Bool measureElapsedTimes; // @synthesize measureElapsedTimes=_measureElapsedTimes;
@property(retain, nonatomic) CacheDeleteListener *publicListener; // @synthesize publicListener=_publicListener;
@property(retain, nonatomic) CacheDeleteListener *listener; // @synthesize listener=_listener;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *operations_queue; // @synthesize operations_queue=_operations_queue;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *defaults_queue; // @synthesize defaults_queue=_defaults_queue;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *collection_queue; // @synthesize collection_queue=_collection_queue;
- (void)maybeCrashForTest:(id)arg1;	// IMP=0x000000010001a350
- (id)servicesDebugState;	// IMP=0x000000010001a22c
- (id)operationsDebugState;	// IMP=0x000000010001a128
- (id)debugState;	// IMP=0x0000000100019e4c
- (void)iteratePendingOperations:(CDUnknownBlockType)arg1;	// IMP=0x0000000100019c10
- (void)removeOperation:(id)arg1;	// IMP=0x0000000100019c0c
- (void)registerOperation:(id)arg1;	// IMP=0x0000000100019b0c
- (void)clientRegisterLowDiskFailure:(id)arg1 failureType:(int)arg2 isRoot:(_Bool)arg3;	// IMP=0x0000000100019a88
- (void)clientRequestCacheableSpaceGuidance:(id)arg1 replyBlock:(CDUnknownBlockType)arg2;	// IMP=0x0000000100019350
- (void)clientUpdatePurgeable:(id)arg1;	// IMP=0x000000010001910c
- (void)clientGetState:(id)arg1 replyBlock:(CDUnknownBlockType)arg2;	// IMP=0x0000000100018eb0
- (void)_clientGetState:(id)arg1 replyBlock:(CDUnknownBlockType)arg2;	// IMP=0x00000001000188ec
- (void)clientSetState:(id)arg1 key:(id)arg2;	// IMP=0x0000000100018214
- (void)_clientSetState:(id)arg1 key:(id)arg2;	// IMP=0x0000000100017f30
- (_Bool)checkSettingEntitlements:(id)arg1 onConnection:(id)arg2;	// IMP=0x0000000100017db8
- (void)clientPerformOperation:(id)arg1 replyBlock:(CDUnknownBlockType)arg2;	// IMP=0x0000000100017b0c
- (void)clientPerformVFSEventWithInfo:(id)arg1 replyBlock:(CDUnknownBlockType)arg2;	// IMP=0x00000001000178dc
- (void)clientPerformServiceRequest:(id)arg1 replyBlock:(CDUnknownBlockType)arg2;	// IMP=0x0000000100016fd8
- (void)clientPerformPeriodicsWithInfo:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0000000100016988
- (void)clientCancelPurge:(id)arg1;	// IMP=0x0000000100016404
- (void)clientPurge:(id)arg1 replyBlock:(CDUnknownBlockType)arg2;	// IMP=0x0000000100016064
- (void)clientPurgeableSpace:(id)arg1 replyBlock:(CDUnknownBlockType)arg2;	// IMP=0x0000000100015dfc
- (void)clientItemizedPurgeableSpace:(id)arg1 replyBlock:(CDUnknownBlockType)arg2;	// IMP=0x0000000100015b94
- (void)clientCheckin:(id)arg1 endpoint:(id)arg2 info:(id)arg3 reply:(CDUnknownBlockType)arg4;	// IMP=0x0000000100014d10
- (void)publicClientAvailableSpaceForVolume:(id)arg1 availableSpaceClass:(int)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x00000001000148e8
- (void)forcePurgeNotify:(id)arg1;	// IMP=0x00000001000148c4
- (void)notifyRecipients:(id)arg1 value:(id)arg2;	// IMP=0x0000000100014870
- (void)_notifyRecipients:(id)arg1 value:(id)arg2 force:(_Bool)arg3;	// IMP=0x0000000100013f68
- (void)processPurgeNotification:(id)arg1 forService:(id)arg2 info:(id)arg3 group:(id)arg4 force:(_Bool)arg5;	// IMP=0x00000001000127d0
- (void)invokeAfterMaxSeconds:(unsigned int)arg1 min:(unsigned int)arg2 group:(id)arg3 block:(CDUnknownBlockType)arg4;	// IMP=0x0000000100012568
- (id)_purge:(id)arg1 volume:(id)arg2 services:(id)arg3 callback:(CDUnknownBlockType)arg4;	// IMP=0x0000000100010f4c
- (id)purge:(id)arg1 volume:(id)arg2 callback:(CDUnknownBlockType)arg3;	// IMP=0x000000010000f808
- (id)totalAvailable:(id)arg1;	// IMP=0x000000010000d4c8
- (void)asyncUpdateRecentResultsForAllVolumesWithInfo:(id)arg1;	// IMP=0x000000010000d2bc
- (void)updateRecentResultsForVolumes:(id)arg1 withInfo:(id)arg2 qos:(unsigned int)arg3 receiveResults:(CDUnknownBlockType)arg4;	// IMP=0x000000010000c5d4
- (_Bool)validateService:(id)arg1;	// IMP=0x000000010000c388
- (id)serviceWithID:(id)arg1;	// IMP=0x000000010000c310
- (id)copyServices;	// IMP=0x000000010000c140
- (id)fsPurgedVolumes:(id)arg1;	// IMP=0x000000010000be98
- (void)prunePurgeHistory;	// IMP=0x000000010000bcf4
- (id)applicationExtensions;	// IMP=0x000000010000b224
- (void)log_recent_info;	// IMP=0x000000010000b160
- (void)cancelPersistenceTimer;	// IMP=0x000000010000b058
- (void)startPersistenceTimer;	// IMP=0x000000010000aaec
- (void)saveRecentInfo;	// IMP=0x000000010000aa74
- (id)registerActivityWithIdentifier:(id)arg1 criteria:(id)arg2 runHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000010000a674
- (void)endComfortPurgeActivityForVolume:(id)arg1;	// IMP=0x000000010000a57c
- (void)beginComfortPurgeActivityForVolume:(id)arg1;	// IMP=0x000000010000a2d8
- (void)endCriticalPurgeActivityForVolume:(id)arg1;	// IMP=0x000000010000a1cc
- (void)beginCriticalPurgeActivityForVolume:(id)arg1;	// IMP=0x0000000100009e68
- (void)handleVFSStreamXPCEvent:(id)arg1;	// IMP=0x0000000100008250
- (void)handleVFSStreamXPCEventForVolume:(id)arg1 event:(id)arg2;	// IMP=0x00000001000080f4
- (void)checkNotificationState;	// IMP=0x0000000100007b08
- (void)broadcastLowDiskNotificationForVolume:(id)arg1 key:(id)arg2;	// IMP=0x0000000100007488
- (_Bool)updateFollowup:(id)arg1;	// IMP=0x0000000100006ec8
- (void)notifyFollowup:(long long)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0000000100006a44
- (id)levelStr:(long long)arg1;	// IMP=0x00000001000069e4
- (struct VolumeThresholdsAndGoals)extractThresholdsAndGoals:(id)arg1;	// IMP=0x000000010000685c
- (void)processLowDiskVolume:(id)arg1 key:(id)arg2;	// IMP=0x0000000100005b60
- (void)processLowDiskVolumes:(id)arg1 filteringBySet:(id)arg2 key:(id)arg3;	// IMP=0x0000000100005944
- (void)processLowDiskVolumes:(id)arg1 key:(id)arg2;	// IMP=0x00000001000057c0
- (void)scanPlistsAtPath:(id)arg1 execBlock:(CDUnknownBlockType)arg2;	// IMP=0x000000010000544c
- (void)beginListening;	// IMP=0x00000001000052e4
- (id)init;	// IMP=0x000000010000453c

@end

