//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class NSMutableArray, NSMutableDictionary, NSUUID;

@interface NESMPolicySession : NSObject
{
    int _sessionType;	// 8 = 0x8
    NSUUID *_configUUID;	// 16 = 0x10
    long long _grade;	// 24 = 0x18
    long long _tunnelType;	// 32 = 0x20
    long long _tunnelKind;	// 40 = 0x28
    NSMutableArray *_policyIDs;	// 48 = 0x30
    NSMutableArray *_policyIDsLow;	// 56 = 0x38
    NSMutableArray *_controlPolicyIDs;	// 64 = 0x40
    NSMutableArray *_tunnelPolicyIDs;	// 72 = 0x48
    NSMutableArray *_onDemandPolicyIDs;	// 80 = 0x50
    NSMutableArray *_dropControlPolicyIDs;	// 88 = 0x58
    NSMutableArray *_skipPolicyIDs;	// 96 = 0x60
    NSMutableArray *_NexusPolicyIDs;	// 104 = 0x68
    NSMutableDictionary *_interfaceDropControlPolicyIDs;	// 112 = 0x70
    NSMutableDictionary *_interfaceControlPolicyIDs;	// 120 = 0x78
    NSMutableDictionary *_interfaceTunnelPolicyIDs;	// 128 = 0x80
}

+ (id)defaultTrafficClassCondition;	// IMP=0x00000001000269b0
+ (id)pausedTrafficClassCondition;	// IMP=0x0000000100026994
+ (id)bestEffortTrafficClassCondition;	// IMP=0x0000000100026978
- (void).cxx_destruct;	// IMP=0x00000001000394f4
@property(retain) NSMutableDictionary *interfaceTunnelPolicyIDs; // @synthesize interfaceTunnelPolicyIDs=_interfaceTunnelPolicyIDs;
@property(retain) NSMutableDictionary *interfaceControlPolicyIDs; // @synthesize interfaceControlPolicyIDs=_interfaceControlPolicyIDs;
@property(retain) NSMutableDictionary *interfaceDropControlPolicyIDs; // @synthesize interfaceDropControlPolicyIDs=_interfaceDropControlPolicyIDs;
@property(retain) NSMutableArray *NexusPolicyIDs; // @synthesize NexusPolicyIDs=_NexusPolicyIDs;
@property(retain) NSMutableArray *skipPolicyIDs; // @synthesize skipPolicyIDs=_skipPolicyIDs;
@property(retain) NSMutableArray *dropControlPolicyIDs; // @synthesize dropControlPolicyIDs=_dropControlPolicyIDs;
@property(retain) NSMutableArray *onDemandPolicyIDs; // @synthesize onDemandPolicyIDs=_onDemandPolicyIDs;
@property(retain) NSMutableArray *tunnelPolicyIDs; // @synthesize tunnelPolicyIDs=_tunnelPolicyIDs;
@property(retain) NSMutableArray *controlPolicyIDs; // @synthesize controlPolicyIDs=_controlPolicyIDs;
@property(retain) NSMutableArray *policyIDsLow; // @synthesize policyIDsLow=_policyIDsLow;
@property(retain) NSMutableArray *policyIDs; // @synthesize policyIDs=_policyIDs;
@property long long tunnelKind; // @synthesize tunnelKind=_tunnelKind;
@property long long tunnelType; // @synthesize tunnelType=_tunnelType;
@property long long grade; // @synthesize grade=_grade;
@property int sessionType; // @synthesize sessionType=_sessionType;
@property(retain) NSUUID *configUUID; // @synthesize configUUID=_configUUID;
- (_Bool)setSkipPoliciesForInterface:(id)arg1;	// IMP=0x0000000100039158
- (_Bool)setPoliciesForPersonalDNSWithAgentUUID:(id)arg1;	// IMP=0x0000000100039010
- (_Bool)setPoliciesForDNSProxyProviderUUIDs:(id)arg1 withFlowDivertControlUnit:(unsigned int)arg2 captiveNetworkPluginBundleIDs:(id)arg3;	// IMP=0x000000010003831c
- (_Bool)setAOVPNTunnelDataPoliciesForInterfaceName:(id)arg1 delegateInterfaceName:(id)arg2 isSecondaryConnection:(_Bool)arg3 hasDNS:(_Bool)arg4 hasProxy:(_Bool)arg5 exceptionAction:(long long)arg6;	// IMP=0x00000001000374f8
- (_Bool)setAOVPNTunnelControlPoliciesForPluginPID:(int)arg1 pluginUUIDs:(id)arg2 delegateInterfaceName:(id)arg3 allowSecuritydTraffic:(_Bool)arg4;	// IMP=0x0000000100036938
- (_Bool)setTunnelPoliciesforNexusInterface:(id)arg1;	// IMP=0x0000000100036618
- (_Bool)setAOVPNTunnelDropControlPolicies:(id)arg1 pluginUUIDs:(id)arg2;	// IMP=0x00000001000360f8
- (_Bool)setDropPoliciesForPluginUUIDs:(id)arg1;	// IMP=0x0000000100035d1c
- (_Bool)setAOVPNTunnelControlPoliciesAllowSecuritydForAgentPID:(id)arg1 neagentPid:(int)arg2 neagentUUIDs:(id)arg3 result:(id)arg4 controlPolicyIDs:(id)arg5 order:(unsigned int *)arg6;	// IMP=0x0000000100034e48
- (_Bool)setFlowDivertPoliciesForNetworkRules:(id)arg1 excludeRules:(id)arg2 flowDivertControlUnit:(unsigned int)arg3 hasDNS:(_Bool)arg4 hasProxy:(_Bool)arg5 skipUUIDs:(id)arg6 skipPID:(int)arg7 uid:(unsigned int)arg8;	// IMP=0x00000001000344a0
- (void)addPoliciesForNetworkRule:(id)arg1 result:(id)arg2 order:(unsigned int)arg3;	// IMP=0x0000000100033bfc
- (void)generateConditionsForAppRules:(id)arg1 uid:(unsigned int)arg2 includeNoSplit:(_Bool)arg3 providerUUIDs:(id)arg4 handler:(CDUnknownBlockType)arg5;	// IMP=0x0000000100032cc4
- (_Bool)setPoliciesForFlowDivertRules:(id)arg1 flowDivertControlUnit:(unsigned int)arg2 hasDNS:(_Bool)arg3 hasProxy:(_Bool)arg4 uid:(unsigned int)arg5 providerUUIDs:(id)arg6;	// IMP=0x00000001000326e4
- (_Bool)setPoliciesForPathRules:(id)arg1 pathRouteRules:(id)arg2 fallbackBundleIDs:(id)arg3 fallbackExceptionBundleIDs:(id)arg4 fallbackBackgroundTraffic:(_Bool)arg5 netagentUUID:(id)arg6 uid:(unsigned int)arg7;	// IMP=0x0000000100030aec
- (_Bool)setPoliciesForAppRules:(id)arg1 interfaceName:(id)arg2 agentPIDs:(id)arg3 hasDNS:(_Bool)arg4 hasProxy:(_Bool)arg5 uid:(unsigned int)arg6 criticalDomains:(id)arg7;	// IMP=0x000000010002fcd4
- (id)configAgentUUIDForFlowDivertUnit:(unsigned int)arg1 type:(id)arg2;	// IMP=0x000000010002fbdc
- (id)configAgentUUIDForInterface:(id)arg1 type:(id)arg2;	// IMP=0x000000010002fad0
- (_Bool)setFallbackPoliciesForExceptionAppRules:(id)arg1 interfaceName:(id)arg2 uid:(unsigned int)arg3;	// IMP=0x000000010002ee8c
- (_Bool)setPoliciesForExceptionAppRules:(id)arg1 interfaceName:(id)arg2 uid:(unsigned int)arg3;	// IMP=0x000000010002e2f0
- (id)copyUUIDsForAppRule:(id)arg1 allowSynthesis:(_Bool)arg2 uid:(unsigned int)arg3;	// IMP=0x000000010002e0e8
- (_Bool)setPolicyForContentFilterControlUnit:(unsigned int)arg1 agentPID:(int)arg2 uid:(unsigned int)arg3 settings:(id)arg4 limitToPID:(int)arg5;	// IMP=0x000000010002cc9c
- (_Bool)setPassPoliciesForContentFilter:(id)arg1 order:(unsigned int *)arg2;	// IMP=0x000000010002c7c0
- (_Bool)setFallbackTunnelDataPoliciesForInterfaceName:(id)arg1 outgoingInterfaceName:(id)arg2 isPrimary:(_Bool)arg3 includeRoutes:(id)arg4 excludeRoutes:(id)arg5 domains:(id)arg6;	// IMP=0x000000010002b938
- (_Bool)setTunnelDataPoliciesForInterfaceName:(id)arg1 outgoingInterfaceName:(id)arg2 hasDNS:(_Bool)arg3 hasProxy:(_Bool)arg4 exceptionAction:(long long)arg5;	// IMP=0x000000010002b074
- (_Bool)setControlPassPolicyForVPNAgentWithPID:(int)arg1 outgoingInterfaceName:(id)arg2 hasDNS:(_Bool)arg3 hasProxy:(_Bool)arg4;	// IMP=0x000000010002a520
- (_Bool)setPolicyForVPNAgentWithPIDs:(id)arg1 outgoingInterfaceName:(id)arg2 hasDNS:(_Bool)arg3 hasProxy:(_Bool)arg4;	// IMP=0x0000000100029ec4
- (_Bool)setOnDemandPoliciesForRule:(id)arg1 appRules:(id)arg2 netagentUUID:(id)arg3 uid:(unsigned int)arg4 criticalDomains:(id)arg5;	// IMP=0x0000000100029928
- (_Bool)setFallbackOnDemandPoliciesForRule:(id)arg1 netagentUUID:(id)arg2 uid:(unsigned int)arg3 pauseLevel:(long long)arg4 primaryInterfaceName:(id)arg5 criticalDomains:(id)arg6;	// IMP=0x00000001000280b0
- (_Bool)setOnDemandPoliciesForRule:(id)arg1 netagentUUID:(id)arg2 uid:(unsigned int)arg3 pauseLevel:(long long)arg4 primaryInterfaceName:(id)arg5 criticalDomains:(id)arg6;	// IMP=0x00000001000269cc
- (_Bool)removeSkipPolicies;	// IMP=0x000000010002686c
- (_Bool)removeOnDemandPolicies;	// IMP=0x0000000100026778
- (_Bool)removePoliciesForDelegateInterface:(id)arg1;	// IMP=0x00000001000265f0
- (_Bool)removeContentFilterPolicies;	// IMP=0x0000000100026370
- (_Bool)removePolicies;	// IMP=0x000000010002627c
- (_Bool)removeDropControlPolicies;	// IMP=0x0000000100026170
- (_Bool)removeControlPoliciesForDelegateInterface:(id)arg1;	// IMP=0x0000000100025fe8
- (_Bool)removeDropControlPoliciesForDelegateInterface:(id)arg1;	// IMP=0x0000000100025e60
- (_Bool)removeTunnelDataPolicies;	// IMP=0x0000000100025d6c
- (_Bool)removeControlPolicies;	// IMP=0x0000000100025c78
- (_Bool)unregisterSession;	// IMP=0x0000000100025bec
- (_Bool)registerSession;	// IMP=0x0000000100025b60
- (unsigned int)preFilterOrder;	// IMP=0x0000000100025b58
- (unsigned int)dropAgentOrder;	// IMP=0x0000000100025b50
- (unsigned int)fallbackOrder;	// IMP=0x0000000100025b48
- (unsigned int)dnsProxyBaseOrder;	// IMP=0x0000000100025b40
- (unsigned int)order;	// IMP=0x00000001000259f4
- (void)dealloc;	// IMP=0x0000000100025828
- (id)initWithConfigurationID:(id)arg1 sessionType:(int)arg2 grade:(long long)arg3 tunnelType:(long long)arg4;	// IMP=0x0000000100025818
- (id)initWithConfigurationID:(id)arg1 sessionType:(int)arg2 grade:(long long)arg3 tunnelType:(long long)arg4 tunnelKind:(long long)arg5;	// IMP=0x000000010002567c
- (id)init;	// IMP=0x0000000100025670

@end

