//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "CXCallObserverDelegate-Protocol.h"
#import "FBSDisplayLayoutObserver-Protocol.h"
#import "MCProfileConnectionObserver-Protocol.h"
#import "RPConnectionManagerDelegate-Protocol.h"
#import "RPDaemonProtocol-Protocol.h"
#import "RPRecordingSessionDelegate-Protocol.h"
#import "RPSessionManagerDelegate-Protocol.h"
#import "RPStatusBarAssertionDelegate-Protocol.h"
#import "SBSStatusBarStyleOverridesCoordinatorDelegate-Protocol.h"
#import "UNUserNotificationCenterDelegate-Protocol.h"

@class CXCallObserver, FBSDisplayLayoutMonitor, NSMutableDictionary, NSMutableSet, NSString, NSXPCListener, PHAsset, RPApplicationStateMonitor, RPConnectionManager, RPSessionManager, RPStatusBarAssertion, UNUserNotificationCenter;
@protocol OS_dispatch_queue;

@interface RPRecordingManager : NSObject <RPConnectionManagerDelegate, RPSessionManagerDelegate, RPRecordingSessionDelegate, RPDaemonProtocol, FBSDisplayLayoutObserver, SBSStatusBarStyleOverridesCoordinatorDelegate, RPStatusBarAssertionDelegate, CXCallObserverDelegate, MCProfileConnectionObserver, UNUserNotificationCenterDelegate>
{
    _Bool _microphoneRecording;	// 8 = 0x8
    _Bool _deviceLocked;	// 9 = 0x9
    int __lockToResetToken;	// 12 = 0xc
    NSXPCListener *_publicListener;	// 16 = 0x10
    NSMutableSet *_exemptBundleIdentifiers;	// 24 = 0x18
    NSMutableSet *_exemptWithMicRecordingEnabledBundleIdentifiers;	// 32 = 0x20
    NSMutableDictionary *_lastBackgroundDateByBundleIdentifier;	// 40 = 0x28
    NSObject<OS_dispatch_queue> *_replayAlertQueue;	// 48 = 0x30
    RPSessionManager *_sessionManager;	// 56 = 0x38
    RPConnectionManager *_connectionManager;	// 64 = 0x40
    NSMutableDictionary *_currentAvailableExtensions;	// 72 = 0x48
    FBSDisplayLayoutMonitor *_layoutMonitor;	// 80 = 0x50
    long long _levelOneElementCount;	// 88 = 0x58
    RPApplicationStateMonitor *_applicationStateMonitor;	// 96 = 0x60
    CXCallObserver *_callObserver;	// 104 = 0x68
    UNUserNotificationCenter *_userNotificationCenter;	// 112 = 0x70
    RPStatusBarAssertion *_statusBarAssertion;	// 120 = 0x78
    struct __CFUserNotification *_userNotificationStopRecording;	// 128 = 0x80
    PHAsset *_photoAsset;	// 136 = 0x88
}

- (void).cxx_destruct;	// IMP=0x00000001000155ac
@property(retain, nonatomic) PHAsset *photoAsset; // @synthesize photoAsset=_photoAsset;
@property(nonatomic) struct __CFUserNotification *userNotificationStopRecording; // @synthesize userNotificationStopRecording=_userNotificationStopRecording;
@property(retain, nonatomic) RPStatusBarAssertion *statusBarAssertion; // @synthesize statusBarAssertion=_statusBarAssertion;
@property(retain, nonatomic) UNUserNotificationCenter *userNotificationCenter; // @synthesize userNotificationCenter=_userNotificationCenter;
@property(nonatomic) _Bool deviceLocked; // @synthesize deviceLocked=_deviceLocked;
@property(readonly, nonatomic) int _lockToResetToken; // @synthesize _lockToResetToken=__lockToResetToken;
@property(retain, nonatomic) CXCallObserver *callObserver; // @synthesize callObserver=_callObserver;
@property(retain, nonatomic) RPApplicationStateMonitor *applicationStateMonitor; // @synthesize applicationStateMonitor=_applicationStateMonitor;
@property long long levelOneElementCount; // @synthesize levelOneElementCount=_levelOneElementCount;
@property(retain, nonatomic) FBSDisplayLayoutMonitor *layoutMonitor; // @synthesize layoutMonitor=_layoutMonitor;
@property(retain, nonatomic) NSMutableDictionary *currentAvailableExtensions; // @synthesize currentAvailableExtensions=_currentAvailableExtensions;
@property(retain, nonatomic) RPConnectionManager *connectionManager; // @synthesize connectionManager=_connectionManager;
@property(retain, nonatomic) RPSessionManager *sessionManager; // @synthesize sessionManager=_sessionManager;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *replayAlertQueue; // @synthesize replayAlertQueue=_replayAlertQueue;
@property(retain, nonatomic) NSMutableDictionary *lastBackgroundDateByBundleIdentifier; // @synthesize lastBackgroundDateByBundleIdentifier=_lastBackgroundDateByBundleIdentifier;
@property(retain, nonatomic) NSMutableSet *exemptWithMicRecordingEnabledBundleIdentifiers; // @synthesize exemptWithMicRecordingEnabledBundleIdentifiers=_exemptWithMicRecordingEnabledBundleIdentifiers;
@property(retain, nonatomic) NSMutableSet *exemptBundleIdentifiers; // @synthesize exemptBundleIdentifiers=_exemptBundleIdentifiers;
@property(nonatomic, getter=isMicrophoneRecording) _Bool microphoneRecording; // @synthesize microphoneRecording=_microphoneRecording;
@property(retain, nonatomic) NSXPCListener *publicListener; // @synthesize publicListener=_publicListener;
- (oneway void)reportCameraUsage:(long long)arg1;	// IMP=0x000000010001540c
- (void)timerDidUpdate:(id)arg1;	// IMP=0x000000010001535c
- (void)userNotificationCenter:(id)arg1 didReceiveNotificationResponse:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000001000150e0
- (id)createNotificationRequestWithAssetURL:(id)arg1;	// IMP=0x0000000100014c94
- (void)displayScreenRecorderNotificationWithURL:(id)arg1;	// IMP=0x0000000100014b28
- (void)statusBarCoordinator:(id)arg1 invalidatedRegistrationWithError:(id)arg2;	// IMP=0x0000000100014a58
- (_Bool)statusBarCoordinator:(id)arg1 receivedTapWithContext:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;	// IMP=0x00000001000149c0
- (void)saveSystemRecordingToCameraRoll:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100014894
- (_Bool)showStopRecordingAlert;	// IMP=0x0000000100014490
- (_Bool)showResumeBroadcastAlertWithSession:(id)arg1 contextID:(unsigned int)arg2;	// IMP=0x0000000100014144
- (_Bool)showAlertForBroadcastSession:(id)arg1 withError:(id)arg2;	// IMP=0x0000000100013c84
- (_Bool)showAlertRecordingSessionFailedToSaveFile:(id)arg1 withError:(id)arg2;	// IMP=0x0000000100013a20
- (_Bool)showAlertForRecordingSession:(id)arg1 withError:(id)arg2;	// IMP=0x00000001000137e4
- (void)loadBroadcastUploadExtensionWithBaseIdentifier:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000134f8
- (void)handleUpdateDisplayLayout:(id)arg1;	// IMP=0x00000001000132e4
- (void)recordingSession:(id)arg1 stoppedWithError:(id)arg2 movieURL:(id)arg3;	// IMP=0x0000000100013018
- (void)broadcastSession:(id)arg1 didUpdateDuration:(double)arg2;	// IMP=0x0000000100012f3c
- (void)broadcastSession:(id)arg1 didUpdateServiceInfo:(id)arg2;	// IMP=0x0000000100012e70
- (void)recordingSession:(id)arg1 stoppedWithError:(id)arg2;	// IMP=0x0000000100012e1c
- (id)getNotificationBodyTextForSession:(id)arg1 isBroadcast:(_Bool)arg2 cameraEnabled:(_Bool)arg3 microphoneEnabled:(_Bool)arg4;	// IMP=0x0000000100012c28
- (id)getNotificationTitleTextForSession:(id)arg1 isBroadcast:(_Bool)arg2;	// IMP=0x0000000100012ae0
- (_Bool)showAcknowledgementAlertForSession:(id)arg1 isBroadcast:(_Bool)arg2 microphone:(_Bool)arg3 camera:(_Bool)arg4;	// IMP=0x000000010001249c
- (void)updateExemptionListWithSession:(id)arg1;	// IMP=0x00000001000123a0
- (_Bool)isExemptFromAcknowledgementAlertSession:(id)arg1;	// IMP=0x0000000100012300
- (void)applicationDisconnectedWithBundleID:(id)arg1 withProcessIdentifier:(int)arg2;	// IMP=0x000000010001218c
- (void)connectionManagerDidAcceptNewConnection:(id)arg1 bundleIdentifier:(id)arg2;	// IMP=0x000000010001206c
- (oneway void)updateProcessIDForAudioCaptureWithPID:(int)arg1;	// IMP=0x0000000100011f74
- (oneway void)setMicrophoneEnabled:(_Bool)arg1;	// IMP=0x0000000100011ec8
- (oneway void)discardRecordingWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000100011d94
- (oneway void)resumeRecordingWithWindowLayerContextID:(unsigned int)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000010001190c
- (oneway void)pauseRecording;	// IMP=0x0000000100011840
- (void)resetStatesForSession:(id)arg1;	// IMP=0x000000010001177c
- (void)recordingSessionClientDidEnterBackground:(id)arg1;	// IMP=0x00000001000115f4
- (void)recordingSessionClientDidEnterForeground:(id)arg1;	// IMP=0x0000000100011440
- (id)getCallingConnectionRecordingSession;	// IMP=0x00000001000113b8
- (id)getCallingConnectionBundleID;	// IMP=0x0000000100011324
- (void)expireAcknowledgementExemptionsForBundleID:(id)arg1;	// IMP=0x0000000100010f8c
- (void)failedToSaveRecordingForRecordingSession:(id)arg1 withError:(id)arg2;	// IMP=0x0000000100010e40
- (void)prepareForStoppingSession:(id)arg1;	// IMP=0x0000000100010ddc
- (oneway void)saveVideoToCameraRoll:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x000000010001062c
- (oneway void)stopRecordingWithStartClipDuration:(double)arg1 endClipDuration:(double)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x00000001000103d8
- (oneway void)stopRecordingWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000100010344
- (oneway void)macApplicationDidBecomeActiveWithContextID:(unsigned int)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000102b8
- (oneway void)macApplicationDidResignActive;	// IMP=0x00000001000101d4
- (void)checkAndPlaySystemRecordSound:(id)arg1 isRecordingOn:(_Bool)arg2;	// IMP=0x0000000100010144
- (void)clearSystemRecordingUI:(id)arg1;	// IMP=0x00000001000100a0
- (oneway void)startRecordingWindowLayerContextIDs:(id)arg1 windowSize:(struct CGSize)arg2 microphoneEnabled:(_Bool)arg3 cameraEnabled:(_Bool)arg4 broadcast:(_Bool)arg5 systemRecording:(_Bool)arg6 captureEnabled:(_Bool)arg7 listenerEndpoint:(id)arg8 withHandler:(CDUnknownBlockType)arg9;	// IMP=0x000000010000efbc
- (void)checkRecordingRequirementsForSession:(id)arg1 systemRecording:(_Bool)arg2 isBroadcast:(_Bool)arg3 microphone:(_Bool)arg4 camera:(_Bool)arg5 contextIDs:(id)arg6 withHandler:(CDUnknownBlockType)arg7;	// IMP=0x000000010000e840
- (_Bool)clientHasSystemEntitlements;	// IMP=0x000000010000e7a0
- (_Bool)checkContextIDsMatch:(id)arg1;	// IMP=0x000000010000e59c
- (oneway void)setBroadcastURL:(id)arg1;	// IMP=0x000000010000e530
- (oneway void)setHasUserConsentForMicrophone:(_Bool)arg1;	// IMP=0x000000010000e4e8
- (oneway void)setHasUserConsentForCamera:(_Bool)arg1;	// IMP=0x000000010000e4a0
- (oneway void)synchronousIsBroadcastingWithPreferredExtension:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x000000010000e350
- (oneway void)synchronousGetCurrentState:(CDUnknownBlockType)arg1;	// IMP=0x000000010000dfc0
- (oneway void)setupBroadcastWithHostBundleID:(id)arg1 broadcastExtensionBundleID:(id)arg2 broadcastConfigurationData:(id)arg3 userInfo:(id)arg4 handler:(CDUnknownBlockType)arg5;	// IMP=0x000000010000db6c
- (oneway void)getSystemBroadcastExtensionInfo:(CDUnknownBlockType)arg1;	// IMP=0x000000010000d6a0
- (void)endTransaction;	// IMP=0x000000010000d69c
- (void)beginTransaction;	// IMP=0x000000010000d698
- (void)dealloc;	// IMP=0x000000010000d598
- (void)finishStartup;	// IMP=0x000000010000d588
- (void)profileConnectionDidReceiveEffectiveSettingsChangedNotification:(id)arg1 userInfo:(id)arg2;	// IMP=0x000000010000d4f8
- (void)setUpDeviceLockNotifications;	// IMP=0x000000010000d34c
- (void)callObserver:(id)arg1 callChanged:(id)arg2;	// IMP=0x000000010000d0d4
- (void)stopRecordingSessionWithInsufficientSpace:(id)arg1 systemRecording:(_Bool)arg2 discardRecording:(_Bool)arg3;	// IMP=0x000000010000ce70
- (id)init;	// IMP=0x000000010000c228

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

