//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import "CSDCallDataSource.h"

#import "CSDCallProviderManagerDelegate-Protocol.h"
#import "CSDCallSourceFetcherDataSource-Protocol.h"
#import "CSDManagedDeviceMonitorDelegate-Protocol.h"
#import "CSDProviderCallDelegate-Protocol.h"
#import "CXCallControllerHostDelegate-Protocol.h"
#import "CXCallSourceManagerDelegate-Protocol.h"

@class CSDCallFilterManager, CSDCallProviderManager, CSDCallSourceFetcher, CSDCoreTelephonyClient, CSDFaceTimeProviderDelegate, CSDRelayCallDataSource, CSDScreenTimeCallFilter, CSDVoIPProcessAssertionManager, CXCallControllerHost, CXCallSource, CXCallSourceManager, CXInProcessCallSource, NSMutableDictionary, NSString;
@protocol CSDManagedDeviceMonitor, CSDRouteManager, CXProviderDelegatePrivate;

@interface CSDProviderCallDataSource : CSDCallDataSource <CXCallControllerHostDelegate, CSDCallProviderManagerDelegate, CSDCallSourceFetcherDataSource, CSDManagedDeviceMonitorDelegate, CXCallSourceManagerDelegate, CSDProviderCallDelegate>
{
    _Bool _deferCommittingTransactions;	// 8 = 0x8
    CSDCoreTelephonyClient *_coreTelephonyClient;	// 16 = 0x10
    CSDCallProviderManager *_providerManager;	// 24 = 0x18
    CSDCallFilterManager *_callFilterManager;	// 32 = 0x20
    CSDVoIPProcessAssertionManager *_processAssertionManager;	// 40 = 0x28
    CXCallSourceManager *_callSourceManager;	// 48 = 0x30
    CXCallControllerHost *_callControllerHost;	// 56 = 0x38
    CXInProcessCallSource *_faceTimeCallSource;	// 64 = 0x40
    CSDFaceTimeProviderDelegate *_faceTimeProviderDelegate;	// 72 = 0x48
    CXInProcessCallSource *_tinCanCallSource;	// 80 = 0x50
    id <CXProviderDelegatePrivate> _tinCanProviderDelegate;	// 88 = 0x58
    CSDCallSourceFetcher *_callSourceFetcher;	// 96 = 0x60
    CSDScreenTimeCallFilter *_screenTimeCallFilter;	// 104 = 0x68
    id <CSDManagedDeviceMonitor> _managedDeviceMonitor;	// 112 = 0x70
    NSMutableDictionary *_pendingCallsToChatUUIDs;	// 120 = 0x78
    NSMutableDictionary *_pendingPulledCallContexts;	// 128 = 0x80
    CSDRelayCallDataSource *_relayCallDataSource;	// 136 = 0x88
    id <CSDRouteManager> _routeManager;	// 144 = 0x90
    CDUnknownBlockType _dndAllowsCall;	// 152 = 0x98
    CDUnknownBlockType _supportsPrimaryCalling;	// 160 = 0xa0
    CDUnknownBlockType _shouldPreferRelayOverDirectSecondaryCalling;	// 168 = 0xa8
    CDUnknownBlockType _shouldFilterCall;	// 176 = 0xb0
    CDUnknownBlockType _shouldDisconnectCallForDowntime;	// 184 = 0xb8
}

+ (Class)callClass;	// IMP=0x0000000100125438
- (void).cxx_destruct;	// IMP=0x000000010012f778
@property(copy, nonatomic) CDUnknownBlockType shouldDisconnectCallForDowntime; // @synthesize shouldDisconnectCallForDowntime=_shouldDisconnectCallForDowntime;
@property(copy, nonatomic) CDUnknownBlockType shouldFilterCall; // @synthesize shouldFilterCall=_shouldFilterCall;
@property(copy, nonatomic) CDUnknownBlockType shouldPreferRelayOverDirectSecondaryCalling; // @synthesize shouldPreferRelayOverDirectSecondaryCalling=_shouldPreferRelayOverDirectSecondaryCalling;
@property(copy, nonatomic) CDUnknownBlockType supportsPrimaryCalling; // @synthesize supportsPrimaryCalling=_supportsPrimaryCalling;
@property(copy, nonatomic) CDUnknownBlockType dndAllowsCall; // @synthesize dndAllowsCall=_dndAllowsCall;
@property(retain, nonatomic) id <CSDRouteManager> routeManager; // @synthesize routeManager=_routeManager;
@property(nonatomic) __weak CSDRelayCallDataSource *relayCallDataSource; // @synthesize relayCallDataSource=_relayCallDataSource;
@property(readonly, nonatomic) NSMutableDictionary *pendingPulledCallContexts; // @synthesize pendingPulledCallContexts=_pendingPulledCallContexts;
@property(readonly, nonatomic) NSMutableDictionary *pendingCallsToChatUUIDs; // @synthesize pendingCallsToChatUUIDs=_pendingCallsToChatUUIDs;
@property(readonly, nonatomic) id <CSDManagedDeviceMonitor> managedDeviceMonitor; // @synthesize managedDeviceMonitor=_managedDeviceMonitor;
@property(retain, nonatomic) CSDScreenTimeCallFilter *screenTimeCallFilter; // @synthesize screenTimeCallFilter=_screenTimeCallFilter;
@property(readonly, nonatomic) CSDCallSourceFetcher *callSourceFetcher; // @synthesize callSourceFetcher=_callSourceFetcher;
@property(readonly, nonatomic) id <CXProviderDelegatePrivate> tinCanProviderDelegate; // @synthesize tinCanProviderDelegate=_tinCanProviderDelegate;
@property(readonly, nonatomic) CXInProcessCallSource *tinCanCallSource; // @synthesize tinCanCallSource=_tinCanCallSource;
@property(readonly, nonatomic) CSDFaceTimeProviderDelegate *faceTimeProviderDelegate; // @synthesize faceTimeProviderDelegate=_faceTimeProviderDelegate;
@property(readonly, nonatomic) CXInProcessCallSource *faceTimeCallSource; // @synthesize faceTimeCallSource=_faceTimeCallSource;
@property(nonatomic) _Bool deferCommittingTransactions; // @synthesize deferCommittingTransactions=_deferCommittingTransactions;
@property(readonly, nonatomic) CXCallControllerHost *callControllerHost; // @synthesize callControllerHost=_callControllerHost;
@property(readonly, nonatomic) CXCallSourceManager *callSourceManager; // @synthesize callSourceManager=_callSourceManager;
@property(readonly, nonatomic) CSDVoIPProcessAssertionManager *processAssertionManager; // @synthesize processAssertionManager=_processAssertionManager;
@property(retain, nonatomic) CSDCallFilterManager *callFilterManager; // @synthesize callFilterManager=_callFilterManager;
@property(retain, nonatomic) CSDCallProviderManager *providerManager; // @synthesize providerManager=_providerManager;
- (id)policyForAddresses:(id)arg1 forBundleIdentifier:(id)arg2;	// IMP=0x000000010012f4e0
- (_Bool)shouldRestrictAddresses:(id)arg1 forBundleIdentifier:(id)arg2 performSynchronously:(_Bool)arg3;	// IMP=0x000000010012f43c
- (void)managedDeviceStateChangedFor:(id)arg1;	// IMP=0x000000010012f28c
- (id)callSourceWithIdentifier:(id)arg1;	// IMP=0x000000010012f20c
- (void)providersChangedForProviderManager:(id)arg1;	// IMP=0x000000010012f09c
- (void)callControllerHost:(id)arg1 clientWithIdentifier:(id)arg2 requestedTransaction:(id)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x000000010012ed18
- (void)callSourcesChangedForCallSourceManager:(id)arg1;	// IMP=0x000000010012e934
- (void)callSourceManager:(id)arg1 completedTransactionGroup:(id)arg2;	// IMP=0x000000010012e138
- (void)callSource:(id)arg1 requestedTransaction:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000010012e014
- (void)callSource:(id)arg1 reportedCallWithUUID:(id)arg2 crossDeviceIdentifier:(id)arg3 changedBytesOfDataUsed:(long long)arg4;	// IMP=0x000000010012de88
- (void)callSource:(id)arg1 reportedCallWithUUID:(id)arg2 changedMeterLevel:(float)arg3 forDirection:(long long)arg4;	// IMP=0x000000010012dd34
- (void)callSource:(id)arg1 reportedCallWithUUID:(id)arg2 changedFrequencyData:(id)arg3 forDirection:(long long)arg4;	// IMP=0x000000010012dbb8
- (void)callSource:(id)arg1 reportedAudioFinishedForCallWithUUID:(id)arg2;	// IMP=0x000000010012d924
- (void)callSource:(id)arg1 reportedOutgoingCallWithUUID:(id)arg2 connectedAtDate:(id)arg3;	// IMP=0x000000010012d5e4
- (void)callSource:(id)arg1 reportedOutgoingCallWithUUID:(id)arg2 startedConnectingAtDate:(id)arg3;	// IMP=0x000000010012d2c4
- (void)callSource:(id)arg1 reportedOutgoingCallWithUUID:(id)arg2 sentInvitationAtDate:(id)arg3;	// IMP=0x000000010012cfac
- (void)callSource:(id)arg1 reportedCallWithUUID:(id)arg2 endedAtDate:(id)arg3 privateReason:(long long)arg4 failureContext:(id)arg5;	// IMP=0x000000010012c674
- (void)callSource:(id)arg1 reportedCallWithUUID:(id)arg2 updated:(id)arg3;	// IMP=0x000000010012c0f0
- (void)callSource:(id)arg1 reportedNewIncomingCallWithUUID:(id)arg2 update:(id)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x000000010012b194
- (_Bool)callSource:(id)arg1 shouldProcessAction:(id)arg2 error:(id *)arg3;	// IMP=0x000000010012b0a4
- (void)callSource:(id)arg1 registeredWithConfiguration:(id)arg2;	// IMP=0x000000010012ae6c
- (void)performStartCallAction:(id)arg1 forCall:(id)arg2;	// IMP=0x000000010012a704
- (void)performCallActions:(id)arg1 forCall:(id)arg2;	// IMP=0x000000010012a518
- (void)performCallAction:(id)arg1 forCall:(id)arg2;	// IMP=0x000000010012a3a4
- (id)providerWithIdentifier:(id)arg1;	// IMP=0x000000010012a300
- (id)callSourceForJoinConversationRequest:(id)arg1;	// IMP=0x000000010012a2f4
- (id)callSourceForDialRequest:(id)arg1;	// IMP=0x000000010012a0e0
- (void)pullCallWithHandoffActivityUserInfo:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0000000100129d54
- (void)sendMMIOrUSSDCodeWithRequest:(id)arg1;	// IMP=0x0000000100129b00
- (void)setTTYType:(int)arg1 forCalls:(id)arg2;	// IMP=0x0000000100129a28
- (void)setUplinkMuted:(_Bool)arg1 forCalls:(id)arg2;	// IMP=0x0000000100129950
- (void)disconnectCalls:(id)arg1 whileHoldingCalls:(id)arg2 andUnholdingCalls:(id)arg3 andUngroupingCalls:(id)arg4;	// IMP=0x00000001001297dc
- (void)ungroupCall:(id)arg1 fromOtherCallsInGroup:(id)arg2;	// IMP=0x00000001001296d4
- (void)groupCalls:(id)arg1 withCalls:(id)arg2;	// IMP=0x00000001001295cc
- (void)holdCalls:(id)arg1 whileUnholdingCalls:(id)arg2;	// IMP=0x00000001001294c4
- (void)answerCall:(id)arg1 withRequest:(id)arg2 whileDisconnectingCalls:(id)arg3 andHoldingCalls:(id)arg4;	// IMP=0x0000000100129350
- (void)_addSupplementalActionsForRequestedTransaction:(id)arg1 onCallSource:(id)arg2;	// IMP=0x0000000100128e34
- (void)_performRequestedTransaction:(id)arg1 onCallSource:(id)arg2;	// IMP=0x00000001001289ec
- (void)_processRequestedTransaction:(id)arg1 fromCallSource:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000010012883c
- (_Bool)_shouldAllowRequestedTransaction:(id)arg1 forCallSource:(id)arg2 error:(id *)arg3;	// IMP=0x00000001001285c0
- (_Bool)_shouldAllowRequestedAction:(id)arg1 forCallSource:(id)arg2 shouldValidateUserIntent:(_Bool)arg3 error:(id *)arg4;	// IMP=0x0000000100127d28
- (_Bool)_actionRequiresReasonableUserIntent:(id)arg1;	// IMP=0x0000000100127c70
- (void)_processCompletedCallAction:(id)arg1 forCall:(id)arg2 allowRevertingState:(_Bool)arg3;	// IMP=0x0000000100126de0
- (void)_endMutuallyExclusiveCalls;	// IMP=0x0000000100126bb4
- (_Bool)_allowRevertingStateForCompletedTransactionGroup:(id)arg1;	// IMP=0x0000000100126a54
- (void)_commitUncommittedTransactions;	// IMP=0x0000000100126a14
- (void)_deferCommittingTransactionsUntilAfterRunningBlock:(CDUnknownBlockType)arg1;	// IMP=0x000000010012699c
- (id)_ISOCountryCodeForCallWithUUID:(id)arg1 provider:(id)arg2 callUpdate:(id)arg3;	// IMP=0x000000010012684c
- (id)_ISOCountryCodeForCall:(id)arg1;	// IMP=0x0000000100126704
- (id)_providerForCallSource:(id)arg1;	// IMP=0x0000000100126638
- (id)_callGroupsWithBackingCallSource:(id)arg1;	// IMP=0x00000001001262c4
- (id)_callWithUUID:(id)arg1 controllableByCallSource:(id)arg2;	// IMP=0x00000001001260d8
- (id)_callWithUUID:(id)arg1 backingCallSource:(id)arg2;	// IMP=0x0000000100125edc
- (id)_relayCallWithUUID:(id)arg1;	// IMP=0x0000000100125e34
- (id)_callWithUUID:(id)arg1;	// IMP=0x0000000100125dd0
@property(readonly, nonatomic) CXCallSource *telephonyCallSource;
- (id)callGroupUUIDToCalls;	// IMP=0x0000000100125a90
@property(readonly, nonatomic) CSDCoreTelephonyClient *coreTelephonyClient; // @synthesize coreTelephonyClient=_coreTelephonyClient;
- (void)stopTrackingCall:(id)arg1;	// IMP=0x0000000100125764
- (void)startTrackingCall:(id)arg1;	// IMP=0x0000000100125614
- (void)registerCall:(id)arg1;	// IMP=0x0000000100125444
- (id)initWithCallStateController:(id)arg1 queue:(id)arg2;	// IMP=0x0000000100124c9c

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

