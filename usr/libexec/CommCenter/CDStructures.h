//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct ActiveSubscriptions {
    struct vector<rest::SubscriptionContext, std::__1::allocator<rest::SubscriptionContext>> fSubscriptions;
};

struct CCXpcServerEntitlementChecker;

struct CFSharedRef<const __CFData> {
    struct __CFData *fRef;
};

struct CFSharedRef<const __CFDictionary> {
    struct __CFDictionary *_field1;
};

struct CFSharedRef<const __CFString> {
    struct __CFString *fRef;
};

struct CFSharedRef<const __CFURL> {
    struct __CFURL *_field1;
};

struct CTXPCClientTracker {
    int _field1;
    basic_string_90719d97 _field2;
    struct vector<CTXPCRequestTracker, std::__1::allocator<CTXPCRequestTracker>> _field3;
};

struct CTXPCRequestTracker;

struct CallControlFailure {
    basic_string_90719d97 _field1;
    int _field2;
    vector_ebb6ef3e _field3;
    basic_string_90719d97 _field4;
};

struct CallFrequencyData {
    basic_string_90719d97 fCallUuid;
    object_c1a17bc6 fFrequencyData;
    _Bool fIsInputData;
};

struct CallToneCompleteInfo {
    basic_string_90719d97 _field1;
};

struct CarrierSpaceControllerInterface;

struct CellularPlanBootstrapAssertion;

struct CellularPlanCloudSenderInterface;

struct CellularPlanController;

struct CellularPlanControllerDebugInterface;

struct CellularPlanControllerInterface;

struct CellularPlanIDSCallbacks;

struct CellularPlanIDSMessage {
    basic_string_90719d97 _field1;
    basic_string_90719d97 _field2;
    unsigned short _field3;
    CFSharedRef_6edd8422 _field4;
    struct CFSharedRef<const __CFURL> _field5;
    _Bool _field6;
    int _field7;
    int _field8;
};

struct CellularPlanSettings;

struct CommonDataConnectionAgentData {
    char regStatus;
    char inHomeCountry;
    char dch;
    char utbf;
    char hoGeneration;
};

struct CurrentCallInfo;

struct DERDecoder {
    char *_field1;
    unsigned int _field2;
};

struct DataConnectionAgent {
    CDUnknownFunctionPointerType *_field1;
    struct shared_ptr<const PersonalityInfo> _field2;
    CDUnknownFunctionPointerType *_field3;
    struct weak_ptr<DataConnectionAgentInterface> _field4;
    struct queue {
        struct object {
            struct dispatch_object_s *fObj;
        } _field1;
    } _field5;
    struct workloop _field6;
    struct OsLogLogger _field7;
    shared_ptr_0fd4464b _field8;
    char *_field9;
    char *_field10;
    CDUnknownFunctionPointerType *_field11;
    id _field12;
    id _field13;
    basic_string_90719d97 _field14;
    _Bool _field15;
    _Bool _field16;
    _Bool _field17;
    _Bool _field18;
    basic_string_90719d97 _field19;
    struct shared_ptr<DataConnectionAgentPolicyInterface> _field20;
    _Bool _field21;
    int _field22;
    id _field23;
    struct queue {
        struct object {
            struct dispatch_object_s *fObj;
        } _field1;
    } _field24;
    struct WriteProtectedDataConnectionAgentData _field25;
    struct DataConnectionAgentObserver *_field26;
};

struct DataConnectionAgentData {
    struct CommonDataConnectionAgentData common;
    int type;
};

struct DataConnectionAgentInterface;

struct DataConnectionAgentInterfaceAvailabilityObserver {
    CDUnknownFunctionPointerType *_field1;
};

struct DataConnectionAgentObserver;

struct DataConnectionAgentPolicyInterface;

struct DataNetworkMonitor;

struct EntitlementValidator;

struct LogServer;

struct Logger;

struct LoggerBase<std::__1::shared_ptr<ctu::LogServer>> {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    struct OSSharedRef<NSObject<OS_os_log>> _field3;
    unsigned char _field4;
    unsigned char _field5;
    struct shared_ptr<ctu::LogServer> _field6;
};

struct NanoRegistryObserverDelegate;

struct OSSharedRef<NSObject<OS_os_log>> {
    id _field1;
};

struct OSSharedRef<os_log_s> {
    struct os_log_s *fRef;
};

struct OsLogContext {
    char *_field1;
    struct OSSharedRef<os_log_s> _field2;
};

struct OsLogLogger {
    struct OSSharedRef<os_log_s> _field1;
};

struct OverloadEqualityOperators<std::__1::map<PersonalityID, VoWiFiProvisioningState, std::__1::less<PersonalityID>, std::__1::allocator<std::__1::pair<const PersonalityID, VoWiFiProvisioningState>>>> {
    struct __tree<std::__1::__value_type<PersonalityID, VoWiFiProvisioningState>, std::__1::__map_value_compare<PersonalityID, std::__1::__value_type<PersonalityID, VoWiFiProvisioningState>, std::__1::less<PersonalityID>, true>, std::__1::allocator<std::__1::__value_type<PersonalityID, VoWiFiProvisioningState>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<PersonalityID, VoWiFiProvisioningState>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<PersonalityID, std::__1::__value_type<PersonalityID, VoWiFiProvisioningState>, std::__1::less<PersonalityID>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct P2PDeviceDescr;

struct PersonalityInfo;

struct ProcInfo;

struct PushController;

struct Registry;

struct RestModule {
    struct shared_ptr<ctu::RestModuleState> fState;
};

struct RestModuleState;

struct SubscriberUserAlertManagerInterface;

struct SubscriptionContext;

struct SubscriptionInfo {
    struct map<subscriber::SimSlot, rest::SubscriptionContext, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, rest::SubscriptionContext>>> fSubscriptions;
};

struct Timer;

struct VinylProfileDetails {
    struct array<unsigned char, 16> _field1;
    basic_string_90719d97 _field2;
    basic_string_90719d97 _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
    basic_string_90719d97 _field8;
    basic_string_90719d97 _field9;
    basic_string_90719d97 _field10;
    basic_string_90719d97 _field11;
};

struct WeaLocationDelegateInterface;

struct WriteProtectedDataConnectionAgentData {
    struct DataConnectionAgentData _field1;
    struct DataConnectionAgentData _field2;
    _Bool _field3;
};

struct __SecKey {
    struct __CFRuntimeBase {
        unsigned long long _field1;
        _Atomic unsigned long long _field2;
    } _field1;
    struct __SecKeyDescriptor *_field2;
    void *_field3;
};

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct a8;

struct aligned_storage<CellularPlanIDSDevice> {
    union dummy_u _field1;
};

struct array<unsigned char, 16> {
    unsigned char _field1[16];
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *__data_;
                    unsigned long long __size_;
                    unsigned long long __cap_;
                } __l;
                struct __short {
                    char __data_[23];
                    struct {
                        unsigned char __size_;
                    } ;
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __value_;
    } __r_;
};

struct bitset<8> {
    unsigned long long _field1;
};

struct block<bool (^)(const __CFString *, const void *)> {
    CDUnknownBlockType fBlock;
};

struct block<void (^)(const __CFDictionary *, const __CFArray *, bool)> {
    CDUnknownBlockType fBlock;
};

struct block<void (^)(const __CFString *, const __CFString *, const void *)> {
    CDUnknownBlockType fBlock;
};

struct block<void (^)(const __CFString *, const __CFString *, const void *, const __CFURL *, bool &)> {
    CDUnknownBlockType fBlock;
};

struct block<void (^)(iCloudAccountEvent, const std::__1::basic_string<char>&)> {
    CDUnknownBlockType fBlock;
};

struct block<void (^)(std::__1::shared_ptr<CallServicesSyncBase::DevsInfo>)> {
    CDUnknownBlockType fBlock;
};

struct block<void (^)(std::__1::shared_ptr<P2PDeviceDescr>)> {
    CDUnknownBlockType fBlock;
};

struct block<void (^)(unsigned int)> {
    CDUnknownBlockType fBlock;
};

struct command_responder_t<bool> {
    _Bool _field1;
    struct shared_ptr<xpc::object> _field2;
};

struct command_responder_t<xpc::dict> {
    struct dict _field1;
    struct shared_ptr<xpc::object> _field2;
};

struct connection {
    struct object {
        void *_field1;
    } _field1;
};

struct dict {
    object_c1a17bc6 fObj;
};

struct duration<long long, std::__1::ratio<1, 1000000>> {
    long long __rep_;
};

struct function<void ()> {
    struct __value_func<void ()> {
        struct type __buf_;
        struct __base<void ()> *__f_;
    } __f_;
};

struct function<void (const InternetReachabilityInterface &)> {
    struct __value_func<void (const InternetReachabilityInterface &)> {
        struct type __buf_;
        struct __base<void (const InternetReachabilityInterface &)> *__f_;
    } __f_;
};

struct function<void (const InternetStatus &)> {
    struct __value_func<void (const InternetStatus &)> {
        struct type __buf_;
        struct __base<void (const InternetStatus &)> *__f_;
    } __f_;
};

struct function<void (const WifiStatus &)> {
    struct __value_func<void (const WifiStatus &)> {
        struct type __buf_;
        struct __base<void (const WifiStatus &)> *__f_;
    } __f_;
};

struct function<void (const bool &)> {
    struct __value_func<void (const bool &)> {
        struct type __buf_;
        struct __base<void (const bool &)> *__f_;
    } __f_;
};

struct group_session {
    struct object {
        struct dispatch_object_s *fObj;
    } _field1;
};

struct iCloudAccountNotificator;

struct map<NSXPCConnection *, (anonymous namespace)::ClientInfo, std::__1::less<NSXPCConnection *>, std::__1::allocator<std::__1::pair<NSXPCConnection *const, (anonymous namespace)::ClientInfo>>> {
    struct __tree<std::__1::__value_type<NSXPCConnection *, (anonymous namespace)::ClientInfo>, std::__1::__map_value_compare<NSXPCConnection *, std::__1::__value_type<NSXPCConnection *, (anonymous namespace)::ClientInfo>, std::__1::less<NSXPCConnection *>, true>, std::__1::allocator<std::__1::__value_type<NSXPCConnection *, (anonymous namespace)::ClientInfo>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<NSXPCConnection *, (anonymous namespace)::ClientInfo>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<NSXPCConnection *, std::__1::__value_type<NSXPCConnection *, (anonymous namespace)::ClientInfo>, std::__1::less<NSXPCConnection *>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<PersonalityID, CallStateSummary, std::__1::less<PersonalityID>, std::__1::allocator<std::__1::pair<const PersonalityID, CallStateSummary>>> {
    struct __tree<std::__1::__value_type<PersonalityID, CallStateSummary>, std::__1::__map_value_compare<PersonalityID, std::__1::__value_type<PersonalityID, CallStateSummary>, std::__1::less<PersonalityID>, true>, std::__1::allocator<std::__1::__value_type<PersonalityID, CallStateSummary>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<PersonalityID, CallStateSummary>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<PersonalityID, std::__1::__value_type<PersonalityID, CallStateSummary>, std::__1::less<PersonalityID>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void (^)(const __CFString *, bool, int)>, (anonymous namespace)::compareCFStringsSharedRef, std::__1::allocator<std::__1::pair<const ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void (^)(const __CFString *, bool, int)>>>> {
    struct __tree<std::__1::__value_type<ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void (^)(const __CFString *, bool, int)>>, std::__1::__map_value_compare<ctu::cf::CFSharedRef<const __CFString>, std::__1::__value_type<ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void (^)(const __CFString *, bool, int)>>, (anonymous namespace)::compareCFStringsSharedRef, true>, std::__1::allocator<std::__1::__value_type<ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void (^)(const __CFString *, bool, int)>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void (^)(const __CFString *, bool, int)>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<ctu::cf::CFSharedRef<const __CFString>, std::__1::__value_type<ctu::cf::CFSharedRef<const __CFString>, dispatch::block<void (^)(const __CFString *, bool, int)>>, (anonymous namespace)::compareCFStringsSharedRef, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::__1::basic_string<char>, std::__1::tuple<void (^)(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::tuple<void (^)(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::tuple<void (^)(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::tuple<void (^)(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::tuple<void (^)(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::tuple<void (^)(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::tuple<void (^)(ctu::result<CellularPlanIDSMessage, CellularPlanIDSError>), std::__1::unique_ptr<ctu::Timer, std::__1::default_delete<ctu::Timer>>>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<subscriber::SimSlot, MCC, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, MCC>>> {
    struct __tree<std::__1::__value_type<subscriber::SimSlot, MCC>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, MCC>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, MCC>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, MCC>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, MCC>, std::__1::less<subscriber::SimSlot>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<subscriber::SimSlot, bool, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, bool>>> {
    struct __tree<std::__1::__value_type<subscriber::SimSlot, bool>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, bool>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, bool>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, bool>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, bool>, std::__1::less<subscriber::SimSlot>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<subscriber::SimSlot, rest::SubscriptionContext, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, rest::SubscriptionContext>>> {
    struct __tree<std::__1::__value_type<subscriber::SimSlot, rest::SubscriptionContext>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, rest::SubscriptionContext>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, rest::SubscriptionContext>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, rest::SubscriptionContext>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, rest::SubscriptionContext>, std::__1::less<subscriber::SimSlot>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>>>> {
    struct __tree<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>>, std::__1::less<subscriber::SimSlot>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>>, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>>>>> {
    struct __tree<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>>>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>>>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>>>, std::__1::less<subscriber::SimSlot>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<subscriber::SimSlot, xpc::dict, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, xpc::dict>>> {
    struct __tree<std::__1::__value_type<subscriber::SimSlot, xpc::dict>, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, xpc::dict>, std::__1::less<subscriber::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<subscriber::SimSlot, xpc::dict>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<subscriber::SimSlot, xpc::dict>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<subscriber::SimSlot, std::__1::__value_type<subscriber::SimSlot, xpc::dict>, std::__1::less<subscriber::SimSlot>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct optional<CellularPlanIDSDevice> {
    _Bool _field1;
    struct aligned_storage<CellularPlanIDSDevice> _field2;
};

struct os_log_s;

struct pair<double, double> {
    double _field1;
    double _field2;
};

struct pair<std::__1::pair<double, double>, double> {
    struct pair<double, double> _field1;
    double _field2;
};

struct property_derived_sink_t<emergency_numbers::for_voice> {
    struct map<subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>>, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>>>>> fValue;
};

struct property_derived_sink_t<radio_mode::is_online> {
    _Bool fValue;
};

struct property_sink_t<call_capabilities> {
    struct map<subscriber::SimSlot, xpc::dict, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, xpc::dict>>> fValue;
};

struct property_sink_t<call_frequency_data> {
    struct CallFrequencyData fValue;
};

struct property_sink_t<call_state> {
    struct map<PersonalityID, CallStateSummary, std::__1::less<PersonalityID>, std::__1::allocator<std::__1::pair<const PersonalityID, CallStateSummary>>> fValue;
};

struct property_sink_t<current_calls> {
    vector_59176b0e fValue;
};

struct property_sink_t<disambiguation_emergency_numbers> {
    struct map<subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, std::__1::vector<DisambiguationEmergencyNumber, std::__1::allocator<DisambiguationEmergencyNumber>>>>> fValue;
};

struct property_sink_t<rest::active_subscriptions> {
    struct ActiveSubscriptions fValue;
};

struct property_sink_t<rest::last_visible_mccs> {
    struct map<subscriber::SimSlot, MCC, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, MCC>>> fValue;
};

struct property_sink_t<rest::subscription_info> {
    struct SubscriptionInfo fValue;
};

struct property_sink_t<rest::vowifi_prov_state> {
    struct OverloadEqualityOperators<std::__1::map<PersonalityID, VoWiFiProvisioningState, std::__1::less<PersonalityID>, std::__1::allocator<std::__1::pair<const PersonalityID, VoWiFiProvisioningState>>>> fValue;
};

struct property_sink_t<thumper_handoff_allowed> {
    struct map<subscriber::SimSlot, bool, std::__1::less<subscriber::SimSlot>, std::__1::allocator<std::__1::pair<const subscriber::SimSlot, bool>>> fValue;
};

struct property_source_t<edu_mode> {
    struct function<void (const bool &)> fSender;
    _Bool fValue;
};

struct property_source_t<internet_reachability_interface> {
    struct function<void (const InternetReachabilityInterface &)> fSender;
    unsigned char fValue;
};

struct property_source_t<internet_status> {
    struct function<void (const InternetStatus &)> fSender;
    unsigned char fValue;
};

struct property_source_t<wifi_status> {
    struct function<void (const WifiStatus &)> fSender;
    unsigned char fValue;
};

struct set<int, std::__1::less<int>, std::__1::allocator<int>> {
    struct __tree<int, std::__1::less<int>, std::__1::allocator<int>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<int, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::less<int>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct shared_ptr<(anonymous namespace)::ProcInfo> {
    struct ProcInfo *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CCXpcServerEntitlementChecker> {
    struct CCXpcServerEntitlementChecker *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CellularPlanBootstrapAssertion> {
    struct CellularPlanBootstrapAssertion *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CellularPlanCloudSenderInterface> {
    struct CellularPlanCloudSenderInterface *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CellularPlanController> {
    struct CellularPlanController *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CellularPlanControllerDebugInterface> {
    struct CellularPlanControllerDebugInterface *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CellularPlanControllerInterface> {
    struct CellularPlanControllerInterface *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CellularPlanSettings> {
    struct CellularPlanSettings *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<DataConnectionAgentPolicyInterface> {
    struct DataConnectionAgentPolicyInterface *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<P2PDeviceDescr> {
    struct P2PDeviceDescr *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<Registry> {
    struct Registry *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<WeaLocationDelegateInterface> {
    struct WeaLocationDelegateInterface *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<carrier_space::EntitlementValidator> {
    struct EntitlementValidator *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const PersonalityInfo> {
    struct PersonalityInfo *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<const Registry> {
    struct Registry *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ctu::LogServer> {
    struct LogServer *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ctu::Logger> {
    struct Logger *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ctu::RestModuleState> {
    struct RestModuleState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ctu::Timer> {
    struct Timer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<iCloudAccountNotificator> {
    struct iCloudAccountNotificator *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<push::PushController> {
    struct PushController *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<std::__1::basic_string<char>> {
    basic_string_90719d97 *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<void> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<xpc::object> {
    struct object *_field1;
    struct __shared_weak_count *_field2;
};

struct time_point<std::__1::chrono::system_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000>>> {
    struct duration<long long, std::__1::ratio<1, 1000000>> __d_;
};

struct type {
    unsigned char __lx[24];
};

struct unique_ptr<carrier_space::EntitlementValidator, std::__1::default_delete<carrier_space::EntitlementValidator>> {
    struct __compressed_pair<carrier_space::EntitlementValidator *, std::__1::default_delete<carrier_space::EntitlementValidator>> {
        struct EntitlementValidator *_field1;
    } _field1;
};

struct unique_ptr<ctu::OsLogLogger, std::__1::default_delete<ctu::OsLogLogger>> {
    struct __compressed_pair<ctu::OsLogLogger *, std::__1::default_delete<ctu::OsLogLogger>> {
        struct OsLogLogger *__value_;
    } __ptr_;
};

struct unique_ptr<ctu::RestModule, std::__1::default_delete<ctu::RestModule>> {
    struct __compressed_pair<ctu::RestModule *, std::__1::default_delete<ctu::RestModule>> {
        struct RestModule *__value_;
    } __ptr_;
};

struct vector<(anonymous namespace)::CellularPlanIDSCallbacks, std::__1::allocator<(anonymous namespace)::CellularPlanIDSCallbacks>> {
    struct CellularPlanIDSCallbacks *__begin_;
    struct CellularPlanIDSCallbacks *__end_;
    struct __compressed_pair<(anonymous namespace)::CellularPlanIDSCallbacks *, std::__1::allocator<(anonymous namespace)::CellularPlanIDSCallbacks>> {
        struct CellularPlanIDSCallbacks *__value_;
    } __end_cap_;
};

struct vector<CTXPCClientTracker, std::__1::allocator<CTXPCClientTracker>> {
    struct CTXPCClientTracker *__begin_;
    struct CTXPCClientTracker *__end_;
    struct __compressed_pair<CTXPCClientTracker *, std::__1::allocator<CTXPCClientTracker>> {
        struct CTXPCClientTracker *__value_;
    } __end_cap_;
};

struct vector<CTXPCRequestTracker, std::__1::allocator<CTXPCRequestTracker>> {
    struct CTXPCRequestTracker *_field1;
    struct CTXPCRequestTracker *_field2;
    struct __compressed_pair<CTXPCRequestTracker *, std::__1::allocator<CTXPCRequestTracker>> {
        struct CTXPCRequestTracker *_field1;
    } _field3;
};

struct vector<CurrentCallInfo, std::__1::allocator<CurrentCallInfo>> {
    struct CurrentCallInfo *__begin_;
    struct CurrentCallInfo *__end_;
    struct __compressed_pair<CurrentCallInfo *, std::__1::allocator<CurrentCallInfo>> {
        struct CurrentCallInfo *__value_;
    } __end_cap_;
};

struct vector<rest::SubscriptionContext, std::__1::allocator<rest::SubscriptionContext>> {
    struct SubscriptionContext *__begin_;
    struct SubscriptionContext *__end_;
    struct __compressed_pair<rest::SubscriptionContext *, std::__1::allocator<rest::SubscriptionContext>> {
        struct SubscriptionContext *__value_;
    } __end_cap_;
};

struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> {
    basic_string_90719d97 *__begin_;
    basic_string_90719d97 *__end_;
    struct __compressed_pair<std::__1::basic_string<char>*, std::__1::allocator<std::__1::basic_string<char>>> {
        basic_string_90719d97 *__value_;
    } __end_cap_;
};

struct vector<std::__1::pair<double, double>, std::__1::allocator<std::__1::pair<double, double>>> {
    struct pair<double, double> *_field1;
    struct pair<double, double> *_field2;
    struct __compressed_pair<std::__1::pair<double, double>*, std::__1::allocator<std::__1::pair<double, double>>> {
        struct pair<double, double> *_field1;
    } _field3;
};

struct vector<subscriber::SimSlot, std::__1::allocator<subscriber::SimSlot>> {
    int *_field1;
    int *_field2;
    struct __compressed_pair<subscriber::SimSlot *, std::__1::allocator<subscriber::SimSlot>> {
        int *_field1;
    } _field3;
};

struct weak_ptr<CarrierSpaceControllerInterface> {
    struct CarrierSpaceControllerInterface *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct weak_ptr<CellularPlanController> {
    struct CellularPlanController *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct weak_ptr<CellularPlanControllerDebugInterface> {
    struct CellularPlanControllerDebugInterface *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct weak_ptr<CellularPlanControllerInterface> {
    struct CellularPlanControllerInterface *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct weak_ptr<DataConnectionAgentInterface> {
    struct DataConnectionAgentInterface *_field1;
    struct __shared_weak_count *_field2;
};

struct weak_ptr<DataNetworkMonitor> {
    struct DataNetworkMonitor *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct weak_ptr<NanoRegistryObserverDelegate> {
    struct NanoRegistryObserverDelegate *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct weak_ptr<SubscriberUserAlertManagerInterface> {
    struct SubscriberUserAlertManagerInterface *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct weak_ptr<push::PushController> {
    struct PushController *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct workloop {
    struct object {
        struct dispatch_object_s *fObj;
    } _field1;
};

#if 0
// Names with conflicting types:
typedef struct {
    void *fObj;
} object_c1a17bc6;

typedef struct {
    struct object {
        struct dispatch_object_s *fObj;
    } fObj;
} queue_9c98cea5;

#endif

#pragma mark Typedef'd Structures

// Template types
typedef struct CFSharedRef<const __CFData> {
    struct __CFData *fRef;
} CFSharedRef_6edd8422;

typedef struct CFSharedRef<const __CFDictionary> {
    struct __CFDictionary *_field1;
} CFSharedRef_ebc0111d;

typedef struct CFSharedRef<const __CFString> {
    struct __CFString *fRef;
} CFSharedRef_b4f39539;

typedef struct LoggerBase<std::__1::shared_ptr<ctu::LogServer>> {
    CDUnknownFunctionPointerType *_field1;
    basic_string_90719d97 _field2;
    struct OSSharedRef<NSObject<OS_os_log>> _field3;
    unsigned char _field4;
    unsigned char _field5;
    struct shared_ptr<ctu::LogServer> _field6;
} LoggerBase_0f76652d;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *__data_;
                    unsigned long long __size_;
                    unsigned long long __cap_;
                } __l;
                struct __short {
                    char __data_[23];
                    struct {
                        unsigned char __size_;
                    } ;
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __value_;
    } __r_;
} basic_string_90719d97;

typedef struct bitset<8> {
    unsigned long long _field1;
} bitset_13ab97e2;

typedef struct command_responder_t<bool> {
    _Bool _field1;
    struct shared_ptr<xpc::object> _field2;
} command_responder_t_c0c9f316;

typedef struct command_responder_t<xpc::dict> {
    struct dict _field1;
    struct shared_ptr<xpc::object> _field2;
} command_responder_t_ce35b61f;

typedef struct function<void ()> {
    struct __value_func<void ()> {
        struct type __buf_;
        struct __base<void ()> *__f_;
    } __f_;
} function_84aba934;

typedef struct map<NSXPCConnection *, (anonymous namespace)::ClientInfo, std::__1::less<NSXPCConnection *>, std::__1::allocator<std::__1::pair<NSXPCConnection *const, (anonymous namespace)::ClientInfo>>> {
    struct __tree<std::__1::__value_type<NSXPCConnection *, (anonymous namespace)::ClientInfo>, std::__1::__map_value_compare<NSXPCConnection *, std::__1::__value_type<NSXPCConnection *, (anonymous namespace)::ClientInfo>, std::__1::less<NSXPCConnection *>, true>, std::__1::allocator<std::__1::__value_type<NSXPCConnection *, (anonymous namespace)::ClientInfo>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<NSXPCConnection *, (anonymous namespace)::ClientInfo>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<NSXPCConnection *, std::__1::__value_type<NSXPCConnection *, (anonymous namespace)::ClientInfo>, std::__1::less<NSXPCConnection *>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
} map_0a65a2bf;

typedef struct optional<CellularPlanIDSDevice> {
    _Bool _field1;
    struct aligned_storage<CellularPlanIDSDevice> _field2;
} optional_fe4b5c04;

typedef struct pair<std::__1::pair<double, double>, double> {
    struct pair<double, double> _field1;
    double _field2;
} pair_75de58b6;

typedef struct shared_ptr<(anonymous namespace)::ProcInfo> {
    struct ProcInfo *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_670cd7b3;

typedef struct shared_ptr<CCXpcServerEntitlementChecker> {
    struct CCXpcServerEntitlementChecker *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_7f118279;

typedef struct shared_ptr<CellularPlanController> {
    struct CellularPlanController *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_8273d931;

typedef struct shared_ptr<CellularPlanControllerDebugInterface> {
    struct CellularPlanControllerDebugInterface *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_698f7688;

typedef struct shared_ptr<CellularPlanControllerInterface> {
    struct CellularPlanControllerInterface *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_e1726ebd;

typedef struct shared_ptr<CellularPlanSettings> {
    struct CellularPlanSettings *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_abc9ff6b;

typedef struct shared_ptr<P2PDeviceDescr> {
    struct P2PDeviceDescr *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_1a9fdc88;

typedef struct shared_ptr<Registry> {
    struct Registry *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_e9385ad3;

typedef struct shared_ptr<WeaLocationDelegateInterface> {
    struct WeaLocationDelegateInterface *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_79dacccf;

typedef struct shared_ptr<carrier_space::EntitlementValidator> {
    struct EntitlementValidator *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_f759db40;

typedef struct shared_ptr<const Registry> {
    struct Registry *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_0fd4464b;

typedef struct shared_ptr<ctu::Logger> {
    struct Logger *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_b36635fa;

typedef struct shared_ptr<push::PushController> {
    struct PushController *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_b58db925;

typedef struct time_point<std::__1::chrono::system_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000>>> {
    struct duration<long long, std::__1::ratio<1, 1000000>> __d_;
} time_point_fe342777;

typedef struct unique_ptr<carrier_space::EntitlementValidator, std::__1::default_delete<carrier_space::EntitlementValidator>> {
    struct __compressed_pair<carrier_space::EntitlementValidator *, std::__1::default_delete<carrier_space::EntitlementValidator>> {
        struct EntitlementValidator *_field1;
    } _field1;
} unique_ptr_0d48b795;

typedef struct vector<CurrentCallInfo, std::__1::allocator<CurrentCallInfo>> {
    struct CurrentCallInfo *__begin_;
    struct CurrentCallInfo *__end_;
    struct __compressed_pair<CurrentCallInfo *, std::__1::allocator<CurrentCallInfo>> {
        struct CurrentCallInfo *__value_;
    } __end_cap_;
} vector_59176b0e;

typedef struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> {
    basic_string_90719d97 *__begin_;
    basic_string_90719d97 *__end_;
    struct __compressed_pair<std::__1::basic_string<char>*, std::__1::allocator<std::__1::basic_string<char>>> {
        basic_string_90719d97 *__value_;
    } __end_cap_;
} vector_ebb6ef3e;

typedef struct vector<std::__1::pair<double, double>, std::__1::allocator<std::__1::pair<double, double>>> {
    struct pair<double, double> *_field1;
    struct pair<double, double> *_field2;
    struct __compressed_pair<std::__1::pair<double, double>*, std::__1::allocator<std::__1::pair<double, double>>> {
        struct pair<double, double> *_field1;
    } _field3;
} vector_3830c793;

typedef struct vector<subscriber::SimSlot, std::__1::allocator<subscriber::SimSlot>> {
    int *_field1;
    int *_field2;
    struct __compressed_pair<subscriber::SimSlot *, std::__1::allocator<subscriber::SimSlot>> {
        int *_field1;
    } _field3;
} vector_1bc948b8;

typedef struct weak_ptr<CarrierSpaceControllerInterface> {
    struct CarrierSpaceControllerInterface *__ptr_;
    struct __shared_weak_count *__cntrl_;
} weak_ptr_923d423a;

typedef struct weak_ptr<DataNetworkMonitor> {
    struct DataNetworkMonitor *__ptr_;
    struct __shared_weak_count *__cntrl_;
} weak_ptr_348ec7f1;

typedef struct weak_ptr<NanoRegistryObserverDelegate> {
    struct NanoRegistryObserverDelegate *__ptr_;
    struct __shared_weak_count *__cntrl_;
} weak_ptr_bd320bb0;

typedef struct weak_ptr<SubscriberUserAlertManagerInterface> {
    struct SubscriberUserAlertManagerInterface *__ptr_;
    struct __shared_weak_count *__cntrl_;
} weak_ptr_14a4a872;

#pragma mark Named Unions

union dummy_u {
    char _field1[64];
    struct a8 _field2;
};

