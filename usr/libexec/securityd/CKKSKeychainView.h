//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import "CKKSZone.h"

#import "CKKSChangeFetcherClient-Protocol.h"
#import "CKKSPeerUpdateListener-Protocol.h"
#import "CKKSZoneUpdateReceiver-Protocol.h"

@class CKKSCondition, CKKSEgoManifest, CKKSIncomingQueueOperation, CKKSLaunchSequence, CKKSLockStateTracker, CKKSManifest, CKKSNearFutureScheduler, CKKSNewTLKOperation, CKKSOutgoingQueueOperation, CKKSProcessReceivedKeysOperation, CKKSReencryptOutgoingItemsOperation, CKKSResultOperation, CKKSScanLocalItemsOperation, CKKSSynchronizeOperation, CKKSZoneChangeFetcher, CKOperationGroup, NSArray, NSError, NSHashTable, NSMutableDictionary, NSMutableSet, NSOperation, NSOperationQueue, NSString;
@protocol SecCKKSZoneKeyState;

__attribute__((visibility("hidden")))
@interface CKKSKeychainView : CKKSZone <CKKSZoneUpdateReceiver, CKKSChangeFetcherClient, CKKSPeerUpdateListener>
{
    NSString<SecCKKSZoneKeyState> *_keyHierarchyState;	// 32 = 0x20
    _Bool _keyStateMachineRefetched;	// 40 = 0x28
    _Bool _keyStateFullRefetchRequested;	// 41 = 0x29
    _Bool _droppedItems;	// 42 = 0x2a
    _Bool _keyStateFetchRequested;	// 43 = 0x2b
    _Bool _keyStateProcessRequested;	// 44 = 0x2c
    _Bool _trustedPeersSetChanged;	// 45 = 0x2d
    _Bool _keyStateCloudKitDeleteRequested;	// 46 = 0x2e
    _Bool _keyStateLocalResetRequested;	// 47 = 0x2f
    _Bool _tlkCreationRequested;	// 48 = 0x30
    CKKSCondition *_loggedIn;	// 56 = 0x38
    CKKSCondition *_loggedOut;	// 64 = 0x40
    CKKSCondition *_accountStateKnown;	// 72 = 0x48
    long long _trustStatus;	// 80 = 0x50
    CKKSResultOperation *_trustDependency;	// 88 = 0x58
    CKKSLaunchSequence *_launch;	// 96 = 0x60
    CKKSLockStateTracker *_lockStateTracker;	// 104 = 0x68
    NSError *_keyHierarchyError;	// 112 = 0x70
    CKOperationGroup *_keyHierarchyOperationGroup;	// 120 = 0x78
    NSOperation *_keyStateMachineOperation;	// 128 = 0x80
    CKKSEgoManifest *_egoManifest;	// 136 = 0x88
    CKKSManifest *_latestManifest;	// 144 = 0x90
    CKKSResultOperation *_keyStateReadyDependency;	// 152 = 0x98
    CKKSResultOperation *_keyStateNonTransientDependency;	// 160 = 0xa0
    NSMutableDictionary *_keyHierarchyConditions;	// 168 = 0xa8
    CKKSZoneChangeFetcher *_zoneChangeFetcher;	// 176 = 0xb0
    CKKSNearFutureScheduler *_savedTLKNotifier;	// 184 = 0xb8
    CKKSNearFutureScheduler *_suggestTLKUpload;	// 192 = 0xc0
    CKKSIncomingQueueOperation *_lastIncomingQueueOperation;	// 200 = 0xc8
    CKKSNewTLKOperation *_lastNewTLKOperation;	// 208 = 0xd0
    CKKSOutgoingQueueOperation *_lastOutgoingQueueOperation;	// 216 = 0xd8
    CKKSProcessReceivedKeysOperation *_lastProcessReceivedKeysOperation;	// 224 = 0xe0
    CKKSReencryptOutgoingItemsOperation *_lastReencryptOutgoingItemsOperation;	// 232 = 0xe8
    CKKSScanLocalItemsOperation *_lastScanLocalItemsOperation;	// 240 = 0xf0
    CKKSSynchronizeOperation *_lastSynchronizeOperation;	// 248 = 0xf8
    CKKSResultOperation *_lastFixupOperation;	// 256 = 0x100
    NSOperation *_holdReencryptOutgoingItemsOperation;	// 264 = 0x108
    NSOperation *_holdOutgoingQueueOperation;	// 272 = 0x110
    NSOperation *_holdIncomingQueueOperation;	// 280 = 0x118
    NSOperation *_holdLocalSynchronizeOperation;	// 288 = 0x120
    CKKSResultOperation *_holdFixupOperation;	// 296 = 0x128
    CKKSNearFutureScheduler *_notifyViewChangedScheduler;	// 304 = 0x130
    CKKSNearFutureScheduler *_notifyViewReadyScheduler;	// 312 = 0x138
    CKKSNearFutureScheduler *_pokeKeyStateMachineScheduler;	// 320 = 0x140
    NSArray *_currentPeerProviders;	// 328 = 0x148
    NSArray *_currentTrustStates;	// 336 = 0x150
    NSHashTable *_incomingQueueOperations;	// 344 = 0x158
    NSHashTable *_outgoingQueueOperations;	// 352 = 0x160
    NSHashTable *_scanLocalItemsOperations;	// 360 = 0x168
    CKKSScanLocalItemsOperation *_initialScanOperation;	// 368 = 0x170
    NSHashTable *_cloudkitDeleteZoneOperations;	// 376 = 0x178
    NSHashTable *_localResetOperations;	// 384 = 0x180
    NSHashTable *_keysetProviderOperations;	// 392 = 0x188
    NSString *_activeTLK;	// 400 = 0x190
    Class _notifierClass;	// 408 = 0x198
    CKKSNearFutureScheduler *_outgoingQueueOperationScheduler;	// 416 = 0x1a0
    CKKSResultOperation *_processIncomingQueueAfterNextUnlockOperation;	// 424 = 0x1a8
    CKKSResultOperation *_resultsOfNextIncomingQueueOperationOperation;	// 432 = 0x1b0
    NSOperationQueue *_waitingQueue;	// 440 = 0x1b8
    NSMutableSet *_resyncRecordsSeen;	// 448 = 0x1c0
}

- (void).cxx_destruct;	// IMP=0x000000010014f1b4
@property(retain) NSMutableSet *resyncRecordsSeen; // @synthesize resyncRecordsSeen=_resyncRecordsSeen;
@property(retain) NSOperationQueue *waitingQueue; // @synthesize waitingQueue=_waitingQueue;
@property(retain) CKKSResultOperation *resultsOfNextIncomingQueueOperationOperation; // @synthesize resultsOfNextIncomingQueueOperationOperation=_resultsOfNextIncomingQueueOperationOperation;
@property(retain) CKKSResultOperation *processIncomingQueueAfterNextUnlockOperation; // @synthesize processIncomingQueueAfterNextUnlockOperation=_processIncomingQueueAfterNextUnlockOperation;
@property(retain) CKKSNearFutureScheduler *outgoingQueueOperationScheduler; // @synthesize outgoingQueueOperationScheduler=_outgoingQueueOperationScheduler;
@property(readonly) Class notifierClass; // @synthesize notifierClass=_notifierClass;
@property(retain) NSString *activeTLK; // @synthesize activeTLK=_activeTLK;
@property(retain) NSHashTable *keysetProviderOperations; // @synthesize keysetProviderOperations=_keysetProviderOperations;
@property _Bool tlkCreationRequested; // @synthesize tlkCreationRequested=_tlkCreationRequested;
@property(retain) NSHashTable *localResetOperations; // @synthesize localResetOperations=_localResetOperations;
@property _Bool keyStateLocalResetRequested; // @synthesize keyStateLocalResetRequested=_keyStateLocalResetRequested;
@property(retain) NSHashTable *cloudkitDeleteZoneOperations; // @synthesize cloudkitDeleteZoneOperations=_cloudkitDeleteZoneOperations;
@property _Bool keyStateCloudKitDeleteRequested; // @synthesize keyStateCloudKitDeleteRequested=_keyStateCloudKitDeleteRequested;
@property _Bool trustedPeersSetChanged; // @synthesize trustedPeersSetChanged=_trustedPeersSetChanged;
@property _Bool keyStateProcessRequested; // @synthesize keyStateProcessRequested=_keyStateProcessRequested;
@property _Bool keyStateFetchRequested; // @synthesize keyStateFetchRequested=_keyStateFetchRequested;
@property(retain) CKKSScanLocalItemsOperation *initialScanOperation; // @synthesize initialScanOperation=_initialScanOperation;
@property(retain) NSHashTable *scanLocalItemsOperations; // @synthesize scanLocalItemsOperations=_scanLocalItemsOperations;
@property(retain) NSHashTable *outgoingQueueOperations; // @synthesize outgoingQueueOperations=_outgoingQueueOperations;
@property(retain) NSHashTable *incomingQueueOperations; // @synthesize incomingQueueOperations=_incomingQueueOperations;
@property(retain) NSArray *currentTrustStates; // @synthesize currentTrustStates=_currentTrustStates;
@property(retain) NSArray *currentPeerProviders; // @synthesize currentPeerProviders=_currentPeerProviders;
@property(retain) CKKSNearFutureScheduler *pokeKeyStateMachineScheduler; // @synthesize pokeKeyStateMachineScheduler=_pokeKeyStateMachineScheduler;
@property(retain) CKKSNearFutureScheduler *notifyViewReadyScheduler; // @synthesize notifyViewReadyScheduler=_notifyViewReadyScheduler;
@property(retain) CKKSNearFutureScheduler *notifyViewChangedScheduler; // @synthesize notifyViewChangedScheduler=_notifyViewChangedScheduler;
@property(retain) CKKSResultOperation *holdFixupOperation; // @synthesize holdFixupOperation=_holdFixupOperation;
@property(retain) NSOperation *holdLocalSynchronizeOperation; // @synthesize holdLocalSynchronizeOperation=_holdLocalSynchronizeOperation;
@property(retain) NSOperation *holdIncomingQueueOperation; // @synthesize holdIncomingQueueOperation=_holdIncomingQueueOperation;
@property(retain) NSOperation *holdOutgoingQueueOperation; // @synthesize holdOutgoingQueueOperation=_holdOutgoingQueueOperation;
@property(retain) NSOperation *holdReencryptOutgoingItemsOperation; // @synthesize holdReencryptOutgoingItemsOperation=_holdReencryptOutgoingItemsOperation;
@property(retain) CKKSResultOperation *lastFixupOperation; // @synthesize lastFixupOperation=_lastFixupOperation;
@property(retain) CKKSSynchronizeOperation *lastSynchronizeOperation; // @synthesize lastSynchronizeOperation=_lastSynchronizeOperation;
@property(retain) CKKSScanLocalItemsOperation *lastScanLocalItemsOperation; // @synthesize lastScanLocalItemsOperation=_lastScanLocalItemsOperation;
@property(retain) CKKSReencryptOutgoingItemsOperation *lastReencryptOutgoingItemsOperation; // @synthesize lastReencryptOutgoingItemsOperation=_lastReencryptOutgoingItemsOperation;
@property(retain) CKKSProcessReceivedKeysOperation *lastProcessReceivedKeysOperation; // @synthesize lastProcessReceivedKeysOperation=_lastProcessReceivedKeysOperation;
@property(retain) CKKSOutgoingQueueOperation *lastOutgoingQueueOperation; // @synthesize lastOutgoingQueueOperation=_lastOutgoingQueueOperation;
@property(retain) CKKSNewTLKOperation *lastNewTLKOperation; // @synthesize lastNewTLKOperation=_lastNewTLKOperation;
@property(retain) CKKSIncomingQueueOperation *lastIncomingQueueOperation; // @synthesize lastIncomingQueueOperation=_lastIncomingQueueOperation;
@property(retain) CKKSNearFutureScheduler *suggestTLKUpload; // @synthesize suggestTLKUpload=_suggestTLKUpload;
@property __weak CKKSNearFutureScheduler *savedTLKNotifier; // @synthesize savedTLKNotifier=_savedTLKNotifier;
@property(retain) CKKSZoneChangeFetcher *zoneChangeFetcher; // @synthesize zoneChangeFetcher=_zoneChangeFetcher;
@property(retain) NSMutableDictionary *keyHierarchyConditions; // @synthesize keyHierarchyConditions=_keyHierarchyConditions;
@property _Bool droppedItems; // @synthesize droppedItems=_droppedItems;
@property(retain) CKKSResultOperation *keyStateNonTransientDependency; // @synthesize keyStateNonTransientDependency=_keyStateNonTransientDependency;
@property(retain) CKKSResultOperation *keyStateReadyDependency; // @synthesize keyStateReadyDependency=_keyStateReadyDependency;
@property(retain) CKKSManifest *latestManifest; // @synthesize latestManifest=_latestManifest;
@property(retain) CKKSEgoManifest *egoManifest; // @synthesize egoManifest=_egoManifest;
@property _Bool keyStateFullRefetchRequested; // @synthesize keyStateFullRefetchRequested=_keyStateFullRefetchRequested;
@property _Bool keyStateMachineRefetched; // @synthesize keyStateMachineRefetched=_keyStateMachineRefetched;
@property(retain) NSOperation *keyStateMachineOperation; // @synthesize keyStateMachineOperation=_keyStateMachineOperation;
@property(retain) CKOperationGroup *keyHierarchyOperationGroup; // @synthesize keyHierarchyOperationGroup=_keyHierarchyOperationGroup;
@property(retain) NSError *keyHierarchyError; // @synthesize keyHierarchyError=_keyHierarchyError;
@property(retain) CKKSLockStateTracker *lockStateTracker; // @synthesize lockStateTracker=_lockStateTracker;
@property(retain) CKKSLaunchSequence *launch; // @synthesize launch=_launch;
@property(retain) CKKSResultOperation *trustDependency; // @synthesize trustDependency=_trustDependency;
@property long long trustStatus; // @synthesize trustStatus=_trustStatus;
@property(retain) CKKSCondition *accountStateKnown; // @synthesize accountStateKnown=_accountStateKnown;
@property(retain) CKKSCondition *loggedOut; // @synthesize loggedOut=_loggedOut;
@property(retain) CKKSCondition *loggedIn; // @synthesize loggedIn=_loggedIn;
- (id)fastStatus;	// IMP=0x000000010014ea10
- (id)status;	// IMP=0x000000010014e81c
- (void)halt;	// IMP=0x000000010014e7c8
- (void)cancelAllOperations;	// IMP=0x000000010014e610
- (void)cancelPendingOperations;	// IMP=0x000000010014e218
- (void)waitForKeyHierarchyReadiness;	// IMP=0x000000010014e198
- (id)waitForFetchAndIncomingQueueProcessing;	// IMP=0x000000010014e150
- (_Bool)outgoingQueueEmpty:(id *)arg1;	// IMP=0x000000010014e0a4
- (void)trustedPeerSetChanged:(id)arg1;	// IMP=0x000000010014df78
- (void)selfPeerChanged:(id)arg1;	// IMP=0x000000010014de80
- (_Bool)shouldRetryAfterFetchError:(id)arg1;	// IMP=0x000000010014dab4
- (_Bool)ckErrorOrPartialError:(id)arg1 isError:(long long)arg2;	// IMP=0x000000010014d8a8
- (void)changesFetched:(id)arg1 deletedRecordIDs:(id)arg2 newChangeToken:(id)arg3 moreComing:(_Bool)arg4 resync:(_Bool)arg5;	// IMP=0x000000010014d6d8
- (id)participateInFetch;	// IMP=0x000000010014d588
- (_Bool)_onQueueZoneIsReadyForFetching;	// IMP=0x000000010014d424
- (_Bool)zoneIsReadyForFetching;	// IMP=0x000000010014d378
- (void)endTrustedOperation;	// IMP=0x000000010014d2d4
- (void)beginTrustedOperation:(id)arg1 suggestTLKUpload:(id)arg2;	// IMP=0x000000010014d0e8
- (void)handleCKLogout;	// IMP=0x000000010014cfec
- (void)superHandleCKLogout;	// IMP=0x000000010014cfb8
- (void)handleCKLogin;	// IMP=0x000000010014cd8c
- (void)superHandleCKLogin;	// IMP=0x000000010014cd58
- (void)notifyZoneChange:(id)arg1;	// IMP=0x000000010014cc24
- (void)dispatchSyncWithPeerProviders:(id)arg1 override:(_Bool)arg2 block:(CDUnknownBlockType)arg3;	// IMP=0x000000010014c8fc
- (void)dispatchSyncWithAccountKeys:(CDUnknownBlockType)arg1;	// IMP=0x000000010014c884
- (void)dispatchSync:(CDUnknownBlockType)arg1;	// IMP=0x000000010014c684
- (_Bool)dispatchSyncWithConnection:(struct __OpaqueSecDbConnection *)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x000000010014c508
- (_Bool)_onqueueWithAccountKeysWithPeers:(id)arg1 checkTLK:(id)arg2 error:(id *)arg3;	// IMP=0x000000010014b584
- (_Bool)_onqueueWithAccountKeysCheckTLKFromShares:(id)arg1 error:(id *)arg2;	// IMP=0x000000010014b18c
- (_Bool)_onqueueWithAccountKeysCheckTLK:(id)arg1 error:(id *)arg2;	// IMP=0x000000010014acb0
- (_Bool)_onqueueUpdateLatestManifestWithError:(id *)arg1;	// IMP=0x000000010014abe4
- (_Bool)_onqueueErrorOutgoingQueueEntry:(id)arg1 itemError:(id)arg2 error:(id *)arg3;	// IMP=0x000000010014a99c
- (_Bool)_onqueueChangeOutgoingQueueEntry:(id)arg1 toState:(id)arg2 error:(id *)arg3;	// IMP=0x000000010014a21c
- (_Bool)_onqueueResetAllInflightOQE:(id *)arg1;	// IMP=0x0000000100149e70
- (void)_onqueueCKRecordDeviceStateChanged:(id)arg1 resync:(_Bool)arg2;	// IMP=0x00000001001499e8
- (void)_onqueueCKRecordManifestLeafChanged:(id)arg1 resync:(_Bool)arg2;	// IMP=0x00000001001497d4
- (void)_onqueueCKRecordManifestChanged:(id)arg1 resync:(_Bool)arg2;	// IMP=0x00000001001495c0
- (void)_onqueueCKRecordCurrentItemPointerChanged:(id)arg1 resync:(_Bool)arg2;	// IMP=0x0000000100148fd0
- (void)_onqueueCKRecordCurrentKeyPointerChanged:(id)arg1 resync:(_Bool)arg2;	// IMP=0x000000010014899c
- (void)_onqueueCKRecordTLKShareChanged:(id)arg1 resync:(_Bool)arg2;	// IMP=0x00000001001487ec
- (void)_onqueueCKRecordKeyChanged:(id)arg1 resync:(_Bool)arg2;	// IMP=0x0000000100147fe8
- (void)_onqueueCKRecordItemChanged:(id)arg1 resync:(_Bool)arg2;	// IMP=0x000000010014732c
- (_Bool)_onqueueCKRecordChanged:(id)arg1 resync:(_Bool)arg2;	// IMP=0x0000000100146e8c
- (_Bool)_onqueueCKRecordDeleted:(id)arg1 recordType:(id)arg2 resync:(_Bool)arg3;	// IMP=0x0000000100146098
- (_Bool)_onqueueCKWriteFailed:(id)arg1 attemptedRecordsChanged:(id)arg2;	// IMP=0x00000001001453d8
- (id)fetchAndProcessCKChangesDueToAPNS:(id)arg1;	// IMP=0x00000001001451f8
- (id)fetchAndProcessCKChanges:(id)arg1 after:(id)arg2;	// IMP=0x0000000100145048
- (id)fetchAndProcessCKChanges:(id)arg1;	// IMP=0x0000000100145038
- (id)resyncLocal;	// IMP=0x0000000100144fe4
- (id)resyncWithCloud;	// IMP=0x0000000100144f90
- (id)_onqueueCurrentDeviceStateEntry:(id *)arg1;	// IMP=0x0000000100143b9c
- (id)updateDeviceState:(_Bool)arg1 waitForKeyHierarchyInitialization:(unsigned long long)arg2 ckoperationGroup:(id)arg3;	// IMP=0x000000010014395c
- (id)scanLocalItems:(id)arg1 ckoperationGroup:(id)arg2 after:(id)arg3;	// IMP=0x0000000100143668
- (id)scanLocalItems:(id)arg1;	// IMP=0x0000000100143654
- (id)processIncomingQueue:(_Bool)arg1 after:(id)arg2;	// IMP=0x00000001001433a8
- (id)processIncomingQueue:(_Bool)arg1;	// IMP=0x0000000100143398
- (id)resultsOfNextProcessIncomingQueueOperation;	// IMP=0x0000000100143240
- (void)processIncomingQueueAfterNextUnlock;	// IMP=0x0000000100143090
- (id)processOutgoingQueueAfter:(id)arg1 requiredDelay:(unsigned long long)arg2 ckoperationGroup:(id)arg3;	// IMP=0x0000000100142b48
- (id)processOutgoingQueueAfter:(id)arg1 ckoperationGroup:(id)arg2;	// IMP=0x0000000100142ae0
- (id)processOutgoingQueue:(id)arg1;	// IMP=0x0000000100142acc
- (long long)countPendingOperations:(id)arg1;	// IMP=0x0000000100142938
- (id)findFirstPendingOperation:(id)arg1 ofClass:(Class)arg2;	// IMP=0x0000000100142798
- (id)findFirstPendingOperation:(id)arg1;	// IMP=0x0000000100142788
- (void)receiveTLKUploadRecords:(id)arg1;	// IMP=0x0000000100142474
- (void)_onqueueRunKeysetProviderOperations:(id)arg1;	// IMP=0x0000000100142260
- (id)findKeySet;	// IMP=0x0000000100142188
- (id)keyForItem:(struct SecDbItem *)arg1 error:(id *)arg2;	// IMP=0x0000000100141cdc
- (void)getCurrentItemForAccessGroup:(id)arg1 identifier:(id)arg2 fetchCloudValue:(_Bool)arg3 complete:(CDUnknownBlockType)arg4;	// IMP=0x00000001001418a8
- (void)setCurrentItemForAccessGroup:(id)arg1 hash:(id)arg2 accessGroup:(id)arg3 identifier:(id)arg4 replacing:(id)arg5 hash:(id)arg6 complete:(CDUnknownBlockType)arg7;	// IMP=0x00000001001412d0
- (void)handleKeychainEventDbConnection:(struct __OpaqueSecDbConnection *)arg1 source:(unsigned long long)arg2 added:(struct SecDbItem *)arg3 deleted:(struct SecDbItem *)arg4 rateLimiter:(id)arg5;	// IMP=0x0000000100140c30
- (void)_onqueueKeyHierarchyFetchForReasons:(id)arg1;	// IMP=0x0000000100140a2c
- (void)_onqueueKeyHierarchyFetch;	// IMP=0x0000000100140954
- (id)_onqueueEnsureKeyHierarchyHealth:(id)arg1 error:(id *)arg2;	// IMP=0x000000010013f2ac
- (id)_onqueueCreateMissingKeyShares:(id)arg1 peers:(id)arg2 error:(id *)arg3;	// IMP=0x000000010013eb3c
- (id)_onqueueCreateMissingKeyShares:(id)arg1 error:(id *)arg2;	// IMP=0x000000010013e814
- (_Bool)_onqueueAreNewSharesSufficient:(id)arg1 currentTLK:(id)arg2 error:(id *)arg3;	// IMP=0x000000010013e44c
- (id)_onqueueFindPeers:(id)arg1 missingShare:(id)arg2 afterUploading:(id)arg3 error:(id *)arg4;	// IMP=0x000000010013cd90
- (_Bool)_onqueueOtherDevicesReportHavingTLKs:(id)arg1;	// IMP=0x000000010013bdb4
- (_Bool)otherDevicesReportHavingTLKs:(id)arg1;	// IMP=0x000000010013bcd8
- (id)operationToEnterState:(id)arg1 keyStateError:(id)arg2 named:(id)arg3;	// IMP=0x000000010013bb7c
- (void)_onqueueHandleKeyStateNonTransientDependency:(id)arg1;	// IMP=0x000000010013b8f0
- (void)_onqueueAdvanceKeyStateMachineToState:(id)arg1 withError:(id)arg2;	// IMP=0x000000010013622c
- (id)createKeyStateNontransientDependency;	// IMP=0x00000001001360e8
- (id)createKeyStateReadyDependency:(id)arg1 ckoperationGroup:(id)arg2;	// IMP=0x0000000100135f24
- (void)_onqueueKeyStateMachineRequestProcess;	// IMP=0x0000000100135ebc
- (void)keyStateMachineRequestProcess;	// IMP=0x0000000100135e64
- (void)_onqueueKeyStateMachineRequestFetch;	// IMP=0x0000000100135dfc
- (id)resetCloudKitZone:(id)arg1;	// IMP=0x0000000100135a04
- (id)createPendingDeleteZoneOperation:(id)arg1;	// IMP=0x00000001001358dc
- (id)resetLocalData;	// IMP=0x00000001001355d4
- (id)createPendingResetLocalDataOperation;	// IMP=0x0000000100135430
- (_Bool)_onqueueResetLocalData:(id *)arg1;	// IMP=0x0000000100134924
- (void)_onqueuePerformKeyStateInitialized:(id)arg1;	// IMP=0x0000000100133dd4
- (id)createPendingInitializationOperation;	// IMP=0x0000000100133cfc
- (void)ensureKeyStateReadyDependency:(id)arg1;	// IMP=0x0000000100133bc8
- (void)_onqueueResetSetup:(id)arg1 resetMessage:(id)arg2 ckoperationGroup:(id)arg3;	// IMP=0x00000001001339a8
@property(readonly) NSString *lastActiveTLKUUID;
@property(retain) NSString<SecCKKSZoneKeyState> *keyHierarchyState;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
- (id)initWithContainer:(id)arg1 zoneName:(id)arg2 accountTracker:(id)arg3 lockStateTracker:(id)arg4 reachabilityTracker:(id)arg5 changeFetcher:(id)arg6 zoneModifier:(id)arg7 savedTLKNotifier:(id)arg8 cloudKitClassDependencies:(id)arg9;	// IMP=0x0000000100132bd4

// Remaining properties
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

