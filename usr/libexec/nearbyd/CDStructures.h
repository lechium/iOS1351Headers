//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AOACIRDataEvent {
    double _field1;
    unsigned short _field2;
    unsigned char _field3;
    unsigned short _field4;
    unsigned short _field5;
    double _field6;
    struct array<Rose::ComplexSample, 8> _field7;
    struct array<Rose::ComplexSample, 8> _field8;
    struct array<Rose::ComplexSample, 8> _field9;
};

struct AOPRoseProxyObject {
    CDUnknownFunctionPointerType *_field1;
    struct ProxyObjectConsumerBase *_field2;
    struct ProxyObjectProviderBase *_field3;
    struct mutex _field4;
    struct RoseMeasurementConsumer *_field5;
};

struct AdditionalInfo {
    unsigned char _field1;
    unsigned short _field2;
    unsigned short _field3;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field4;
    unsigned short _field5;
    unsigned char _field6;
    unsigned int _field7;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field8;
};

struct AoaHypothesesCalculator;

struct BluetoothProvider;

struct BluetoothProxyObject {
    CDUnknownFunctionPointerType *_field1;
    struct ProxyObjectConsumerBase *_field2;
    struct ProxyObjectProviderBase *_field3;
    struct mutex _field4;
};

struct CoexOutgoingMessage {
    _Bool _field1;
    unsigned short _field2;
    unsigned short _field3;
    unsigned short _field4;
    unsigned short _field5;
    unsigned short _field6;
    unsigned short _field7;
};

struct CoexProvider;

struct CoexProxyObject {
    CDUnknownFunctionPointerType *_field1;
    struct ProxyObjectConsumerBase *_field2;
    struct ProxyObjectProviderBase *_field3;
    struct mutex _field4;
};

struct ComplexSample {
    short _field1;
    short _field2;
};

struct Coordinate {
    double _field1;
    double _field2;
};

struct DispatchQueue {
    struct thread _field1;
    struct atomic<bool> _field2;
    struct condition_variable _field3;
    struct queue<std::__1::function<void ()>, std::__1::deque<std::__1::function<void ()>, std::__1::allocator<std::__1::function<void ()>>>> _field4;
    struct mutex _field5;
};

struct GetPowerStatsResponse {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    unsigned int _field9;
    unsigned short _field10;
    unsigned short _field11;
    unsigned int _field12;
    unsigned int _field13;
};

struct HelloResponse {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field1;
    unsigned char _field2;
    unsigned char _field3;
    unsigned short _field4;
    struct optional<Rose::HelloResponse::AdditionalInfo> _field5;
};

struct IMUData;

struct IMUHistory {
    struct deque<RoseSensorFusion::IMUData, std::__1::allocator<RoseSensorFusion::IMUData>> _field1;
    struct deque<double, std::__1::allocator<double>> _field2;
};

struct IOCFPlugInInterfaceStruct;

struct LastTileLookup {
    _Bool _field1;
    unsigned int _field2;
    _Bool _field3;
};

struct Location {
    struct Coordinate _field1;
    double _field2;
    double _field3;
    _Bool _field4;
    double _field5;
};

struct LocationGeoInfo {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field1;
    _Bool _field2;
    double _field3;
};

struct Logger;

struct MccGeoInfo {
    _Bool _field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    double _field3;
    _Bool _field4;
};

struct MotionProvider;

struct MotionProxyObject {
    CDUnknownFunctionPointerType *_field1;
    struct ProxyObjectConsumerBase *_field2;
    struct ProxyObjectProviderBase *_field3;
    struct mutex _field4;
    struct RoseMeasurementConsumer *_field5;
};

struct NNParams;

struct NeuralNetworkClassifier {
    _Bool _field1;
    int _field2;
    double _field3;
    double _field4;
    struct unique_ptr<rose::NNParams, std::__1::default_delete<rose::NNParams>> _field5;
    struct unique_ptr<rose::NNParams, std::__1::default_delete<rose::NNParams>> _field6;
    struct vector<double, std::__1::allocator<double>> _field7;
};

struct PRBluetoothProvider {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    id _field3;
    struct BluetoothProxyObject *_field4;
    struct atomic<BluetoothSPMIDeliveryStatus> _field5;
    id _field6;
    id _field7;
    id _field8;
};

struct PRCoexProvider {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    id _field3;
    unsigned short _field4;
    struct CoexProxyObject *_field5;
    struct CoexOutgoingMessage _field6;
};

struct PRConfigurationManager;

struct PRGeoFenceMonitor {
    double _field1;
    double _field2;
    double _field3;
    struct vector<PRGeoFenceSite, std::__1::allocator<PRGeoFenceSite>> _field4;
    struct PRLocationQueryManager _field5;
    struct PRStateMachine<PRGeoFenceMonitor> _field6;
    id _field7;
    double _field8;
    _Bool _field9;
    struct function<void (bool)> _field10;
    struct function<void (bool)> _field11;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field12;
    double _field13;
    double _field14;
    double _field15;
    double _field16;
    int _field17;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field18;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field19;
};

struct PRGeoFenceSite;

struct PRGeoMonitor {
    struct PRStateMachine<PRGeoMonitor> _field1;
    struct function<void (const std::__1::basic_string<char>&)> _field2;
    struct function<void (bool)> _field3;
    struct LocationGeoInfo _field4;
    struct MccGeoInfo _field5;
    struct MccGeoInfo _field6;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field7;
    _Bool _field8;
    _Bool _field9;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field10;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field11;
    _Bool _field12;
    struct unique_ptr<Rose::RoseSystemAssertion, std::__1::default_delete<Rose::RoseSystemAssertion>> _field13;
    id _field14;
    id _field15;
    _Bool _field16;
    _Bool _field17;
    _Bool _field18;
    int _field19;
    _Bool _field20;
    _Bool _field21;
    struct PRMccMonitor _field22;
    struct PRLocationMonitor _field23;
    struct PRGeoFenceMonitor _field24;
};

struct PRLocationMonitor {
    id _field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    struct Location _field3;
    struct function<void (const std::__1::basic_string<char>&, bool, double)> _field4;
    struct function<void (bool)> _field5;
    struct function<void (double, double, double, double)> _field6;
    struct vector<PRPolygon, std::__1::allocator<PRPolygon>> _field7;
    id _field8;
    struct PRRegulatoryGridMap _field9;
};

struct PRLocationQueryManager {
    double _field1;
    double _field2;
    struct PRStateMachine<PRLocationQueryManager> _field3;
    id _field4;
    double _field5;
    struct function<void (bool)> _field6;
};

struct PRMachTimeConverter {
    struct TimeStampPair _field1;
    struct TimeStampPair _field2;
};

struct PRMccMonitor {
    id _field1;
    id _field2;
    id _field3;
    struct __CTServerConnection *_field4;
    struct map<PRMccMonitor::SimSlot, std::__1::basic_string<char>, std::__1::less<PRMccMonitor::SimSlot>, std::__1::allocator<std::__1::pair<const PRMccMonitor::SimSlot, std::__1::basic_string<char>>>> _field5;
    struct function<void (PRMccMonitor::SimSlot, std::__1::basic_string<char>, bool)> _field6;
    struct map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>> _field7;
    _Bool _field8;
    struct map<PRMccMonitor::SimSlot, PRMccMonitor::MccIsoUpdate, std::__1::less<PRMccMonitor::SimSlot>, std::__1::allocator<std::__1::pair<const PRMccMonitor::SimSlot, PRMccMonitor::MccIsoUpdate>>> _field9;
    struct atomic<bool> _field10;
};

struct PRMotionProvider2 {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    id _field3;
    id _field4;
    struct MotionProxyObject *_field5;
    id _field6;
};

struct PRPolygon;

struct PRRangingManager {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    id _field3;
    struct recursive_mutex _field4;
    struct function<void (NSError *)> _field5;
    struct shared_ptr<rose::protobuf::Logger> _field6;
    struct set<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::less<std::__1::shared_ptr<PRRangingManagerClient>>, std::__1::allocator<std::__1::shared_ptr<PRRangingManagerClient>>> _field7;
    struct unordered_map<unsigned short, std::__1::shared_ptr<PRRangingManagerClient>, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, std::__1::shared_ptr<PRRangingManagerClient>>>> _field8;
    struct unordered_map<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>, std::__1::hash<std::__1::shared_ptr<PRRangingManagerClient>>, std::__1::equal_to<std::__1::shared_ptr<PRRangingManagerClient>>, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<PRRangingManagerClient>, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>>> _field9;
    struct AOPRoseProxyObject _field10;
    struct MotionProxyObject _field11;
    struct CoexProxyObject _field12;
    struct BluetoothProxyObject _field13;
    struct TransportProxyObject _field14;
    struct RegulatoryProxyObject _field15;
    struct PRMotionProvider2 _field16;
    struct PRCoexProvider _field17;
    struct PRBluetoothProvider _field18;
    struct PRRegulatoryProvider _field19;
    struct shared_ptr<PRConfigurationManager> _field20;
    struct PRRoseProvider _field21;
    struct tuple<rose::proxyobjects::AOPRoseProxyObject *, rose::proxyobjects::MotionProxyObject *, rose::proxyobjects::CoexProxyObject *, rose::proxyobjects::BluetoothProxyObject *, rose::proxyobjects::TransportProxyObject *, rose::proxyobjects::RegulatoryProxyObject *> _field22;
    struct tuple<rose::proxyobjects::BluetoothProvider *, rose::proxyobjects::CoexProvider *, rose::proxyobjects::MotionProvider *, rose::proxyobjects::RegulatoryProvider *, rose::proxyobjects::RoseProvider *> _field23;
    struct RoseServiceProvider _field24;
};

struct PRRangingManagerClient;

struct PRRegulatoryFileManager {
    id _field1;
    id _field2;
    _Bool _field3;
    struct function<void ()> _field4;
    int _field5;
    struct unique_ptr<Rose::RoseSystemAssertion, std::__1::default_delete<Rose::RoseSystemAssertion>> _field6;
    long long _field7;
};

struct PRRegulatoryGridMap {
    struct LastTileLookup _field1;
    struct list<unsigned int, std::__1::allocator<unsigned int>> _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field4;
    struct PRRegulatoryFileManager _field5;
};

struct PRRegulatoryProvider {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    struct RegulatoryProxyObject *_field3;
    id _field4;
    struct PRRegulatorySettings _field5;
    struct PRGeoMonitor _field6;
    id _field7;
    id _field8;
    id _field9;
};

struct PRRegulatorySettings {
    struct RoseRegulatoryCompliance *_field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    unsigned char _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
    struct map<Rose::RoseChannelConfig, std::__1::map<PRRegulatorySettings::ChannelPreferenceSource, bool, std::__1::less<PRRegulatorySettings::ChannelPreferenceSource>, std::__1::allocator<std::__1::pair<const PRRegulatorySettings::ChannelPreferenceSource, bool>>>, std::__1::less<Rose::RoseChannelConfig>, std::__1::allocator<std::__1::pair<const Rose::RoseChannelConfig, std::__1::map<PRRegulatorySettings::ChannelPreferenceSource, bool, std::__1::less<PRRegulatorySettings::ChannelPreferenceSource>, std::__1::allocator<std::__1::pair<const PRRegulatorySettings::ChannelPreferenceSource, bool>>>>>> _field8;
    struct map<Rose::RoseChannelConfig, bool, std::__1::less<Rose::RoseChannelConfig>, std::__1::allocator<std::__1::pair<const Rose::RoseChannelConfig, bool>>> _field9;
    struct mutex _field10;
    _Bool _field11;
};

struct PRRose {
    id _field1;
    id _field2;
    id _field3;
    id _field4;
    struct RoseCommunicationMgr _field5;
    struct atomic<PRRose::State> _field6;
    struct RoseSupervisorInterface _field7;
    CDUnknownBlockType _field8;
    CDUnknownBlockType _field9;
    struct shared_ptr<PRConfigurationManager> _field10;
    struct unique_ptr<Rose::RoseSystemAssertion, std::__1::default_delete<Rose::RoseSystemAssertion>> _field11;
    _Bool _field12;
    _Bool _field13;
    struct atomic<bool> _field14;
    struct mutex _field15;
    struct condition_variable _field16;
    struct atomic<bool> _field17;
    int _field18;
    _Bool _field19;
};

struct PRRoseProvider {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    CDUnknownFunctionPointerType *_field3;
    struct condition_variable _field4;
    struct mutex _field5;
    id _field6;
    struct AOPRoseProxyObject *_field7;
    struct PRRose _field8;
    struct shared_ptr<rose::protobuf::Logger> _field9;
    struct optional<Rose::HelloResponse> _field10;
    struct optional<Rose::GetPowerStatsResponse> _field11;
    id _field12;
    struct shared_ptr<PRConfigurationManager> _field13;
    struct RoseCIRDecoder _field14;
};

struct PRStateMachine<PRGeoFenceMonitor> {
    struct is_same<std::__1::basic_string<char>, std::__1::basic_string<char>> _field1;
    struct is_same<std::__1::basic_string<char>, std::__1::basic_string<char>> _field2;
    int _field3;
    struct map<PRGeoFenceMonitor::State, PRGeoFenceMonitor::State (PRGeoFenceMonitor::*)(PRGeoFenceMonitor::Event), std::__1::less<PRGeoFenceMonitor::State>, std::__1::allocator<std::__1::pair<const PRGeoFenceMonitor::State, PRGeoFenceMonitor::State (PRGeoFenceMonitor::*)(PRGeoFenceMonitor::Event)>>> _field4;
    struct shared_ptr<PRGeoFenceMonitor> _field5;
    _Bool _field6;
    struct map<PRGeoFenceMonitor::Event, NSObject<OS_dispatch_source>*, std::__1::less<PRGeoFenceMonitor::Event>, std::__1::allocator<std::__1::pair<const PRGeoFenceMonitor::Event, NSObject<OS_dispatch_source>*>>> _field7;
    struct map<PRGeoFenceMonitor::Event, bool, std::__1::less<PRGeoFenceMonitor::Event>, std::__1::allocator<std::__1::pair<const PRGeoFenceMonitor::Event, bool>>> _field8;
    id _field9;
    unsigned int _field10;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field11;
    unsigned char _field12;
};

struct PRStateMachine<PRGeoMonitor> {
    struct is_same<std::__1::basic_string<char>, std::__1::basic_string<char>> _field1;
    struct is_same<std::__1::basic_string<char>, std::__1::basic_string<char>> _field2;
    int _field3;
    struct map<PRGeoMonitor::State, PRGeoMonitor::State (PRGeoMonitor::*)(PRGeoMonitor::Event), std::__1::less<PRGeoMonitor::State>, std::__1::allocator<std::__1::pair<const PRGeoMonitor::State, PRGeoMonitor::State (PRGeoMonitor::*)(PRGeoMonitor::Event)>>> _field4;
    struct shared_ptr<PRGeoMonitor> _field5;
    _Bool _field6;
    struct map<PRGeoMonitor::Event, NSObject<OS_dispatch_source>*, std::__1::less<PRGeoMonitor::Event>, std::__1::allocator<std::__1::pair<const PRGeoMonitor::Event, NSObject<OS_dispatch_source>*>>> _field7;
    struct map<PRGeoMonitor::Event, bool, std::__1::less<PRGeoMonitor::Event>, std::__1::allocator<std::__1::pair<const PRGeoMonitor::Event, bool>>> _field8;
    id _field9;
    unsigned int _field10;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field11;
    unsigned char _field12;
};

struct PRStateMachine<PRLocationQueryManager> {
    struct is_same<std::__1::basic_string<char>, std::__1::basic_string<char>> _field1;
    struct is_same<std::__1::basic_string<char>, std::__1::basic_string<char>> _field2;
    int _field3;
    struct map<PRLocationQueryManager::State, PRLocationQueryManager::State (PRLocationQueryManager::*)(PRLocationQueryManager::Event), std::__1::less<PRLocationQueryManager::State>, std::__1::allocator<std::__1::pair<const PRLocationQueryManager::State, PRLocationQueryManager::State (PRLocationQueryManager::*)(PRLocationQueryManager::Event)>>> _field4;
    struct shared_ptr<PRLocationQueryManager> _field5;
    _Bool _field6;
    struct map<PRLocationQueryManager::Event, NSObject<OS_dispatch_source>*, std::__1::less<PRLocationQueryManager::Event>, std::__1::allocator<std::__1::pair<const PRLocationQueryManager::Event, NSObject<OS_dispatch_source>*>>> _field7;
    struct map<PRLocationQueryManager::Event, bool, std::__1::less<PRLocationQueryManager::Event>, std::__1::allocator<std::__1::pair<const PRLocationQueryManager::Event, bool>>> _field8;
    id _field9;
    unsigned int _field10;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field11;
    unsigned char _field12;
};

struct ProxyObjectConsumerBase;

struct ProxyObjectProviderBase;

struct RSSIBasedNFOVDetector {
    int _field1;
    double _field2;
    double _field3;
};

struct RangeEnableParameters {
    struct optional<unsigned char> ses_role;
    struct optional<unsigned char> tx_ant_mask;
    struct optional<unsigned char> rx_ant_mask;
    struct optional<unsigned char> rx_sync_search_ant_mask;
    struct optional<unsigned char> tx_preamble;
    struct optional<unsigned char> rx_preamble;
    struct optional<unsigned char> tx_pkt_type;
    struct optional<unsigned char> rx_pkt_type;
    struct optional<unsigned char> tx_mslot_sz_250us;
    struct optional<unsigned char> rx_mslot_sz_250us;
    struct optional<unsigned short> debug_flags;
    struct optional<unsigned long long> start_time;
    struct optional<unsigned int> start_time_uncertainty;
    struct optional<unsigned char> rf_channel;
    struct optional<unsigned char> dual_ranging_enable;
    struct optional<unsigned char> tx_ant_mask2;
    struct optional<unsigned char> rx_ant_mask2;
    struct optional<unsigned char> rx_sync_search_ant_mask2;
    struct optional<short> soi_rssi_thd2;
    struct optional<unsigned short> interval_ms;
    struct optional<unsigned long long> base_mac_addr;
    struct optional<unsigned short> interval_min_ms;
    struct optional<unsigned short> interval_max_ms;
    struct optional<unsigned char> naccess_slots_min;
    struct optional<unsigned char> naccess_slots_max;
    struct optional<unsigned long long> peer_addr;
};

struct ReadOnlyServiceRequestDatabase;

struct RegulatoryProvider;

struct RegulatoryProxyObject {
    CDUnknownFunctionPointerType *_field1;
    struct ProxyObjectConsumerBase *_field2;
    struct ProxyObjectProviderBase *_field3;
    struct mutex _field4;
};

struct ResponderSuperframeStats {
    double _field1;
    unsigned short _field2;
    struct SlaveSFCompleteEvent _field3;
    struct optional<double> _field4;
};

struct ResponsePacketAndHeader;

struct RoseCIRDecoder {
    int _field1;
    _Bool _field2;
    unsigned char _field3;
    unsigned short _field4;
    struct vector<unsigned char, std::__1::allocator<unsigned char>> _field5;
};

struct RoseCommandInterface;

struct RoseCommunicationMgr {
    CDUnknownFunctionPointerType *_field1;
    struct mutex _field2;
    struct deque<std::__1::vector<unsigned char, std::__1::allocator<unsigned char>>, std::__1::allocator<std::__1::vector<unsigned char, std::__1::allocator<unsigned char>>>> _field3;
    struct mutex _field4;
    struct queue<Rose::RoseCommunicationMgr::ResponsePacketAndHeader, std::__1::deque<Rose::RoseCommunicationMgr::ResponsePacketAndHeader, std::__1::allocator<Rose::RoseCommunicationMgr::ResponsePacketAndHeader>>> _field5;
    struct mutex _field6;
    _Bool _field7;
    struct DispatchQueue _field8;
    struct RoseResponseHandler _field9;
    struct RoseEventHandler _field10;
    struct RoseControllerInterface _field11;
    struct TimeSyncScheduler _field12;
    struct RoseDebugManager _field13;
    _Bool _field14;
    struct atomic<bool> _field15;
    int _field16;
    id _field17;
    id _field18;
};

struct RoseControllerInterface {
    struct IOCFPlugInInterfaceStruct **_field1;
    struct RoseControllerInterfaceV1Vtbl **_field2;
    struct function<void (std::__1::vector<unsigned char, std::__1::allocator<unsigned char>>&, bool)> _field3;
    void *_field4;
    CDUnknownFunctionPointerType _field5;
    CDUnknownFunctionPointerType _field6;
    CDUnknownFunctionPointerType _field7;
    CDUnknownFunctionPointerType _field8;
    CDUnknownFunctionPointerType _field9;
    CDUnknownFunctionPointerType _field10;
    CDUnknownFunctionPointerType _field11;
    struct function<void (_roseCrashlogDescriptor *)> _field12;
    struct function<void (Rose::FirmwareState)> _field13;
    struct function<void (Rose::RoseControllerError, void *, unsigned long)> _field14;
    _Bool _field15;
};

struct RoseControllerInterfaceV1Vtbl;

struct RoseDebugManager {
    _Bool _field1;
    _Bool _field2;
    int _field3;
    struct os_unfair_lock_s _field4;
    id _field5;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field6;
    struct RoseControllerInterface *_field7;
    struct function<void (Rose::DebugManagerEvent)> _field8;
    struct function<void (Rose::MetricType, void *)> _field9;
    id _field10;
    _Bool _field11;
    _Bool _field12;
};

struct RoseDeviceDescriptor {
    int type;
    struct optional<std::__1::array<unsigned char, 16>> uuid;
    struct optional<std::__1::array<unsigned char, 8>> rose_mac_address;
    struct optional<std::__1::array<unsigned char, 6>> bt_adv_address;
};

struct RoseEventHandler {
    struct mutex _field1;
    struct weak_ptr<Rose::RoseEventInterface> _field2;
    struct DispatchQueue *_field3;
    int _field4;
    struct RoseCIRDecoder _field5;
    struct vector<unsigned char, std::__1::allocator<unsigned char>> _field6;
};

struct RoseEventInterface;

struct RoseMeasurementAggregator {
    struct function<void (rose::ReceivedRoseMeasurements &&)> _field1;
    struct optional<rose::AOACIRDataEvent> _field2;
    struct optional<rose::TOACIRDataEvent> _field3;
    struct map<rose::RoseMeasurementAggregator::TargetId, rose::RoseMeasurementAggregator::RoseMeasurementBufferSlot, std::__1::less<rose::RoseMeasurementAggregator::TargetId>, std::__1::allocator<std::__1::pair<const rose::RoseMeasurementAggregator::TargetId, rose::RoseMeasurementAggregator::RoseMeasurementBufferSlot>>> _field4;
};

struct RoseMeasurementConsumer;

struct RoseMeasurementEngine {
    _Bool _field1;
    _Bool _field2;
    struct function<void (const rose::RoseMeasurementSet &)> _field3;
    struct RoseMeasurementAggregator _field4;
    _Bool _field5;
    struct mutex _field6;
    struct unique_ptr<rose::AoaHypothesesCalculator, std::__1::default_delete<rose::AoaHypothesesCalculator>> _field7;
    struct NeuralNetworkClassifier _field8;
    struct RSSIBasedNFOVDetector _field9;
    struct map<rose::RoseMeasurementEngine::TargetId, rose::RangeMeasurementHistory, std::__1::less<rose::RoseMeasurementEngine::TargetId>, std::__1::allocator<std::__1::pair<const rose::RoseMeasurementEngine::TargetId, rose::RangeMeasurementHistory>>> _field10;
};

struct RoseProvider;

struct RoseRegulatoryCompliance;

struct RoseRemotePeerScheduler {
    CDUnknownFunctionPointerType *_field1;
    struct shared_ptr<rose::ServiceRequestsDatabase> _field2;
    id _field3;
};

struct RoseResponseHandler {
    struct mutex _field1;
    struct weak_ptr<Rose::RoseResponseInterface> _field2;
    struct DispatchQueue *_field3;
    int _field4;
};

struct RoseResponseInterface;

struct RoseScheduler {
    CDUnknownFunctionPointerType *_field1;
    struct mutex _field2;
    struct tuple<rose::proxyobjects::AOPRoseProxyObject *, rose::proxyobjects::MotionProxyObject *, rose::proxyobjects::CoexProxyObject *, rose::proxyobjects::BluetoothProxyObject *, rose::proxyobjects::TransportProxyObject *, rose::proxyobjects::RegulatoryProxyObject *> _field3;
    id _field4;
    struct shared_ptr<rose::ServiceRequestsDatabase> _field5;
    struct function<void (const rose::RoseSchedulerUpdate &)> _field6;
    struct atomic<bool> _field7;
    struct atomic<bool> _field8;
    struct condition_variable _field9;
    struct RoseRemotePeerScheduler _field10;
};

struct RoseSensorFusionManager {
    int _field1;
    _Bool _field2;
    struct IMUHistory _field3;
    struct unordered_map<unsigned long long, RoseSensorFusion::RoseSensorFusionEKF, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, RoseSensorFusion::RoseSensorFusionEKF>>> _field4;
    struct unordered_map<unsigned long long, RoseSensorFusion::RoseSensorFusionTrackingTargetSet, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, RoseSensorFusion::RoseSensorFusionTrackingTargetSet>>> _field5;
    struct unordered_map<unsigned long long, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>>> _field6;
};

struct RoseServiceProvider {
    CDUnknownFunctionPointerType *_field1;
    struct mutex _field2;
    struct condition_variable _field3;
    id _field4;
    id _field5;
    struct shared_ptr<rose::ServiceRequestsDatabase> _field6;
    struct RoseServiceProviderClient *_field7;
    struct RoseScheduler _field8;
    struct RoseSolutionProvider _field9;
    struct tuple<rose::proxyobjects::AOPRoseProxyObject *, rose::proxyobjects::MotionProxyObject *, rose::proxyobjects::CoexProxyObject *, rose::proxyobjects::BluetoothProxyObject *, rose::proxyobjects::TransportProxyObject *, rose::proxyobjects::RegulatoryProxyObject *> _field10;
    struct tuple<rose::proxyobjects::BluetoothProvider *, rose::proxyobjects::CoexProvider *, rose::proxyobjects::MotionProvider *, rose::proxyobjects::RegulatoryProvider *, rose::proxyobjects::RoseProvider *> _field11;
    struct atomic<rose::RoseServiceProvider::NewRequestState> _field12;
    struct atomic<rose::RoseServiceProviderState> _field13;
    struct atomic<int> _field14;
};

struct RoseServiceProviderClient;

struct RoseServiceRequest;

struct RoseSolutionConsumer;

struct RoseSolutionProvider {
    CDUnknownFunctionPointerType *_field1;
    struct RoseSolutionConsumer *_field2;
    struct RoseMeasurementEngine _field3;
    struct RoseSensorFusionManager _field4;
    struct PRMachTimeConverter _field5;
    struct mutex _field6;
    id _field7;
    id _field8;
    struct unordered_map<unsigned short, rose::serviceattributes::MeasurementType, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, rose::serviceattributes::MeasurementType>>> _field9;
    struct shared_ptr<rose::protobuf::Logger> _field10;
    struct shared_ptr<rose::ReadOnlyServiceRequestDatabase> _field11;
};

struct RoseStartRangingOptions;

struct RoseSupervisorInterface {
    id _field1;
    unsigned int _field2;
    CDUnknownBlockType _field3;
    id _field4;
};

struct RoseSystemAssertion;

struct ServiceRequestsDatabase;

struct SlaveSFCompleteEvent {
    unsigned short _field1;
    unsigned short _field2;
    unsigned char _field3;
    double _field4;
    struct array<unsigned char, 8> _field5;
    unsigned short _field6;
    unsigned short _field7;
    unsigned short _field8;
    unsigned char _field9;
    unsigned char _field10;
    unsigned char _field11;
    unsigned char _field12;
    unsigned char _field13;
    unsigned char _field14;
    double _field15;
    unsigned char _field16;
    unsigned char _field17;
    struct vector<Rose::SlaveSFRxPacketInfo, std::__1::allocator<Rose::SlaveSFRxPacketInfo>> _field18;
};

struct SlaveSFRxPacketInfo;

struct TOACIRDataEvent {
    double _field1;
    unsigned short _field2;
    unsigned char _field3;
    unsigned short _field4;
    unsigned short _field5;
    unsigned char _field6;
    double _field7;
    double _field8;
    struct array<Rose::ComplexSample, 8> _field9;
};

struct TimeStampPair {
    _Bool _field1;
    double _field2;
    double _field3;
};

struct TimeSyncScheduler {
    struct atomic<std::__1::chrono::duration<long long, std::__1::ratio<1, 1000>>> _field1;
    struct RoseCommandInterface *_field2;
    struct function<void (const Rose::TimeSync &)> _field3;
    int _field4;
    struct thread _field5;
    struct atomic<bool> _field6;
};

struct TransportProxyObject {
    CDUnknownFunctionPointerType *_field1;
    struct ProxyObjectConsumerBase *_field2;
    struct ProxyObjectProviderBase *_field3;
    struct mutex _field4;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionEKF>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionEKF>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionTrackingTargetSet>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionTrackingTargetSet>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, rose::serviceattributes::MeasurementType>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, rose::serviceattributes::MeasurementType>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, std::__1::shared_ptr<PRRangingManagerClient>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, std::__1::shared_ptr<PRRangingManagerClient>>, void *>*> *_field1;
};

struct __list_node_base<unsigned int, void *> {
    struct __list_node_base<unsigned int, void *> *_field1;
    struct __list_node_base<unsigned int, void *> *_field2;
};

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct _opaque_pthread_mutex_t {
    long long __sig;
    char __opaque[56];
};

struct array<Rose::ComplexSample, 8> {
    struct ComplexSample _field1[8];
};

struct array<unsigned char, 16> {
    unsigned char __elems_[16];
};

struct array<unsigned char, 6> {
    unsigned char __elems_[6];
};

struct array<unsigned char, 8> {
    unsigned char __elems_[8];
};

struct atomic<BluetoothSPMIDeliveryStatus> {
    struct __cxx_atomic_impl<BluetoothSPMIDeliveryStatus, std::__1::__cxx_atomic_base_impl<BluetoothSPMIDeliveryStatus>> {
        _Atomic int _field1;
    } _field1;
};

struct atomic<PRRose::State> {
    struct __cxx_atomic_impl<PRRose::State, std::__1::__cxx_atomic_base_impl<PRRose::State>> {
        _Atomic int _field1;
    } _field1;
};

struct atomic<bool> {
    struct __cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool>> {
        _Atomic _Bool _field1;
    } _field1;
};

struct atomic<int> {
    struct __cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int>> {
        _Atomic int _field1;
    } _field1;
};

struct atomic<rose::RoseServiceProvider::NewRequestState> {
    struct __cxx_atomic_impl<rose::RoseServiceProvider::NewRequestState, std::__1::__cxx_atomic_base_impl<rose::RoseServiceProvider::NewRequestState>> {
        _Atomic int _field1;
    } _field1;
};

struct atomic<rose::RoseServiceProviderState> {
    struct __cxx_atomic_impl<rose::RoseServiceProviderState, std::__1::__cxx_atomic_base_impl<rose::RoseServiceProviderState>> {
        _Atomic int _field1;
    } _field1;
};

struct atomic<std::__1::chrono::duration<long long, std::__1::ratio<1, 1000>>> {
    struct __cxx_atomic_impl<std::__1::chrono::duration<long long, std::__1::ratio<1, 1000>>, std::__1::__cxx_atomic_base_impl<std::__1::chrono::duration<long long, std::__1::ratio<1, 1000>>>> {
        _Atomic struct duration<long long, std::__1::ratio<1, 1000>> _field1;
    } _field1;
};

struct atomic<unsigned long> {
    struct __cxx_atomic_impl<unsigned long, std::__1::__cxx_atomic_base_impl<unsigned long>> {
        _Atomic unsigned long long __a_value;
    } __a_;
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *_field1;
                    unsigned long long _field2;
                    unsigned long long _field3;
                } _field1;
                struct __short {
                    char _field1[23];
                    struct {
                        unsigned char _field1;
                    } _field2;
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
};

struct condition_variable {
    struct _opaque_pthread_cond_t {
        long long _field1;
        char _field2[40];
    } _field1;
};

struct deque<Rose::RoseCommunicationMgr::ResponsePacketAndHeader, std::__1::allocator<Rose::RoseCommunicationMgr::ResponsePacketAndHeader>> {
    struct __split_buffer<Rose::RoseCommunicationMgr::ResponsePacketAndHeader *, std::__1::allocator<Rose::RoseCommunicationMgr::ResponsePacketAndHeader *>> {
        struct ResponsePacketAndHeader **_field1;
        struct ResponsePacketAndHeader **_field2;
        struct ResponsePacketAndHeader **_field3;
        struct __compressed_pair<Rose::RoseCommunicationMgr::ResponsePacketAndHeader **, std::__1::allocator<Rose::RoseCommunicationMgr::ResponsePacketAndHeader *>> {
            struct ResponsePacketAndHeader **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<Rose::RoseCommunicationMgr::ResponsePacketAndHeader>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<RoseSensorFusion::IMUData, std::__1::allocator<RoseSensorFusion::IMUData>> {
    struct __split_buffer<RoseSensorFusion::IMUData *, std::__1::allocator<RoseSensorFusion::IMUData *>> {
        struct IMUData **_field1;
        struct IMUData **_field2;
        struct IMUData **_field3;
        struct __compressed_pair<RoseSensorFusion::IMUData **, std::__1::allocator<RoseSensorFusion::IMUData *>> {
            struct IMUData **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<RoseSensorFusion::IMUData>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<double, std::__1::allocator<double>> {
    struct __split_buffer<double *, std::__1::allocator<double *>> {
        double **_field1;
        double **_field2;
        double **_field3;
        struct __compressed_pair<double **, std::__1::allocator<double *>> {
            double **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<double>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<std::__1::function<void ()>, std::__1::allocator<std::__1::function<void ()>>> {
    struct __split_buffer<std::__1::function<void ()>*, std::__1::allocator<std::__1::function<void ()>*>> {
        struct function<void ()> **_field1;
        struct function<void ()> **_field2;
        struct function<void ()> **_field3;
        struct __compressed_pair<std::__1::function<void ()>**, std::__1::allocator<std::__1::function<void ()>*>> {
            struct function<void ()> **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::function<void ()>>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<std::__1::vector<unsigned char, std::__1::allocator<unsigned char>>, std::__1::allocator<std::__1::vector<unsigned char, std::__1::allocator<unsigned char>>>> {
    struct __split_buffer<std::__1::vector<unsigned char, std::__1::allocator<unsigned char>>*, std::__1::allocator<std::__1::vector<unsigned char, std::__1::allocator<unsigned char>>*>> {
        struct vector<unsigned char, std::__1::allocator<unsigned char>> **_field1;
        struct vector<unsigned char, std::__1::allocator<unsigned char>> **_field2;
        struct vector<unsigned char, std::__1::allocator<unsigned char>> **_field3;
        struct __compressed_pair<std::__1::vector<unsigned char, std::__1::allocator<unsigned char>>**, std::__1::allocator<std::__1::vector<unsigned char, std::__1::allocator<unsigned char>>*>> {
            struct vector<unsigned char, std::__1::allocator<unsigned char>> **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::vector<unsigned char, std::__1::allocator<unsigned char>>>> {
        unsigned long long _field1;
    } _field3;
};

struct duration<long long, std::__1::ratio<1, 1000>>;

struct function<void ()> {
    struct __value_func<void ()> {
        struct type _field1;
        struct __base<void ()> *_field2;
    } _field1;
};

struct function<void (NSError *)> {
    struct __value_func<void (NSError *)> {
        struct type _field1;
        struct __base<void (NSError *)> *_field2;
    } _field1;
};

struct function<void (PRMccMonitor::SimSlot, std::__1::basic_string<char>, bool)> {
    struct __value_func<void (PRMccMonitor::SimSlot, std::__1::basic_string<char>, bool)> {
        struct type _field1;
        struct __base<void (PRMccMonitor::SimSlot, std::__1::basic_string<char>, bool)> *_field2;
    } _field1;
};

struct function<void (Rose::DebugManagerEvent)> {
    struct __value_func<void (Rose::DebugManagerEvent)> {
        struct type _field1;
        struct __base<void (Rose::DebugManagerEvent)> *_field2;
    } _field1;
};

struct function<void (Rose::FirmwareState)> {
    struct __value_func<void (Rose::FirmwareState)> {
        struct type _field1;
        struct __base<void (Rose::FirmwareState)> *_field2;
    } _field1;
};

struct function<void (Rose::MetricType, void *)> {
    struct __value_func<void (Rose::MetricType, void *)> {
        struct type _field1;
        struct __base<void (Rose::MetricType, void *)> *_field2;
    } _field1;
};

struct function<void (Rose::RoseControllerError, void *, unsigned long)> {
    struct __value_func<void (Rose::RoseControllerError, void *, unsigned long)> {
        struct type _field1;
        struct __base<void (Rose::RoseControllerError, void *, unsigned long)> *_field2;
    } _field1;
};

struct function<void (_roseCrashlogDescriptor *)> {
    struct __value_func<void (_roseCrashlogDescriptor *)> {
        struct type _field1;
        struct __base<void (_roseCrashlogDescriptor *)> *_field2;
    } _field1;
};

struct function<void (bool)> {
    struct __value_func<void (bool)> {
        struct type _field1;
        struct __base<void (bool)> *_field2;
    } _field1;
};

struct function<void (const Rose::TimeSync &)> {
    struct __value_func<void (const Rose::TimeSync &)> {
        struct type _field1;
        struct __base<void (const Rose::TimeSync &)> *_field2;
    } _field1;
};

struct function<void (const rose::RoseMeasurementSet &)> {
    struct __value_func<void (const rose::RoseMeasurementSet &)> {
        struct type _field1;
        struct __base<void (const rose::RoseMeasurementSet &)> *_field2;
    } _field1;
};

struct function<void (const rose::RoseSchedulerUpdate &)> {
    struct __value_func<void (const rose::RoseSchedulerUpdate &)> {
        struct type _field1;
        struct __base<void (const rose::RoseSchedulerUpdate &)> *_field2;
    } _field1;
};

struct function<void (const std::__1::basic_string<char>&)> {
    struct __value_func<void (const std::__1::basic_string<char>&)> {
        struct type _field1;
        struct __base<void (const std::__1::basic_string<char>&)> *_field2;
    } _field1;
};

struct function<void (const std::__1::basic_string<char>&, bool, double)> {
    struct __value_func<void (const std::__1::basic_string<char>&, bool, double)> {
        struct type _field1;
        struct __base<void (const std::__1::basic_string<char>&, bool, double)> *_field2;
    } _field1;
};

struct function<void (double, double, double, double)> {
    struct __value_func<void (double, double, double, double)> {
        struct type _field1;
        struct __base<void (double, double, double, double)> *_field2;
    } _field1;
};

struct function<void (rose::ReceivedRoseMeasurements &&)> {
    struct __value_func<void (rose::ReceivedRoseMeasurements &&)> {
        struct type _field1;
        struct __base<void (rose::ReceivedRoseMeasurements &&)> *_field2;
    } _field1;
};

struct function<void (std::__1::vector<unsigned char, std::__1::allocator<unsigned char>>&, bool)> {
    struct __value_func<void (std::__1::vector<unsigned char, std::__1::allocator<unsigned char>>&, bool)> {
        struct type _field1;
        struct __base<void (std::__1::vector<unsigned char, std::__1::allocator<unsigned char>>&, bool)> *_field2;
    } _field1;
};

struct is_same<std::__1::basic_string<char>, std::__1::basic_string<char>>;

struct list<unsigned int, std::__1::allocator<unsigned int>> {
    struct __list_node_base<unsigned int, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<unsigned int, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct map<PRGeoFenceMonitor::Event, NSObject<OS_dispatch_source>*, std::__1::less<PRGeoFenceMonitor::Event>, std::__1::allocator<std::__1::pair<const PRGeoFenceMonitor::Event, NSObject<OS_dispatch_source>*>>> {
    struct __tree<std::__1::__value_type<PRGeoFenceMonitor::Event, NSObject<OS_dispatch_source>*>, std::__1::__map_value_compare<PRGeoFenceMonitor::Event, std::__1::__value_type<PRGeoFenceMonitor::Event, NSObject<OS_dispatch_source>*>, std::__1::less<PRGeoFenceMonitor::Event>, true>, std::__1::allocator<std::__1::__value_type<PRGeoFenceMonitor::Event, NSObject<OS_dispatch_source>*>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<PRGeoFenceMonitor::Event, NSObject<OS_dispatch_source>*>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<PRGeoFenceMonitor::Event, std::__1::__value_type<PRGeoFenceMonitor::Event, NSObject<OS_dispatch_source>*>, std::__1::less<PRGeoFenceMonitor::Event>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<PRGeoFenceMonitor::Event, bool, std::__1::less<PRGeoFenceMonitor::Event>, std::__1::allocator<std::__1::pair<const PRGeoFenceMonitor::Event, bool>>> {
    struct __tree<std::__1::__value_type<PRGeoFenceMonitor::Event, bool>, std::__1::__map_value_compare<PRGeoFenceMonitor::Event, std::__1::__value_type<PRGeoFenceMonitor::Event, bool>, std::__1::less<PRGeoFenceMonitor::Event>, true>, std::__1::allocator<std::__1::__value_type<PRGeoFenceMonitor::Event, bool>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<PRGeoFenceMonitor::Event, bool>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<PRGeoFenceMonitor::Event, std::__1::__value_type<PRGeoFenceMonitor::Event, bool>, std::__1::less<PRGeoFenceMonitor::Event>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<PRGeoFenceMonitor::State, PRGeoFenceMonitor::State (PRGeoFenceMonitor::*)(PRGeoFenceMonitor::Event), std::__1::less<PRGeoFenceMonitor::State>, std::__1::allocator<std::__1::pair<const PRGeoFenceMonitor::State, PRGeoFenceMonitor::State (PRGeoFenceMonitor::*)(PRGeoFenceMonitor::Event)>>> {
    struct __tree<std::__1::__value_type<PRGeoFenceMonitor::State, PRGeoFenceMonitor::State (PRGeoFenceMonitor::*)(PRGeoFenceMonitor::Event)>, std::__1::__map_value_compare<PRGeoFenceMonitor::State, std::__1::__value_type<PRGeoFenceMonitor::State, PRGeoFenceMonitor::State (PRGeoFenceMonitor::*)(PRGeoFenceMonitor::Event)>, std::__1::less<PRGeoFenceMonitor::State>, true>, std::__1::allocator<std::__1::__value_type<PRGeoFenceMonitor::State, PRGeoFenceMonitor::State (PRGeoFenceMonitor::*)(PRGeoFenceMonitor::Event)>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<PRGeoFenceMonitor::State, PRGeoFenceMonitor::State (PRGeoFenceMonitor::*)(PRGeoFenceMonitor::Event)>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<PRGeoFenceMonitor::State, std::__1::__value_type<PRGeoFenceMonitor::State, PRGeoFenceMonitor::State (PRGeoFenceMonitor::*)(PRGeoFenceMonitor::Event)>, std::__1::less<PRGeoFenceMonitor::State>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<PRGeoMonitor::Event, NSObject<OS_dispatch_source>*, std::__1::less<PRGeoMonitor::Event>, std::__1::allocator<std::__1::pair<const PRGeoMonitor::Event, NSObject<OS_dispatch_source>*>>> {
    struct __tree<std::__1::__value_type<PRGeoMonitor::Event, NSObject<OS_dispatch_source>*>, std::__1::__map_value_compare<PRGeoMonitor::Event, std::__1::__value_type<PRGeoMonitor::Event, NSObject<OS_dispatch_source>*>, std::__1::less<PRGeoMonitor::Event>, true>, std::__1::allocator<std::__1::__value_type<PRGeoMonitor::Event, NSObject<OS_dispatch_source>*>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<PRGeoMonitor::Event, NSObject<OS_dispatch_source>*>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<PRGeoMonitor::Event, std::__1::__value_type<PRGeoMonitor::Event, NSObject<OS_dispatch_source>*>, std::__1::less<PRGeoMonitor::Event>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<PRGeoMonitor::Event, bool, std::__1::less<PRGeoMonitor::Event>, std::__1::allocator<std::__1::pair<const PRGeoMonitor::Event, bool>>> {
    struct __tree<std::__1::__value_type<PRGeoMonitor::Event, bool>, std::__1::__map_value_compare<PRGeoMonitor::Event, std::__1::__value_type<PRGeoMonitor::Event, bool>, std::__1::less<PRGeoMonitor::Event>, true>, std::__1::allocator<std::__1::__value_type<PRGeoMonitor::Event, bool>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<PRGeoMonitor::Event, bool>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<PRGeoMonitor::Event, std::__1::__value_type<PRGeoMonitor::Event, bool>, std::__1::less<PRGeoMonitor::Event>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<PRGeoMonitor::State, PRGeoMonitor::State (PRGeoMonitor::*)(PRGeoMonitor::Event), std::__1::less<PRGeoMonitor::State>, std::__1::allocator<std::__1::pair<const PRGeoMonitor::State, PRGeoMonitor::State (PRGeoMonitor::*)(PRGeoMonitor::Event)>>> {
    struct __tree<std::__1::__value_type<PRGeoMonitor::State, PRGeoMonitor::State (PRGeoMonitor::*)(PRGeoMonitor::Event)>, std::__1::__map_value_compare<PRGeoMonitor::State, std::__1::__value_type<PRGeoMonitor::State, PRGeoMonitor::State (PRGeoMonitor::*)(PRGeoMonitor::Event)>, std::__1::less<PRGeoMonitor::State>, true>, std::__1::allocator<std::__1::__value_type<PRGeoMonitor::State, PRGeoMonitor::State (PRGeoMonitor::*)(PRGeoMonitor::Event)>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<PRGeoMonitor::State, PRGeoMonitor::State (PRGeoMonitor::*)(PRGeoMonitor::Event)>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<PRGeoMonitor::State, std::__1::__value_type<PRGeoMonitor::State, PRGeoMonitor::State (PRGeoMonitor::*)(PRGeoMonitor::Event)>, std::__1::less<PRGeoMonitor::State>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<PRLocationQueryManager::Event, NSObject<OS_dispatch_source>*, std::__1::less<PRLocationQueryManager::Event>, std::__1::allocator<std::__1::pair<const PRLocationQueryManager::Event, NSObject<OS_dispatch_source>*>>> {
    struct __tree<std::__1::__value_type<PRLocationQueryManager::Event, NSObject<OS_dispatch_source>*>, std::__1::__map_value_compare<PRLocationQueryManager::Event, std::__1::__value_type<PRLocationQueryManager::Event, NSObject<OS_dispatch_source>*>, std::__1::less<PRLocationQueryManager::Event>, true>, std::__1::allocator<std::__1::__value_type<PRLocationQueryManager::Event, NSObject<OS_dispatch_source>*>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<PRLocationQueryManager::Event, NSObject<OS_dispatch_source>*>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<PRLocationQueryManager::Event, std::__1::__value_type<PRLocationQueryManager::Event, NSObject<OS_dispatch_source>*>, std::__1::less<PRLocationQueryManager::Event>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<PRLocationQueryManager::Event, bool, std::__1::less<PRLocationQueryManager::Event>, std::__1::allocator<std::__1::pair<const PRLocationQueryManager::Event, bool>>> {
    struct __tree<std::__1::__value_type<PRLocationQueryManager::Event, bool>, std::__1::__map_value_compare<PRLocationQueryManager::Event, std::__1::__value_type<PRLocationQueryManager::Event, bool>, std::__1::less<PRLocationQueryManager::Event>, true>, std::__1::allocator<std::__1::__value_type<PRLocationQueryManager::Event, bool>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<PRLocationQueryManager::Event, bool>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<PRLocationQueryManager::Event, std::__1::__value_type<PRLocationQueryManager::Event, bool>, std::__1::less<PRLocationQueryManager::Event>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<PRLocationQueryManager::State, PRLocationQueryManager::State (PRLocationQueryManager::*)(PRLocationQueryManager::Event), std::__1::less<PRLocationQueryManager::State>, std::__1::allocator<std::__1::pair<const PRLocationQueryManager::State, PRLocationQueryManager::State (PRLocationQueryManager::*)(PRLocationQueryManager::Event)>>> {
    struct __tree<std::__1::__value_type<PRLocationQueryManager::State, PRLocationQueryManager::State (PRLocationQueryManager::*)(PRLocationQueryManager::Event)>, std::__1::__map_value_compare<PRLocationQueryManager::State, std::__1::__value_type<PRLocationQueryManager::State, PRLocationQueryManager::State (PRLocationQueryManager::*)(PRLocationQueryManager::Event)>, std::__1::less<PRLocationQueryManager::State>, true>, std::__1::allocator<std::__1::__value_type<PRLocationQueryManager::State, PRLocationQueryManager::State (PRLocationQueryManager::*)(PRLocationQueryManager::Event)>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<PRLocationQueryManager::State, PRLocationQueryManager::State (PRLocationQueryManager::*)(PRLocationQueryManager::Event)>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<PRLocationQueryManager::State, std::__1::__value_type<PRLocationQueryManager::State, PRLocationQueryManager::State (PRLocationQueryManager::*)(PRLocationQueryManager::Event)>, std::__1::less<PRLocationQueryManager::State>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<PRMccMonitor::SimSlot, PRMccMonitor::MccIsoUpdate, std::__1::less<PRMccMonitor::SimSlot>, std::__1::allocator<std::__1::pair<const PRMccMonitor::SimSlot, PRMccMonitor::MccIsoUpdate>>> {
    struct __tree<std::__1::__value_type<PRMccMonitor::SimSlot, PRMccMonitor::MccIsoUpdate>, std::__1::__map_value_compare<PRMccMonitor::SimSlot, std::__1::__value_type<PRMccMonitor::SimSlot, PRMccMonitor::MccIsoUpdate>, std::__1::less<PRMccMonitor::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<PRMccMonitor::SimSlot, PRMccMonitor::MccIsoUpdate>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<PRMccMonitor::SimSlot, PRMccMonitor::MccIsoUpdate>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<PRMccMonitor::SimSlot, std::__1::__value_type<PRMccMonitor::SimSlot, PRMccMonitor::MccIsoUpdate>, std::__1::less<PRMccMonitor::SimSlot>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<PRMccMonitor::SimSlot, std::__1::basic_string<char>, std::__1::less<PRMccMonitor::SimSlot>, std::__1::allocator<std::__1::pair<const PRMccMonitor::SimSlot, std::__1::basic_string<char>>>> {
    struct __tree<std::__1::__value_type<PRMccMonitor::SimSlot, std::__1::basic_string<char>>, std::__1::__map_value_compare<PRMccMonitor::SimSlot, std::__1::__value_type<PRMccMonitor::SimSlot, std::__1::basic_string<char>>, std::__1::less<PRMccMonitor::SimSlot>, true>, std::__1::allocator<std::__1::__value_type<PRMccMonitor::SimSlot, std::__1::basic_string<char>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<PRMccMonitor::SimSlot, std::__1::basic_string<char>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<PRMccMonitor::SimSlot, std::__1::__value_type<PRMccMonitor::SimSlot, std::__1::basic_string<char>>, std::__1::less<PRMccMonitor::SimSlot>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<Rose::RoseChannelConfig, bool, std::__1::less<Rose::RoseChannelConfig>, std::__1::allocator<std::__1::pair<const Rose::RoseChannelConfig, bool>>> {
    struct __tree<std::__1::__value_type<Rose::RoseChannelConfig, bool>, std::__1::__map_value_compare<Rose::RoseChannelConfig, std::__1::__value_type<Rose::RoseChannelConfig, bool>, std::__1::less<Rose::RoseChannelConfig>, true>, std::__1::allocator<std::__1::__value_type<Rose::RoseChannelConfig, bool>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<Rose::RoseChannelConfig, bool>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<Rose::RoseChannelConfig, std::__1::__value_type<Rose::RoseChannelConfig, bool>, std::__1::less<Rose::RoseChannelConfig>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<Rose::RoseChannelConfig, std::__1::map<PRRegulatorySettings::ChannelPreferenceSource, bool, std::__1::less<PRRegulatorySettings::ChannelPreferenceSource>, std::__1::allocator<std::__1::pair<const PRRegulatorySettings::ChannelPreferenceSource, bool>>>, std::__1::less<Rose::RoseChannelConfig>, std::__1::allocator<std::__1::pair<const Rose::RoseChannelConfig, std::__1::map<PRRegulatorySettings::ChannelPreferenceSource, bool, std::__1::less<PRRegulatorySettings::ChannelPreferenceSource>, std::__1::allocator<std::__1::pair<const PRRegulatorySettings::ChannelPreferenceSource, bool>>>>>> {
    struct __tree<std::__1::__value_type<Rose::RoseChannelConfig, std::__1::map<PRRegulatorySettings::ChannelPreferenceSource, bool, std::__1::less<PRRegulatorySettings::ChannelPreferenceSource>, std::__1::allocator<std::__1::pair<const PRRegulatorySettings::ChannelPreferenceSource, bool>>>>, std::__1::__map_value_compare<Rose::RoseChannelConfig, std::__1::__value_type<Rose::RoseChannelConfig, std::__1::map<PRRegulatorySettings::ChannelPreferenceSource, bool, std::__1::less<PRRegulatorySettings::ChannelPreferenceSource>, std::__1::allocator<std::__1::pair<const PRRegulatorySettings::ChannelPreferenceSource, bool>>>>, std::__1::less<Rose::RoseChannelConfig>, true>, std::__1::allocator<std::__1::__value_type<Rose::RoseChannelConfig, std::__1::map<PRRegulatorySettings::ChannelPreferenceSource, bool, std::__1::less<PRRegulatorySettings::ChannelPreferenceSource>, std::__1::allocator<std::__1::pair<const PRRegulatorySettings::ChannelPreferenceSource, bool>>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<Rose::RoseChannelConfig, std::__1::map<PRRegulatorySettings::ChannelPreferenceSource, bool, std::__1::less<PRRegulatorySettings::ChannelPreferenceSource>, std::__1::allocator<std::__1::pair<const PRRegulatorySettings::ChannelPreferenceSource, bool>>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<Rose::RoseChannelConfig, std::__1::__value_type<Rose::RoseChannelConfig, std::__1::map<PRRegulatorySettings::ChannelPreferenceSource, bool, std::__1::less<PRRegulatorySettings::ChannelPreferenceSource>, std::__1::allocator<std::__1::pair<const PRRegulatorySettings::ChannelPreferenceSource, bool>>>>, std::__1::less<Rose::RoseChannelConfig>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<rose::RoseMeasurementAggregator::TargetId, rose::RoseMeasurementAggregator::RoseMeasurementBufferSlot, std::__1::less<rose::RoseMeasurementAggregator::TargetId>, std::__1::allocator<std::__1::pair<const rose::RoseMeasurementAggregator::TargetId, rose::RoseMeasurementAggregator::RoseMeasurementBufferSlot>>> {
    struct __tree<std::__1::__value_type<rose::RoseMeasurementAggregator::TargetId, rose::RoseMeasurementAggregator::RoseMeasurementBufferSlot>, std::__1::__map_value_compare<rose::RoseMeasurementAggregator::TargetId, std::__1::__value_type<rose::RoseMeasurementAggregator::TargetId, rose::RoseMeasurementAggregator::RoseMeasurementBufferSlot>, std::__1::less<rose::RoseMeasurementAggregator::TargetId>, true>, std::__1::allocator<std::__1::__value_type<rose::RoseMeasurementAggregator::TargetId, rose::RoseMeasurementAggregator::RoseMeasurementBufferSlot>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<rose::RoseMeasurementAggregator::TargetId, rose::RoseMeasurementAggregator::RoseMeasurementBufferSlot>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<rose::RoseMeasurementAggregator::TargetId, std::__1::__value_type<rose::RoseMeasurementAggregator::TargetId, rose::RoseMeasurementAggregator::RoseMeasurementBufferSlot>, std::__1::less<rose::RoseMeasurementAggregator::TargetId>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<rose::RoseMeasurementEngine::TargetId, rose::RangeMeasurementHistory, std::__1::less<rose::RoseMeasurementEngine::TargetId>, std::__1::allocator<std::__1::pair<const rose::RoseMeasurementEngine::TargetId, rose::RangeMeasurementHistory>>> {
    struct __tree<std::__1::__value_type<rose::RoseMeasurementEngine::TargetId, rose::RangeMeasurementHistory>, std::__1::__map_value_compare<rose::RoseMeasurementEngine::TargetId, std::__1::__value_type<rose::RoseMeasurementEngine::TargetId, rose::RangeMeasurementHistory>, std::__1::less<rose::RoseMeasurementEngine::TargetId>, true>, std::__1::allocator<std::__1::__value_type<rose::RoseMeasurementEngine::TargetId, rose::RangeMeasurementHistory>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<rose::RoseMeasurementEngine::TargetId, rose::RangeMeasurementHistory>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<rose::RoseMeasurementEngine::TargetId, std::__1::__value_type<rose::RoseMeasurementEngine::TargetId, rose::RangeMeasurementHistory>, std::__1::less<rose::RoseMeasurementEngine::TargetId>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned long long, double, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, double>>> {
    struct __tree<std::__1::__value_type<unsigned long long, double>, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, double>, std::__1::less<unsigned long long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long long, double>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long long, double>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, double>, std::__1::less<unsigned long long>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct mutex {
    struct _opaque_pthread_mutex_t __m_;
};

struct optional<Rose::GetPowerStatsResponse> {
    union {
        char _field1;
        struct GetPowerStatsResponse _field2;
    } _field1;
    _Bool _field2;
};

struct optional<Rose::HelloResponse::AdditionalInfo> {
    union {
        char _field1;
        struct AdditionalInfo _field2;
    } _field1;
    _Bool _field2;
};

struct optional<Rose::HelloResponse> {
    union {
        char _field1;
        struct HelloResponse _field2;
    } _field1;
    _Bool _field2;
};

struct optional<double> {
    union {
        char _field1;
        double _field2;
    } _field1;
    _Bool _field2;
};

struct optional<rose::AOACIRDataEvent> {
    union {
        char _field1;
        struct AOACIRDataEvent _field2;
    } _field1;
    _Bool _field2;
};

struct optional<rose::RoseDeviceDescriptor> {
    union {
        char __null_state_;
        struct RoseDeviceDescriptor __val_;
    } ;
    _Bool __engaged_;
};

struct optional<rose::TOACIRDataEvent> {
    union {
        char _field1;
        struct TOACIRDataEvent _field2;
    } _field1;
    _Bool _field2;
};

struct optional<short> {
    union {
        char __null_state_;
        short __val_;
    } ;
    _Bool __engaged_;
};

struct optional<std::__1::array<unsigned char, 16>> {
    union {
        char __null_state_;
        struct array<unsigned char, 16> __val_;
    } ;
    _Bool __engaged_;
};

struct optional<std::__1::array<unsigned char, 6>> {
    union {
        char __null_state_;
        struct array<unsigned char, 6> __val_;
    } ;
    _Bool __engaged_;
};

struct optional<std::__1::array<unsigned char, 8>> {
    union {
        char __null_state_;
        struct array<unsigned char, 8> __val_;
    } ;
    _Bool __engaged_;
};

struct optional<unsigned char> {
    union {
        char __null_state_;
        unsigned char __val_;
    } ;
    _Bool __engaged_;
};

struct optional<unsigned int> {
    union {
        char __null_state_;
        unsigned int __val_;
    } ;
    _Bool __engaged_;
};

struct optional<unsigned long long> {
    union {
        char __null_state_;
        unsigned long long __val_;
    } ;
    _Bool __engaged_;
};

struct optional<unsigned short> {
    union {
        char __null_state_;
        unsigned short __val_;
    } ;
    _Bool __engaged_;
};

struct os_unfair_lock_s {
    unsigned int _field1;
};

struct queue<Rose::RoseCommunicationMgr::ResponsePacketAndHeader, std::__1::deque<Rose::RoseCommunicationMgr::ResponsePacketAndHeader, std::__1::allocator<Rose::RoseCommunicationMgr::ResponsePacketAndHeader>>> {
    struct deque<Rose::RoseCommunicationMgr::ResponsePacketAndHeader, std::__1::allocator<Rose::RoseCommunicationMgr::ResponsePacketAndHeader>> _field1;
};

struct queue<std::__1::function<void ()>, std::__1::deque<std::__1::function<void ()>, std::__1::allocator<std::__1::function<void ()>>>> {
    struct deque<std::__1::function<void ()>, std::__1::allocator<std::__1::function<void ()>>> _field1;
};

struct recursive_mutex {
    struct _opaque_pthread_mutex_t _field1;
};

struct set<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::less<std::__1::shared_ptr<PRRangingManagerClient>>, std::__1::allocator<std::__1::shared_ptr<PRRangingManagerClient>>> {
    struct __tree<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::less<std::__1::shared_ptr<PRRangingManagerClient>>, std::__1::allocator<std::__1::shared_ptr<PRRangingManagerClient>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<PRRangingManagerClient>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<PRRangingManagerClient>>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct shared_ptr<PRConfigurationManager> {
    struct PRConfigurationManager *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<PRGeoFenceMonitor> {
    struct PRGeoFenceMonitor *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<PRGeoMonitor> {
    struct PRGeoMonitor *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<PRLocationQueryManager> {
    struct PRLocationQueryManager *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<PRRangingManagerClient> {
    struct PRRangingManagerClient *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<rose::ReadOnlyServiceRequestDatabase> {
    struct ReadOnlyServiceRequestDatabase *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<rose::ResponderSuperframeStats> {
    struct ResponderSuperframeStats *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<rose::ServiceRequestsDatabase> {
    struct ServiceRequestsDatabase *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<rose::protobuf::Logger> {
    struct Logger *_field1;
    struct __shared_weak_count *_field2;
};

struct thread {
    struct _opaque_pthread_t *_field1;
};

struct tuple<rose::proxyobjects::AOPRoseProxyObject *, rose::proxyobjects::MotionProxyObject *, rose::proxyobjects::CoexProxyObject *, rose::proxyobjects::BluetoothProxyObject *, rose::proxyobjects::TransportProxyObject *, rose::proxyobjects::RegulatoryProxyObject *> {
    struct __tuple_impl<std::__1::__tuple_indices<0, 1, 2, 3, 4, 5>, rose::proxyobjects::AOPRoseProxyObject *, rose::proxyobjects::MotionProxyObject *, rose::proxyobjects::CoexProxyObject *, rose::proxyobjects::BluetoothProxyObject *, rose::proxyobjects::TransportProxyObject *, rose::proxyobjects::RegulatoryProxyObject *> {
        struct AOPRoseProxyObject *_field1;
        struct MotionProxyObject *_field2;
        struct CoexProxyObject *_field3;
        struct BluetoothProxyObject *_field4;
        struct TransportProxyObject *_field5;
        struct RegulatoryProxyObject *_field6;
    } _field1;
};

struct tuple<rose::proxyobjects::BluetoothProvider *, rose::proxyobjects::CoexProvider *, rose::proxyobjects::MotionProvider *, rose::proxyobjects::RegulatoryProvider *, rose::proxyobjects::RoseProvider *> {
    struct __tuple_impl<std::__1::__tuple_indices<0, 1, 2, 3, 4>, rose::proxyobjects::BluetoothProvider *, rose::proxyobjects::CoexProvider *, rose::proxyobjects::MotionProvider *, rose::proxyobjects::RegulatoryProvider *, rose::proxyobjects::RoseProvider *> {
        struct BluetoothProvider *_field1;
        struct CoexProvider *_field2;
        struct MotionProvider *_field3;
        struct RegulatoryProvider *_field4;
        struct RoseProvider *_field5;
    } _field1;
};

struct type {
    unsigned char _field1[24];
};

struct unique_ptr<Rose::RoseSystemAssertion, std::__1::default_delete<Rose::RoseSystemAssertion>> {
    struct __compressed_pair<Rose::RoseSystemAssertion *, std::__1::default_delete<Rose::RoseSystemAssertion>> {
        struct RoseSystemAssertion *_field1;
    } _field1;
};

struct unique_ptr<rose::AoaHypothesesCalculator, std::__1::default_delete<rose::AoaHypothesesCalculator>> {
    struct __compressed_pair<rose::AoaHypothesesCalculator *, std::__1::default_delete<rose::AoaHypothesesCalculator>> {
        struct AoaHypothesesCalculator *_field1;
    } _field1;
};

struct unique_ptr<rose::NNParams, std::__1::default_delete<rose::NNParams>> {
    struct __compressed_pair<rose::NNParams *, std::__1::default_delete<rose::NNParams>> {
        struct NNParams *_field1;
    } _field1;
};

struct unique_ptr<rose::RoseServiceRequest, std::__1::default_delete<rose::RoseServiceRequest>> {
    struct __compressed_pair<rose::RoseServiceRequest *, std::__1::default_delete<rose::RoseServiceRequest>> {
        struct RoseServiceRequest *__value_;
    } __ptr_;
};

struct unique_ptr<rose::RoseStartRangingOptions, std::__1::default_delete<rose::RoseStartRangingOptions>> {
    struct __compressed_pair<rose::RoseStartRangingOptions *, std::__1::default_delete<rose::RoseStartRangingOptions>> {
        struct RoseStartRangingOptions *__value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionEKF>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionEKF>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionEKF>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionEKF>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionEKF>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionEKF>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionEKF>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionTrackingTargetSet>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionTrackingTargetSet>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionTrackingTargetSet>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionTrackingTargetSet>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionTrackingTargetSet>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionTrackingTargetSet>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionTrackingTargetSet>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, rose::serviceattributes::MeasurementType>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, rose::serviceattributes::MeasurementType>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, rose::serviceattributes::MeasurementType>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, rose::serviceattributes::MeasurementType>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, rose::serviceattributes::MeasurementType>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, rose::serviceattributes::MeasurementType>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, rose::serviceattributes::MeasurementType>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, std::__1::shared_ptr<PRRangingManagerClient>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, std::__1::shared_ptr<PRRangingManagerClient>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, std::__1::shared_ptr<PRRangingManagerClient>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, std::__1::shared_ptr<PRRangingManagerClient>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, std::__1::shared_ptr<PRRangingManagerClient>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, std::__1::shared_ptr<PRRangingManagerClient>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, std::__1::shared_ptr<PRRangingManagerClient>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unordered_map<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>, std::__1::hash<std::__1::shared_ptr<PRRangingManagerClient>>, std::__1::equal_to<std::__1::shared_ptr<PRRangingManagerClient>>, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<PRRangingManagerClient>, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, std::__1::__unordered_map_hasher<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::__hash_value_type<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, std::__1::hash<std::__1::shared_ptr<PRRangingManagerClient>>, true>, std::__1::__unordered_map_equal<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::__hash_value_type<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, std::__1::equal_to<std::__1::shared_ptr<PRRangingManagerClient>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::__hash_value_type<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, std::__1::hash<std::__1::shared_ptr<PRRangingManagerClient>>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::__hash_value_type<std::__1::shared_ptr<PRRangingManagerClient>, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, std::__1::equal_to<std::__1::shared_ptr<PRRangingManagerClient>>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned long long, RoseSensorFusion::RoseSensorFusionEKF, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, RoseSensorFusion::RoseSensorFusionEKF>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionEKF>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionEKF>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionEKF>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionEKF>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionEKF>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionEKF>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionEKF>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionEKF>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionEKF>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionEKF>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionEKF>, std::__1::equal_to<unsigned long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned long long, RoseSensorFusion::RoseSensorFusionTrackingTargetSet, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, RoseSensorFusion::RoseSensorFusionTrackingTargetSet>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionTrackingTargetSet>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionTrackingTargetSet>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionTrackingTargetSet>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionTrackingTargetSet>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionTrackingTargetSet>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionTrackingTargetSet>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionTrackingTargetSet>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionTrackingTargetSet>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionTrackingTargetSet>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionTrackingTargetSet>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, RoseSensorFusion::RoseSensorFusionTrackingTargetSet>, std::__1::equal_to<unsigned long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned long long, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short>>>, std::__1::equal_to<unsigned long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned short, rose::serviceattributes::MeasurementType, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, rose::serviceattributes::MeasurementType>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned short, rose::serviceattributes::MeasurementType>, std::__1::__unordered_map_hasher<unsigned short, std::__1::__hash_value_type<unsigned short, rose::serviceattributes::MeasurementType>, std::__1::hash<unsigned short>, true>, std::__1::__unordered_map_equal<unsigned short, std::__1::__hash_value_type<unsigned short, rose::serviceattributes::MeasurementType>, std::__1::equal_to<unsigned short>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned short, rose::serviceattributes::MeasurementType>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, rose::serviceattributes::MeasurementType>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, rose::serviceattributes::MeasurementType>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, rose::serviceattributes::MeasurementType>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, rose::serviceattributes::MeasurementType>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, rose::serviceattributes::MeasurementType>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned short, std::__1::__hash_value_type<unsigned short, rose::serviceattributes::MeasurementType>, std::__1::hash<unsigned short>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned short, std::__1::__hash_value_type<unsigned short, rose::serviceattributes::MeasurementType>, std::__1::equal_to<unsigned short>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned short, std::__1::shared_ptr<PRRangingManagerClient>, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, std::__1::shared_ptr<PRRangingManagerClient>>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned short, std::__1::shared_ptr<PRRangingManagerClient>>, std::__1::__unordered_map_hasher<unsigned short, std::__1::__hash_value_type<unsigned short, std::__1::shared_ptr<PRRangingManagerClient>>, std::__1::hash<unsigned short>, true>, std::__1::__unordered_map_equal<unsigned short, std::__1::__hash_value_type<unsigned short, std::__1::shared_ptr<PRRangingManagerClient>>, std::__1::equal_to<unsigned short>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned short, std::__1::shared_ptr<PRRangingManagerClient>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, std::__1::shared_ptr<PRRangingManagerClient>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, std::__1::shared_ptr<PRRangingManagerClient>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, std::__1::shared_ptr<PRRangingManagerClient>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, std::__1::shared_ptr<PRRangingManagerClient>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, std::__1::shared_ptr<PRRangingManagerClient>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned short, std::__1::__hash_value_type<unsigned short, std::__1::shared_ptr<PRRangingManagerClient>>, std::__1::hash<unsigned short>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned short, std::__1::__hash_value_type<unsigned short, std::__1::shared_ptr<PRRangingManagerClient>>, std::__1::equal_to<unsigned short>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct vector<PRGeoFenceSite, std::__1::allocator<PRGeoFenceSite>> {
    struct PRGeoFenceSite *_field1;
    struct PRGeoFenceSite *_field2;
    struct __compressed_pair<PRGeoFenceSite *, std::__1::allocator<PRGeoFenceSite>> {
        struct PRGeoFenceSite *_field1;
    } _field3;
};

struct vector<PRPolygon, std::__1::allocator<PRPolygon>> {
    struct PRPolygon *_field1;
    struct PRPolygon *_field2;
    struct __compressed_pair<PRPolygon *, std::__1::allocator<PRPolygon>> {
        struct PRPolygon *_field1;
    } _field3;
};

struct vector<Rose::SlaveSFRxPacketInfo, std::__1::allocator<Rose::SlaveSFRxPacketInfo>> {
    struct SlaveSFRxPacketInfo *_field1;
    struct SlaveSFRxPacketInfo *_field2;
    struct __compressed_pair<Rose::SlaveSFRxPacketInfo *, std::__1::allocator<Rose::SlaveSFRxPacketInfo>> {
        struct SlaveSFRxPacketInfo *_field1;
    } _field3;
};

struct vector<double, std::__1::allocator<double>> {
    double *_field1;
    double *_field2;
    struct __compressed_pair<double *, std::__1::allocator<double>> {
        double *_field1;
    } _field3;
};

struct vector<unsigned char, std::__1::allocator<unsigned char>> {
    char *_field1;
    char *_field2;
    struct __compressed_pair<unsigned char *, std::__1::allocator<unsigned char>> {
        char *_field1;
    } _field3;
};

struct weak_ptr<Rose::RoseEventInterface> {
    struct RoseEventInterface *_field1;
    struct __shared_weak_count *_field2;
};

struct weak_ptr<Rose::RoseResponseInterface> {
    struct RoseResponseInterface *_field1;
    struct __shared_weak_count *_field2;
};

struct weak_ptr<rose::ResponderSuperframeStats> {
    struct ResponderSuperframeStats *_field1;
    struct __shared_weak_count *_field2;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct optional<rose::RoseDeviceDescriptor> {
    union {
        char __null_state_;
        struct RoseDeviceDescriptor __val_;
    } ;
    _Bool __engaged_;
} optional_70f095c2;

typedef struct weak_ptr<rose::ResponderSuperframeStats> {
    struct ResponderSuperframeStats *_field1;
    struct __shared_weak_count *_field2;
} weak_ptr_67d907b6;

